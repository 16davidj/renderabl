/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={7720:(e,t,n)=>{"use strict";n.d(t,{A:()=>s});var r=n(1354),i=n.n(r),a=n(6314),o=n.n(a)()(i());o.push([e.id,".message {\n  border-radius:5px;\n  padding: 0.5em;\n  display: inline-block;\n}\n\n.message.system {\n  background-color: gray;\n}\n\n.message.user {\n  background-color: lightblue;\n  margin-right: 2em;\n  width: auto;\n  flex-direction: row-reverse;\n}\n\n.input-form {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 2rem;\n  margin-bottom:2rem;\n  border-width: 1px;\n  border-radius: 5px;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-bottom: 4rem;\n}\n\n.input-form input[type='text'] {\n  margin-right: 1rem;\n  flex-grow: 1;\n  line-height: 2;\n}\n\n.send-button {\n  background-color: gray;\n  border-radius: 5px;\n  padding: 0.5em 1em;\n}\n\n.person-card {\n  justify-content: start;\n  width: auto;\n}\n\n.main-div {\n  height:100vh;\n  flex-direction:column;\n  overflow-y: auto;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x:0;\n  --tw-border-spacing-y:0;\n  --tw-translate-x:0;\n  --tw-translate-y:0;\n  --tw-rotate:0;\n  --tw-skew-x:0;\n  --tw-skew-y:0;\n  --tw-scale-x:1;\n  --tw-scale-y:1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness:proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width:0px;\n  --tw-ring-offset-color:#fff;\n  --tw-ring-color:rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow:0 0 #0000;\n  --tw-ring-shadow:0 0 #0000;\n  --tw-shadow:0 0 #0000;\n  --tw-shadow-colored:0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n  --tw-contain-size: ;\n  --tw-contain-layout: ;\n  --tw-contain-paint: ;\n  --tw-contain-style: ;\n}\n\n::backdrop {\n  --tw-border-spacing-x:0;\n  --tw-border-spacing-y:0;\n  --tw-translate-x:0;\n  --tw-translate-y:0;\n  --tw-rotate:0;\n  --tw-skew-x:0;\n  --tw-skew-y:0;\n  --tw-scale-x:1;\n  --tw-scale-y:1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness:proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width:0px;\n  --tw-ring-offset-color:#fff;\n  --tw-ring-color:rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow:0 0 #0000;\n  --tw-ring-shadow:0 0 #0000;\n  --tw-shadow:0 0 #0000;\n  --tw-shadow-colored:0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n  --tw-contain-size: ;\n  --tw-contain-layout: ;\n  --tw-contain-paint: ;\n  --tw-contain-style: ;\n}\n\n/*\n! tailwindcss v3.4.15 | MIT License | https://tailwindcss.com\n*/\n\n/*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box;\n  /* 1 */\n  border-width: 0;\n  /* 2 */\n  border-style: solid;\n  /* 2 */\n  border-color: #e5e7eb;\n  /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n5. Use the user's configured `sans` font-feature-settings by default.\n6. Use the user's configured `sans` font-variation-settings by default.\n7. Disable tap highlights on iOS\n*/\n\nhtml,\n:host {\n  line-height: 1.5;\n  /* 1 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */\n  -moz-tab-size: 4;\n  /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4;\n  /* 3 */\n  font-family: ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  /* 4 */\n  font-feature-settings: normal;\n  /* 5 */\n  font-variation-settings: normal;\n  /* 6 */\n  -webkit-tap-highlight-color: transparent;\n  /* 7 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0;\n  /* 1 */\n  line-height: inherit;\n  /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0;\n  /* 1 */\n  color: inherit;\n  /* 2 */\n  border-top-width: 1px;\n  /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font-family by default.\n2. Use the user's configured `mono` font-feature-settings by default.\n3. Use the user's configured `mono` font-variation-settings by default.\n4. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n  /* 1 */\n  font-feature-settings: normal;\n  /* 2 */\n  font-variation-settings: normal;\n  /* 3 */\n  font-size: 1em;\n  /* 4 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0;\n  /* 1 */\n  border-color: inherit;\n  /* 2 */\n  border-collapse: collapse;\n  /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  /* 1 */\n  font-feature-settings: inherit;\n  /* 1 */\n  font-variation-settings: inherit;\n  /* 1 */\n  font-size: 100%;\n  /* 1 */\n  font-weight: inherit;\n  /* 1 */\n  line-height: inherit;\n  /* 1 */\n  letter-spacing: inherit;\n  /* 1 */\n  color: inherit;\n  /* 1 */\n  margin: 0;\n  /* 2 */\n  padding: 0;\n  /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\ninput:where([type='button']),\ninput:where([type='reset']),\ninput:where([type='submit']) {\n  -webkit-appearance: button;\n  /* 1 */\n  background-color: transparent;\n  /* 2 */\n  background-image: none;\n  /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  outline-offset: -2px;\n  /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nReset default styling for dialogs.\n*/\n\ndialog {\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block;\n  /* 1 */\n  vertical-align: middle;\n  /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n\n[hidden]:where(:not([hidden=\"until-found\"])) {\n  display: none;\n}\n\n.mx-auto {\n  margin-left:auto;\n  margin-right:auto;\n}\n\n.my-4 {\n  margin-top:1rem;\n  margin-bottom:1rem;\n}\n\n.mb-2 {\n  margin-bottom:0.5rem;\n}\n\n.mr-2 {\n  margin-right:0.5rem;\n}\n\n.mr-4 {\n  margin-right:1rem;\n}\n\n.mt-4 {\n  margin-top:1rem;\n}\n\n.mt-8 {\n  margin-top:2rem;\n}\n\n.inline-block {\n  display:inline-block;\n}\n\n.flex {\n  display:flex;\n}\n\n.table {\n  display:table;\n}\n\n.grid {\n  display:grid;\n}\n\n.h-64 {\n  height:16rem;\n}\n\n.h-8 {\n  height:2rem;\n}\n\n.h-full {\n  height:100%;\n}\n\n.h-screen {\n  height:100vh;\n}\n\n.w-16 {\n  width:4rem;\n}\n\n.w-3\\/4 {\n  width:75%;\n}\n\n.w-8 {\n  width:2rem;\n}\n\n.w-full {\n  width:100%;\n}\n\n.min-w-full {\n  min-width:100%;\n}\n\n.max-w-4xl {\n  max-width:56rem;\n}\n\n.max-w-md {\n  max-width:28rem;\n}\n\n.flex-grow {\n  flex-grow:1;\n}\n\n.list-inside {\n  list-style-position:inside;\n}\n\n.list-disc {\n  list-style-type:disc;\n}\n\n.grid-cols-2 {\n  grid-template-columns:repeat(2, minmax(0, 1fr));\n}\n\n.flex-row-reverse {\n  flex-direction:row-reverse;\n}\n\n.flex-col {\n  flex-direction:column;\n}\n\n.items-center {\n  align-items:center;\n}\n\n.justify-start {\n  justify-content:flex-start;\n}\n\n.justify-between {\n  justify-content:space-between;\n}\n\n.gap-4 {\n  gap:1rem;\n}\n\n.overflow-hidden {\n  overflow:hidden;\n}\n\n.overflow-y-auto {\n  overflow-y:auto;\n}\n\n.rounded-lg {\n  border-radius:0.5rem;\n}\n\n.rounded-md {\n  border-radius:0.375rem;\n}\n\n.border {\n  border-width:1px;\n}\n\n.border-t {\n  border-top-width:1px;\n}\n\n.border-gray-200 {\n  --tw-border-opacity:1;\n  border-color:rgb(229 231 235 / var(--tw-border-opacity, 1));\n}\n\n.border-gray-300 {\n  --tw-border-opacity:1;\n  border-color:rgb(209 213 219 / var(--tw-border-opacity, 1));\n}\n\n.bg-gray-100 {\n  --tw-bg-opacity:1;\n  background-color:rgb(243 244 246 / var(--tw-bg-opacity, 1));\n}\n\n.bg-gray-200 {\n  --tw-bg-opacity:1;\n  background-color:rgb(229 231 235 / var(--tw-bg-opacity, 1));\n}\n\n.bg-white {\n  --tw-bg-opacity:1;\n  background-color:rgb(255 255 255 / var(--tw-bg-opacity, 1));\n}\n\n.object-contain {\n  -o-object-fit:contain;\n     object-fit:contain;\n}\n\n.object-cover {\n  -o-object-fit:cover;\n     object-fit:cover;\n}\n\n.p-2 {\n  padding:0.5rem;\n}\n\n.p-4 {\n  padding:1rem;\n}\n\n.px-4 {\n  padding-left:1rem;\n  padding-right:1rem;\n}\n\n.py-2 {\n  padding-top:0.5rem;\n  padding-bottom:0.5rem;\n}\n\n.pb-4 {\n  padding-bottom:1rem;\n}\n\n.text-left {\n  text-align:left;\n}\n\n.text-center {\n  text-align:center;\n}\n\n.text-right {\n  text-align:right;\n}\n\n.text-2xl {\n  font-size:1.5rem;\n  line-height:2rem;\n}\n\n.text-4xl {\n  font-size:2.25rem;\n  line-height:2.5rem;\n}\n\n.text-lg {\n  font-size:1.125rem;\n  line-height:1.75rem;\n}\n\n.text-sm {\n  font-size:0.875rem;\n  line-height:1.25rem;\n}\n\n.font-bold {\n  font-weight:700;\n}\n\n.font-semibold {\n  font-weight:600;\n}\n\n.italic {\n  font-style:italic;\n}\n\n.leading-8 {\n  line-height:2rem;\n}\n\n.text-blue-600 {\n  --tw-text-opacity:1;\n  color:rgb(37 99 235 / var(--tw-text-opacity, 1));\n}\n\n.text-gray-600 {\n  --tw-text-opacity:1;\n  color:rgb(75 85 99 / var(--tw-text-opacity, 1));\n}\n\n.text-gray-700 {\n  --tw-text-opacity:1;\n  color:rgb(55 65 81 / var(--tw-text-opacity, 1));\n}\n\n.underline {\n  text-decoration-line:underline;\n}\n\n.shadow-lg {\n  --tw-shadow:0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}","",{version:3,sources:["webpack://./src/output.css"],names:[],mappings:"AAAA;EACE,iBAAiB;EACjB,cAAc;EACd,qBAAqB;AACvB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,2BAA2B;EAC3B,iBAAiB;EACjB,WAAW;EACX,2BAA2B;AAC7B;;AAEA;EACE,aAAa;EACb,8BAA8B;EAC9B,gBAAgB;EAChB,kBAAkB;EAClB,iBAAiB;EACjB,kBAAkB;EAClB,kBAAkB;EAClB,mBAAmB;EACnB,oBAAoB;AACtB;;AAEA;EACE,kBAAkB;EAClB,YAAY;EACZ,cAAc;AAChB;;AAEA;EACE,sBAAsB;EACtB,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,YAAY;EACZ,qBAAqB;EACrB,gBAAgB;AAClB;;AAEA;EACE,uBAAuB;EACvB,uBAAuB;EACvB,kBAAkB;EAClB,kBAAkB;EAClB,aAAa;EACb,aAAa;EACb,aAAa;EACb,cAAc;EACd,cAAc;EACd,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB,qCAAqC;EACrC,6BAA6B;EAC7B,4BAA4B;EAC5B,2BAA2B;EAC3B,cAAc;EACd,mBAAmB;EACnB,qBAAqB;EACrB,sBAAsB;EACtB,uBAAuB;EACvB,iBAAiB;EACjB,0BAA0B;EAC1B,2BAA2B;EAC3B,qCAAqC;EACrC,iCAAiC;EACjC,0BAA0B;EAC1B,qBAAqB;EACrB,6BAA6B;EAC7B,WAAW;EACX,iBAAiB;EACjB,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,oBAAoB;EACpB,0BAA0B;EAC1B,wBAAwB;EACxB,yBAAyB;EACzB,0BAA0B;EAC1B,sBAAsB;EACtB,uBAAuB;EACvB,wBAAwB;EACxB,qBAAqB;EACrB,mBAAmB;EACnB,qBAAqB;EACrB,oBAAoB;EACpB,oBAAoB;AACtB;;AAEA;EACE,uBAAuB;EACvB,uBAAuB;EACvB,kBAAkB;EAClB,kBAAkB;EAClB,aAAa;EACb,aAAa;EACb,aAAa;EACb,cAAc;EACd,cAAc;EACd,YAAY;EACZ,YAAY;EACZ,iBAAiB;EACjB,qCAAqC;EACrC,6BAA6B;EAC7B,4BAA4B;EAC5B,2BAA2B;EAC3B,cAAc;EACd,mBAAmB;EACnB,qBAAqB;EACrB,sBAAsB;EACtB,uBAAuB;EACvB,iBAAiB;EACjB,0BAA0B;EAC1B,2BAA2B;EAC3B,qCAAqC;EACrC,iCAAiC;EACjC,0BAA0B;EAC1B,qBAAqB;EACrB,6BAA6B;EAC7B,WAAW;EACX,iBAAiB;EACjB,eAAe;EACf,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,eAAe;EACf,YAAY;EACZ,kBAAkB;EAClB,oBAAoB;EACpB,0BAA0B;EAC1B,wBAAwB;EACxB,yBAAyB;EACzB,0BAA0B;EAC1B,sBAAsB;EACtB,uBAAuB;EACvB,wBAAwB;EACxB,qBAAqB;EACrB,mBAAmB;EACnB,qBAAqB;EACrB,oBAAoB;EACpB,oBAAoB;AACtB;;AAEA;;CAEC;;AAED;;;CAGC;;AAED;;;EAGE,sBAAsB;EACtB,MAAM;EACN,eAAe;EACf,MAAM;EACN,mBAAmB;EACnB,MAAM;EACN,qBAAqB;EACrB,MAAM;AACR;;AAEA;;EAEE,gBAAgB;AAClB;;AAEA;;;;;;;;CAQC;;AAED;;EAEE,gBAAgB;EAChB,MAAM;EACN,8BAA8B;EAC9B,MAAM;EACN,gBAAgB;EAChB,MAAM;EACN,cAAc;KACX,WAAW;EACd,MAAM;EACN,+HAA+H;EAC/H,MAAM;EACN,6BAA6B;EAC7B,MAAM;EACN,+BAA+B;EAC/B,MAAM;EACN,wCAAwC;EACxC,MAAM;AACR;;AAEA;;;CAGC;;AAED;EACE,SAAS;EACT,MAAM;EACN,oBAAoB;EACpB,MAAM;AACR;;AAEA;;;;CAIC;;AAED;EACE,SAAS;EACT,MAAM;EACN,cAAc;EACd,MAAM;EACN,qBAAqB;EACrB,MAAM;AACR;;AAEA;;CAEC;;AAED;EACE,yCAAyC;UACjC,iCAAiC;AAC3C;;AAEA;;CAEC;;AAED;;;;;;EAME,kBAAkB;EAClB,oBAAoB;AACtB;;AAEA;;CAEC;;AAED;EACE,cAAc;EACd,wBAAwB;AAC1B;;AAEA;;CAEC;;AAED;;EAEE,mBAAmB;AACrB;;AAEA;;;;;CAKC;;AAED;;;;EAIE,+GAA+G;EAC/G,MAAM;EACN,6BAA6B;EAC7B,MAAM;EACN,+BAA+B;EAC/B,MAAM;EACN,cAAc;EACd,MAAM;AACR;;AAEA;;CAEC;;AAED;EACE,cAAc;AAChB;;AAEA;;CAEC;;AAED;;EAEE,cAAc;EACd,cAAc;EACd,kBAAkB;EAClB,wBAAwB;AAC1B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;;;;CAIC;;AAED;EACE,cAAc;EACd,MAAM;EACN,qBAAqB;EACrB,MAAM;EACN,yBAAyB;EACzB,MAAM;AACR;;AAEA;;;;CAIC;;AAED;;;;;EAKE,oBAAoB;EACpB,MAAM;EACN,8BAA8B;EAC9B,MAAM;EACN,gCAAgC;EAChC,MAAM;EACN,eAAe;EACf,MAAM;EACN,oBAAoB;EACpB,MAAM;EACN,oBAAoB;EACpB,MAAM;EACN,uBAAuB;EACvB,MAAM;EACN,cAAc;EACd,MAAM;EACN,SAAS;EACT,MAAM;EACN,UAAU;EACV,MAAM;AACR;;AAEA;;CAEC;;AAED;;EAEE,oBAAoB;AACtB;;AAEA;;;CAGC;;AAED;;;;EAIE,0BAA0B;EAC1B,MAAM;EACN,6BAA6B;EAC7B,MAAM;EACN,sBAAsB;EACtB,MAAM;AACR;;AAEA;;CAEC;;AAED;EACE,aAAa;AACf;;AAEA;;CAEC;;AAED;EACE,gBAAgB;AAClB;;AAEA;;CAEC;;AAED;EACE,wBAAwB;AAC1B;;AAEA;;CAEC;;AAED;;EAEE,YAAY;AACd;;AAEA;;;CAGC;;AAED;EACE,6BAA6B;EAC7B,MAAM;EACN,oBAAoB;EACpB,MAAM;AACR;;AAEA;;CAEC;;AAED;EACE,wBAAwB;AAC1B;;AAEA;;;CAGC;;AAED;EACE,0BAA0B;EAC1B,MAAM;EACN,aAAa;EACb,MAAM;AACR;;AAEA;;CAEC;;AAED;EACE,kBAAkB;AACpB;;AAEA;;CAEC;;AAED;;;;;;;;;;;;;EAaE,SAAS;AACX;;AAEA;EACE,SAAS;EACT,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ;;AAEA;;;EAGE,gBAAgB;EAChB,SAAS;EACT,UAAU;AACZ;;AAEA;;CAEC;;AAED;EACE,UAAU;AACZ;;AAEA;;CAEC;;AAED;EACE,gBAAgB;AAClB;;AAEA;;;CAGC;;AAED;EACE,UAAU;EACV,MAAM;EACN,cAAc;EACd,MAAM;AACR;;AAEA;;EAEE,UAAU;EACV,MAAM;EACN,cAAc;EACd,MAAM;AACR;;AAEA;;CAEC;;AAED;;EAEE,eAAe;AACjB;;AAEA;;CAEC;;AAED;EACE,eAAe;AACjB;;AAEA;;;;CAIC;;AAED;;;;;;;;EAQE,cAAc;EACd,MAAM;EACN,sBAAsB;EACtB,MAAM;AACR;;AAEA;;CAEC;;AAED;;EAEE,eAAe;EACf,YAAY;AACd;;AAEA,wEAAwE;;AAExE;EACE,aAAa;AACf;;AAEA;EACE,gBAAgB;EAChB,iBAAiB;AACnB;;AAEA;EACE,eAAe;EACf,kBAAkB;AACpB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,aAAa;AACf;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,SAAS;AACX;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,UAAU;AACZ;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,+CAA+C;AACjD;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,kBAAkB;AACpB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,6BAA6B;AAC/B;;AAEA;EACE,QAAQ;AACV;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,qBAAqB;EACrB,2DAA2D;AAC7D;;AAEA;EACE,qBAAqB;EACrB,2DAA2D;AAC7D;;AAEA;EACE,iBAAiB;EACjB,2DAA2D;AAC7D;;AAEA;EACE,iBAAiB;EACjB,2DAA2D;AAC7D;;AAEA;EACE,iBAAiB;EACjB,2DAA2D;AAC7D;;AAEA;EACE,qBAAqB;KAClB,kBAAkB;AACvB;;AAEA;EACE,mBAAmB;KAChB,gBAAgB;AACrB;;AAEA;EACE,cAAc;AAChB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,qBAAqB;AACvB;;AAEA;EACE,mBAAmB;AACrB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;AAClB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,kBAAkB;EAClB,mBAAmB;AACrB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,gBAAgB;AAClB;;AAEA;EACE,mBAAmB;EACnB,gDAAgD;AAClD;;AAEA;EACE,mBAAmB;EACnB,+CAA+C;AACjD;;AAEA;EACE,mBAAmB;EACnB,+CAA+C;AACjD;;AAEA;EACE,8BAA8B;AAChC;;AAEA;EACE,8EAA8E;EAC9E,kGAAkG;EAClG,sGAAsG;AACxG",sourcesContent:[".message {\n  border-radius:5px;\n  padding: 0.5em;\n  display: inline-block;\n}\n\n.message.system {\n  background-color: gray;\n}\n\n.message.user {\n  background-color: lightblue;\n  margin-right: 2em;\n  width: auto;\n  flex-direction: row-reverse;\n}\n\n.input-form {\n  display: flex;\n  justify-content: space-between;\n  margin-top: 2rem;\n  margin-bottom:2rem;\n  border-width: 1px;\n  border-radius: 5px;\n  padding-left: 1rem;\n  padding-right: 1rem;\n  padding-bottom: 4rem;\n}\n\n.input-form input[type='text'] {\n  margin-right: 1rem;\n  flex-grow: 1;\n  line-height: 2;\n}\n\n.send-button {\n  background-color: gray;\n  border-radius: 5px;\n  padding: 0.5em 1em;\n}\n\n.person-card {\n  justify-content: start;\n  width: auto;\n}\n\n.main-div {\n  height:100vh;\n  flex-direction:column;\n  overflow-y: auto;\n}\n\n*, ::before, ::after {\n  --tw-border-spacing-x:0;\n  --tw-border-spacing-y:0;\n  --tw-translate-x:0;\n  --tw-translate-y:0;\n  --tw-rotate:0;\n  --tw-skew-x:0;\n  --tw-skew-y:0;\n  --tw-scale-x:1;\n  --tw-scale-y:1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness:proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width:0px;\n  --tw-ring-offset-color:#fff;\n  --tw-ring-color:rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow:0 0 #0000;\n  --tw-ring-shadow:0 0 #0000;\n  --tw-shadow:0 0 #0000;\n  --tw-shadow-colored:0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n  --tw-contain-size: ;\n  --tw-contain-layout: ;\n  --tw-contain-paint: ;\n  --tw-contain-style: ;\n}\n\n::backdrop {\n  --tw-border-spacing-x:0;\n  --tw-border-spacing-y:0;\n  --tw-translate-x:0;\n  --tw-translate-y:0;\n  --tw-rotate:0;\n  --tw-skew-x:0;\n  --tw-skew-y:0;\n  --tw-scale-x:1;\n  --tw-scale-y:1;\n  --tw-pan-x: ;\n  --tw-pan-y: ;\n  --tw-pinch-zoom: ;\n  --tw-scroll-snap-strictness:proximity;\n  --tw-gradient-from-position: ;\n  --tw-gradient-via-position: ;\n  --tw-gradient-to-position: ;\n  --tw-ordinal: ;\n  --tw-slashed-zero: ;\n  --tw-numeric-figure: ;\n  --tw-numeric-spacing: ;\n  --tw-numeric-fraction: ;\n  --tw-ring-inset: ;\n  --tw-ring-offset-width:0px;\n  --tw-ring-offset-color:#fff;\n  --tw-ring-color:rgb(59 130 246 / 0.5);\n  --tw-ring-offset-shadow:0 0 #0000;\n  --tw-ring-shadow:0 0 #0000;\n  --tw-shadow:0 0 #0000;\n  --tw-shadow-colored:0 0 #0000;\n  --tw-blur: ;\n  --tw-brightness: ;\n  --tw-contrast: ;\n  --tw-grayscale: ;\n  --tw-hue-rotate: ;\n  --tw-invert: ;\n  --tw-saturate: ;\n  --tw-sepia: ;\n  --tw-drop-shadow: ;\n  --tw-backdrop-blur: ;\n  --tw-backdrop-brightness: ;\n  --tw-backdrop-contrast: ;\n  --tw-backdrop-grayscale: ;\n  --tw-backdrop-hue-rotate: ;\n  --tw-backdrop-invert: ;\n  --tw-backdrop-opacity: ;\n  --tw-backdrop-saturate: ;\n  --tw-backdrop-sepia: ;\n  --tw-contain-size: ;\n  --tw-contain-layout: ;\n  --tw-contain-paint: ;\n  --tw-contain-style: ;\n}\n\n/*\n! tailwindcss v3.4.15 | MIT License | https://tailwindcss.com\n*/\n\n/*\n1. Prevent padding and border from affecting element width. (https://github.com/mozdevs/cssremedy/issues/4)\n2. Allow adding a border to an element by just adding a border-width. (https://github.com/tailwindcss/tailwindcss/pull/116)\n*/\n\n*,\n::before,\n::after {\n  box-sizing: border-box;\n  /* 1 */\n  border-width: 0;\n  /* 2 */\n  border-style: solid;\n  /* 2 */\n  border-color: #e5e7eb;\n  /* 2 */\n}\n\n::before,\n::after {\n  --tw-content: '';\n}\n\n/*\n1. Use a consistent sensible line-height in all browsers.\n2. Prevent adjustments of font size after orientation changes in iOS.\n3. Use a more readable tab size.\n4. Use the user's configured `sans` font-family by default.\n5. Use the user's configured `sans` font-feature-settings by default.\n6. Use the user's configured `sans` font-variation-settings by default.\n7. Disable tap highlights on iOS\n*/\n\nhtml,\n:host {\n  line-height: 1.5;\n  /* 1 */\n  -webkit-text-size-adjust: 100%;\n  /* 2 */\n  -moz-tab-size: 4;\n  /* 3 */\n  -o-tab-size: 4;\n     tab-size: 4;\n  /* 3 */\n  font-family: ui-sans-serif, system-ui, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\";\n  /* 4 */\n  font-feature-settings: normal;\n  /* 5 */\n  font-variation-settings: normal;\n  /* 6 */\n  -webkit-tap-highlight-color: transparent;\n  /* 7 */\n}\n\n/*\n1. Remove the margin in all browsers.\n2. Inherit line-height from `html` so users can set them as a class directly on the `html` element.\n*/\n\nbody {\n  margin: 0;\n  /* 1 */\n  line-height: inherit;\n  /* 2 */\n}\n\n/*\n1. Add the correct height in Firefox.\n2. Correct the inheritance of border color in Firefox. (https://bugzilla.mozilla.org/show_bug.cgi?id=190655)\n3. Ensure horizontal rules are visible by default.\n*/\n\nhr {\n  height: 0;\n  /* 1 */\n  color: inherit;\n  /* 2 */\n  border-top-width: 1px;\n  /* 3 */\n}\n\n/*\nAdd the correct text decoration in Chrome, Edge, and Safari.\n*/\n\nabbr:where([title]) {\n  -webkit-text-decoration: underline dotted;\n          text-decoration: underline dotted;\n}\n\n/*\nRemove the default font size and weight for headings.\n*/\n\nh1,\nh2,\nh3,\nh4,\nh5,\nh6 {\n  font-size: inherit;\n  font-weight: inherit;\n}\n\n/*\nReset links to optimize for opt-in styling instead of opt-out.\n*/\n\na {\n  color: inherit;\n  text-decoration: inherit;\n}\n\n/*\nAdd the correct font weight in Edge and Safari.\n*/\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/*\n1. Use the user's configured `mono` font-family by default.\n2. Use the user's configured `mono` font-feature-settings by default.\n3. Use the user's configured `mono` font-variation-settings by default.\n4. Correct the odd `em` font sizing in all browsers.\n*/\n\ncode,\nkbd,\nsamp,\npre {\n  font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, \"Liberation Mono\", \"Courier New\", monospace;\n  /* 1 */\n  font-feature-settings: normal;\n  /* 2 */\n  font-variation-settings: normal;\n  /* 3 */\n  font-size: 1em;\n  /* 4 */\n}\n\n/*\nAdd the correct font size in all browsers.\n*/\n\nsmall {\n  font-size: 80%;\n}\n\n/*\nPrevent `sub` and `sup` elements from affecting the line height in all browsers.\n*/\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/*\n1. Remove text indentation from table contents in Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=999088, https://bugs.webkit.org/show_bug.cgi?id=201297)\n2. Correct table border color inheritance in all Chrome and Safari. (https://bugs.chromium.org/p/chromium/issues/detail?id=935729, https://bugs.webkit.org/show_bug.cgi?id=195016)\n3. Remove gaps between table borders by default.\n*/\n\ntable {\n  text-indent: 0;\n  /* 1 */\n  border-color: inherit;\n  /* 2 */\n  border-collapse: collapse;\n  /* 3 */\n}\n\n/*\n1. Change the font styles in all browsers.\n2. Remove the margin in Firefox and Safari.\n3. Remove default padding in all browsers.\n*/\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit;\n  /* 1 */\n  font-feature-settings: inherit;\n  /* 1 */\n  font-variation-settings: inherit;\n  /* 1 */\n  font-size: 100%;\n  /* 1 */\n  font-weight: inherit;\n  /* 1 */\n  line-height: inherit;\n  /* 1 */\n  letter-spacing: inherit;\n  /* 1 */\n  color: inherit;\n  /* 1 */\n  margin: 0;\n  /* 2 */\n  padding: 0;\n  /* 3 */\n}\n\n/*\nRemove the inheritance of text transform in Edge and Firefox.\n*/\n\nbutton,\nselect {\n  text-transform: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Remove default button styles.\n*/\n\nbutton,\ninput:where([type='button']),\ninput:where([type='reset']),\ninput:where([type='submit']) {\n  -webkit-appearance: button;\n  /* 1 */\n  background-color: transparent;\n  /* 2 */\n  background-image: none;\n  /* 2 */\n}\n\n/*\nUse the modern Firefox focus style for all focusable elements.\n*/\n\n:-moz-focusring {\n  outline: auto;\n}\n\n/*\nRemove the additional `:invalid` styles in Firefox. (https://github.com/mozilla/gecko-dev/blob/2f9eacd9d3d995c937b4251a5557d95d494c9be1/layout/style/res/forms.css#L728-L737)\n*/\n\n:-moz-ui-invalid {\n  box-shadow: none;\n}\n\n/*\nAdd the correct vertical alignment in Chrome and Firefox.\n*/\n\nprogress {\n  vertical-align: baseline;\n}\n\n/*\nCorrect the cursor style of increment and decrement buttons in Safari.\n*/\n\n::-webkit-inner-spin-button,\n::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/*\n1. Correct the odd appearance in Chrome and Safari.\n2. Correct the outline style in Safari.\n*/\n\n[type='search'] {\n  -webkit-appearance: textfield;\n  /* 1 */\n  outline-offset: -2px;\n  /* 2 */\n}\n\n/*\nRemove the inner padding in Chrome and Safari on macOS.\n*/\n\n::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/*\n1. Correct the inability to style clickable types in iOS and Safari.\n2. Change font properties to `inherit` in Safari.\n*/\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button;\n  /* 1 */\n  font: inherit;\n  /* 2 */\n}\n\n/*\nAdd the correct display in Chrome and Safari.\n*/\n\nsummary {\n  display: list-item;\n}\n\n/*\nRemoves the default spacing and border for appropriate elements.\n*/\n\nblockquote,\ndl,\ndd,\nh1,\nh2,\nh3,\nh4,\nh5,\nh6,\nhr,\nfigure,\np,\npre {\n  margin: 0;\n}\n\nfieldset {\n  margin: 0;\n  padding: 0;\n}\n\nlegend {\n  padding: 0;\n}\n\nol,\nul,\nmenu {\n  list-style: none;\n  margin: 0;\n  padding: 0;\n}\n\n/*\nReset default styling for dialogs.\n*/\n\ndialog {\n  padding: 0;\n}\n\n/*\nPrevent resizing textareas horizontally by default.\n*/\n\ntextarea {\n  resize: vertical;\n}\n\n/*\n1. Reset the default placeholder opacity in Firefox. (https://github.com/tailwindlabs/tailwindcss/issues/3300)\n2. Set the default placeholder color to the user's configured gray 400 color.\n*/\n\ninput::-moz-placeholder, textarea::-moz-placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\ninput::placeholder,\ntextarea::placeholder {\n  opacity: 1;\n  /* 1 */\n  color: #9ca3af;\n  /* 2 */\n}\n\n/*\nSet the default cursor for buttons.\n*/\n\nbutton,\n[role=\"button\"] {\n  cursor: pointer;\n}\n\n/*\nMake sure disabled buttons don't get the pointer cursor.\n*/\n\n:disabled {\n  cursor: default;\n}\n\n/*\n1. Make replaced elements `display: block` by default. (https://github.com/mozdevs/cssremedy/issues/14)\n2. Add `vertical-align: middle` to align replaced elements more sensibly by default. (https://github.com/jensimmons/cssremedy/issues/14#issuecomment-634934210)\n   This can trigger a poorly considered lint error in some tools but is included by design.\n*/\n\nimg,\nsvg,\nvideo,\ncanvas,\naudio,\niframe,\nembed,\nobject {\n  display: block;\n  /* 1 */\n  vertical-align: middle;\n  /* 2 */\n}\n\n/*\nConstrain images and videos to the parent width and preserve their intrinsic aspect ratio. (https://github.com/mozdevs/cssremedy/issues/14)\n*/\n\nimg,\nvideo {\n  max-width: 100%;\n  height: auto;\n}\n\n/* Make elements with the HTML hidden attribute stay hidden by default */\n\n[hidden]:where(:not([hidden=\"until-found\"])) {\n  display: none;\n}\n\n.mx-auto {\n  margin-left:auto;\n  margin-right:auto;\n}\n\n.my-4 {\n  margin-top:1rem;\n  margin-bottom:1rem;\n}\n\n.mb-2 {\n  margin-bottom:0.5rem;\n}\n\n.mr-2 {\n  margin-right:0.5rem;\n}\n\n.mr-4 {\n  margin-right:1rem;\n}\n\n.mt-4 {\n  margin-top:1rem;\n}\n\n.mt-8 {\n  margin-top:2rem;\n}\n\n.inline-block {\n  display:inline-block;\n}\n\n.flex {\n  display:flex;\n}\n\n.table {\n  display:table;\n}\n\n.grid {\n  display:grid;\n}\n\n.h-64 {\n  height:16rem;\n}\n\n.h-8 {\n  height:2rem;\n}\n\n.h-full {\n  height:100%;\n}\n\n.h-screen {\n  height:100vh;\n}\n\n.w-16 {\n  width:4rem;\n}\n\n.w-3\\/4 {\n  width:75%;\n}\n\n.w-8 {\n  width:2rem;\n}\n\n.w-full {\n  width:100%;\n}\n\n.min-w-full {\n  min-width:100%;\n}\n\n.max-w-4xl {\n  max-width:56rem;\n}\n\n.max-w-md {\n  max-width:28rem;\n}\n\n.flex-grow {\n  flex-grow:1;\n}\n\n.list-inside {\n  list-style-position:inside;\n}\n\n.list-disc {\n  list-style-type:disc;\n}\n\n.grid-cols-2 {\n  grid-template-columns:repeat(2, minmax(0, 1fr));\n}\n\n.flex-row-reverse {\n  flex-direction:row-reverse;\n}\n\n.flex-col {\n  flex-direction:column;\n}\n\n.items-center {\n  align-items:center;\n}\n\n.justify-start {\n  justify-content:flex-start;\n}\n\n.justify-between {\n  justify-content:space-between;\n}\n\n.gap-4 {\n  gap:1rem;\n}\n\n.overflow-hidden {\n  overflow:hidden;\n}\n\n.overflow-y-auto {\n  overflow-y:auto;\n}\n\n.rounded-lg {\n  border-radius:0.5rem;\n}\n\n.rounded-md {\n  border-radius:0.375rem;\n}\n\n.border {\n  border-width:1px;\n}\n\n.border-t {\n  border-top-width:1px;\n}\n\n.border-gray-200 {\n  --tw-border-opacity:1;\n  border-color:rgb(229 231 235 / var(--tw-border-opacity, 1));\n}\n\n.border-gray-300 {\n  --tw-border-opacity:1;\n  border-color:rgb(209 213 219 / var(--tw-border-opacity, 1));\n}\n\n.bg-gray-100 {\n  --tw-bg-opacity:1;\n  background-color:rgb(243 244 246 / var(--tw-bg-opacity, 1));\n}\n\n.bg-gray-200 {\n  --tw-bg-opacity:1;\n  background-color:rgb(229 231 235 / var(--tw-bg-opacity, 1));\n}\n\n.bg-white {\n  --tw-bg-opacity:1;\n  background-color:rgb(255 255 255 / var(--tw-bg-opacity, 1));\n}\n\n.object-contain {\n  -o-object-fit:contain;\n     object-fit:contain;\n}\n\n.object-cover {\n  -o-object-fit:cover;\n     object-fit:cover;\n}\n\n.p-2 {\n  padding:0.5rem;\n}\n\n.p-4 {\n  padding:1rem;\n}\n\n.px-4 {\n  padding-left:1rem;\n  padding-right:1rem;\n}\n\n.py-2 {\n  padding-top:0.5rem;\n  padding-bottom:0.5rem;\n}\n\n.pb-4 {\n  padding-bottom:1rem;\n}\n\n.text-left {\n  text-align:left;\n}\n\n.text-center {\n  text-align:center;\n}\n\n.text-right {\n  text-align:right;\n}\n\n.text-2xl {\n  font-size:1.5rem;\n  line-height:2rem;\n}\n\n.text-4xl {\n  font-size:2.25rem;\n  line-height:2.5rem;\n}\n\n.text-lg {\n  font-size:1.125rem;\n  line-height:1.75rem;\n}\n\n.text-sm {\n  font-size:0.875rem;\n  line-height:1.25rem;\n}\n\n.font-bold {\n  font-weight:700;\n}\n\n.font-semibold {\n  font-weight:600;\n}\n\n.italic {\n  font-style:italic;\n}\n\n.leading-8 {\n  line-height:2rem;\n}\n\n.text-blue-600 {\n  --tw-text-opacity:1;\n  color:rgb(37 99 235 / var(--tw-text-opacity, 1));\n}\n\n.text-gray-600 {\n  --tw-text-opacity:1;\n  color:rgb(75 85 99 / var(--tw-text-opacity, 1));\n}\n\n.text-gray-700 {\n  --tw-text-opacity:1;\n  color:rgb(55 65 81 / var(--tw-text-opacity, 1));\n}\n\n.underline {\n  text-decoration-line:underline;\n}\n\n.shadow-lg {\n  --tw-shadow:0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);\n  --tw-shadow-colored:0 10px 15px -3px var(--tw-shadow-color), 0 4px 6px -4px var(--tw-shadow-color);\n  box-shadow:var(--tw-ring-offset-shadow, 0 0 #0000), var(--tw-ring-shadow, 0 0 #0000), var(--tw-shadow);\n}"],sourceRoot:""}]);const s=o},6314:e=>{"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,i,a){"string"==typeof e&&(e=[[null,e,void 0]]);var o={};if(r)for(var s=0;s<this.length;s++){var l=this[s][0];null!=l&&(o[l]=!0)}for(var c=0;c<e.length;c++){var u=[].concat(e[c]);r&&o[u[0]]||(void 0!==a&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=a),n&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=n):u[2]=n),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),t.push(u))}},t}},1354:e=>{"use strict";e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(i," */");return[t].concat([a]).join("\n")}return[t].join("\n")}},2551:(e,t,n)=>{"use strict";var r=n(6540),i=n(9982);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var o=new Set,s={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(s[e]=t,e=0;e<t.length;e++)o.add(t[e])}var u=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h={},p={};function g(e,t,n,r,i,a,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=a,this.removeEmptyString=o}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new g(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new g(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new g(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new g(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new g(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new g(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new g(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new g(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new g(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function v(e,t,n,r){var i=m.hasOwnProperty(t)?m[t]:null;(null!==i?0!==i.type:r||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!d.call(p,e)||!d.call(h,e)&&(f.test(e)?p[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,y);m[t]=new g(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,y);m[t]=new g(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,y);m[t]=new g(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new g("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new g(e,1,!1,e.toLowerCase(),null,!0,!0)}));var x=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,w=Symbol.for("react.element"),A=Symbol.for("react.portal"),_=Symbol.for("react.fragment"),k=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),M=Symbol.for("react.provider"),O=Symbol.for("react.context"),C=Symbol.for("react.forward_ref"),S=Symbol.for("react.suspense"),P=Symbol.for("react.suspense_list"),D=Symbol.for("react.memo"),j=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var T=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var B=Symbol.iterator;function N(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=B&&e[B]||e["@@iterator"])?e:null}var I,L=Object.assign;function z(e){if(void 0===I)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);I=t&&t[1]||""}return"\n"+I+e}var F=!1;function R(e,t){if(!e||F)return"";F=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(t){if(t&&r&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),a=r.stack.split("\n"),o=i.length-1,s=a.length-1;1<=o&&0<=s&&i[o]!==a[s];)s--;for(;1<=o&&0<=s;o--,s--)if(i[o]!==a[s]){if(1!==o||1!==s)do{if(o--,0>--s||i[o]!==a[s]){var l="\n"+i[o].replace(" at new "," at ");return e.displayName&&l.includes("<anonymous>")&&(l=l.replace("<anonymous>",e.displayName)),l}}while(1<=o&&0<=s);break}}}finally{F=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?z(e):""}function W(e){switch(e.tag){case 5:return z(e.type);case 16:return z("Lazy");case 13:return z("Suspense");case 19:return z("SuspenseList");case 0:case 2:case 15:return R(e.type,!1);case 11:return R(e.type.render,!1);case 1:return R(e.type,!0);default:return""}}function H(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case _:return"Fragment";case A:return"Portal";case E:return"Profiler";case k:return"StrictMode";case S:return"Suspense";case P:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case M:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case D:return null!==(t=e.displayName||null)?t:H(e.type)||"Memo";case j:t=e._payload,e=e._init;try{return H(e(t))}catch(e){}}return null}function Y(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return H(t);case 8:return t===k?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function V(e){switch(typeof e){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function U(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function $(e){e._valueTracker||(e._valueTracker=function(e){var t=U(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,a=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,a.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=U(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return L({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function X(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=V(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function G(e,t){null!=(t=t.checked)&&v(e,"checked",t,!1)}function K(e,t){G(e,t);var n=V(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ee(e,t.type,n):t.hasOwnProperty("defaultValue")&&ee(e,t.type,V(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function J(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ee(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var te=Array.isArray;function ne(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+V(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function re(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return L({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(te(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:V(n)}}function ae(e,t){var n=V(t.value),r=V(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function oe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function se(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function le(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?se(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,ue,de=(ue=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ue(e,t)}))}:ue);function fe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var he={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},pe=["Webkit","ms","Moz","O"];function ge(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||he.hasOwnProperty(e)&&he[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=ge(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(he).forEach((function(e){pe.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),he[t]=he[e]}))}));var be=L({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function ye(e,t){if(t){if(be[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function ve(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var xe=null;function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ae=null,_e=null,ke=null;function Ee(e){if(e=vi(e)){if("function"!=typeof Ae)throw Error(a(280));var t=e.stateNode;t&&(t=wi(t),Ae(e.stateNode,e.type,t))}}function Me(e){_e?ke?ke.push(e):ke=[e]:_e=e}function Oe(){if(_e){var e=_e,t=ke;if(ke=_e=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Ce(e,t){return e(t)}function Se(){}var Pe=!1;function De(e,t,n){if(Pe)return e(t,n);Pe=!0;try{return Ce(e,t,n)}finally{Pe=!1,(null!==_e||null!==ke)&&(Se(),Oe())}}function je(e,t){var n=e.stateNode;if(null===n)return null;var r=wi(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Te=!1;if(u)try{var Be={};Object.defineProperty(Be,"passive",{get:function(){Te=!0}}),window.addEventListener("test",Be,Be),window.removeEventListener("test",Be,Be)}catch(ue){Te=!1}function Ne(e,t,n,r,i,a,o,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var Ie=!1,Le=null,ze=!1,Fe=null,Re={onError:function(e){Ie=!0,Le=e}};function We(e,t,n,r,i,a,o,s,l){Ie=!1,Le=null,Ne.apply(Re,arguments)}function He(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ye(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ve(e){if(He(e)!==e)throw Error(a(188))}function Ue(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=He(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Ve(i),e;if(o===r)return Ve(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?$e(e):null}function $e(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=$e(e);if(null!==t)return t;e=e.sibling}return null}var qe=i.unstable_scheduleCallback,Qe=i.unstable_cancelCallback,Ze=i.unstable_shouldYield,Xe=i.unstable_requestPaint,Ge=i.unstable_now,Ke=i.unstable_getCurrentPriorityLevel,Je=i.unstable_ImmediatePriority,et=i.unstable_UserBlockingPriority,tt=i.unstable_NormalPriority,nt=i.unstable_LowPriority,rt=i.unstable_IdlePriority,it=null,at=null,ot=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(st(e)/lt|0)|0},st=Math.log,lt=Math.LN2,ct=64,ut=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function ft(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,i=e.suspendedLanes,a=e.pingedLanes,o=268435455&n;if(0!==o){var s=o&~i;0!==s?r=dt(s):0!=(a&=o)&&(r=dt(a))}else 0!=(o=n&~i)?r=dt(o):0!==a&&(r=dt(a));if(0===r)return 0;if(0!==t&&t!==r&&!(t&i)&&((i=r&-r)>=(a=t&-t)||16===i&&4194240&a))return t;if(4&r&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-ot(t)),r|=e[n],t&=~i;return r}function ht(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function pt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function gt(){var e=ct;return!(4194240&(ct<<=1))&&(ct=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function bt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-ot(t)]=n}function yt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-ot(n),i=1<<r;i&t|e[r]&t&&(e[r]|=t),n&=~i}}var vt=0;function xt(e){return 1<(e&=-e)?4<e?268435455&e?16:536870912:4:1}var wt,At,_t,kt,Et,Mt=!1,Ot=[],Ct=null,St=null,Pt=null,Dt=new Map,jt=new Map,Tt=[],Bt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function Nt(e,t){switch(e){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":St=null;break;case"mouseover":case"mouseout":Pt=null;break;case"pointerover":case"pointerout":Dt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":jt.delete(t.pointerId)}}function It(e,t,n,r,i,a){return null===e||e.nativeEvent!==a?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:a,targetContainers:[i]},null!==t&&null!==(t=vi(t))&&At(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function Lt(e){var t=yi(e.target);if(null!==t){var n=He(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ye(n)))return e.blockedOn=t,void Et(e.priority,(function(){_t(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function zt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=vi(n))&&At(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);xe=r,n.target.dispatchEvent(r),xe=null,t.shift()}return!0}function Ft(e,t,n){zt(e)&&n.delete(t)}function Rt(){Mt=!1,null!==Ct&&zt(Ct)&&(Ct=null),null!==St&&zt(St)&&(St=null),null!==Pt&&zt(Pt)&&(Pt=null),Dt.forEach(Ft),jt.forEach(Ft)}function Wt(e,t){e.blockedOn===t&&(e.blockedOn=null,Mt||(Mt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Rt)))}function Ht(e){function t(t){return Wt(t,e)}if(0<Ot.length){Wt(Ot[0],e);for(var n=1;n<Ot.length;n++){var r=Ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ct&&Wt(Ct,e),null!==St&&Wt(St,e),null!==Pt&&Wt(Pt,e),Dt.forEach(t),jt.forEach(t),n=0;n<Tt.length;n++)(r=Tt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Tt.length&&null===(n=Tt[0]).blockedOn;)Lt(n),null===n.blockedOn&&Tt.shift()}var Yt=x.ReactCurrentBatchConfig,Vt=!0;function Ut(e,t,n,r){var i=vt,a=Yt.transition;Yt.transition=null;try{vt=1,qt(e,t,n,r)}finally{vt=i,Yt.transition=a}}function $t(e,t,n,r){var i=vt,a=Yt.transition;Yt.transition=null;try{vt=4,qt(e,t,n,r)}finally{vt=i,Yt.transition=a}}function qt(e,t,n,r){if(Vt){var i=Zt(e,t,n,r);if(null===i)Vr(e,t,r,Qt,n),Nt(e,r);else if(function(e,t,n,r,i){switch(t){case"focusin":return Ct=It(Ct,e,t,n,r,i),!0;case"dragenter":return St=It(St,e,t,n,r,i),!0;case"mouseover":return Pt=It(Pt,e,t,n,r,i),!0;case"pointerover":var a=i.pointerId;return Dt.set(a,It(Dt.get(a)||null,e,t,n,r,i)),!0;case"gotpointercapture":return a=i.pointerId,jt.set(a,It(jt.get(a)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r))r.stopPropagation();else if(Nt(e,r),4&t&&-1<Bt.indexOf(e)){for(;null!==i;){var a=vi(i);if(null!==a&&wt(a),null===(a=Zt(e,t,n,r))&&Vr(e,t,r,Qt,n),a===i)break;i=a}null!==i&&r.stopPropagation()}else Vr(e,t,r,null,n)}}var Qt=null;function Zt(e,t,n,r){if(Qt=null,null!==(e=yi(e=we(r))))if(null===(t=He(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=Ye(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Xt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ke()){case Je:return 1;case et:return 4;case tt:case nt:return 16;case rt:return 536870912;default:return 16}default:return 16}}var Gt=null,Kt=null,Jt=null;function en(){if(Jt)return Jt;var e,t,n=Kt,r=n.length,i="value"in Gt?Gt.value:Gt.textContent,a=i.length;for(e=0;e<r&&n[e]===i[e];e++);var o=r-e;for(t=1;t<=o&&n[r-t]===i[a-t];t++);return Jt=i.slice(e,1<t?1-t:void 0)}function tn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function nn(){return!0}function rn(){return!1}function an(e){function t(t,n,r,i,a){for(var o in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=a,this.currentTarget=null,e)e.hasOwnProperty(o)&&(t=e[o],this[o]=t?t(i):i[o]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?nn:rn,this.isPropagationStopped=rn,this}return L(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=nn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=nn)},persist:function(){},isPersistent:nn}),t}var on,sn,ln,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},un=an(cn),dn=L({},cn,{view:0,detail:0}),fn=an(dn),hn=L({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(on=e.screenX-ln.screenX,sn=e.screenY-ln.screenY):sn=on=0,ln=e),on)},movementY:function(e){return"movementY"in e?e.movementY:sn}}),pn=an(hn),gn=an(L({},hn,{dataTransfer:0})),mn=an(L({},dn,{relatedTarget:0})),bn=an(L({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),yn=L({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),vn=an(yn),xn=an(L({},cn,{data:0})),wn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},An={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},_n={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function kn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=_n[e])&&!!t[e]}function En(){return kn}var Mn=L({},dn,{key:function(e){if(e.key){var t=wn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=tn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?An[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?tn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?tn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),On=an(Mn),Cn=an(L({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Sn=an(L({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Pn=an(L({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Dn=L({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),jn=an(Dn),Tn=[9,13,27,32],Bn=u&&"CompositionEvent"in window,Nn=null;u&&"documentMode"in document&&(Nn=document.documentMode);var In=u&&"TextEvent"in window&&!Nn,Ln=u&&(!Bn||Nn&&8<Nn&&11>=Nn),zn=String.fromCharCode(32),Fn=!1;function Rn(e,t){switch(e){case"keyup":return-1!==Tn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Wn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Hn=!1,Yn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Yn[e.type]:"textarea"===t}function Un(e,t,n,r){Me(r),0<(t=$r(t,"onChange")).length&&(n=new un("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var $n=null,qn=null;function Qn(e){zr(e,0)}function Zn(e){if(q(xi(e)))return e}function Xn(e,t){if("change"===e)return t}var Gn=!1;if(u){var Kn;if(u){var Jn="oninput"in document;if(!Jn){var er=document.createElement("div");er.setAttribute("oninput","return;"),Jn="function"==typeof er.oninput}Kn=Jn}else Kn=!1;Gn=Kn&&(!document.documentMode||9<document.documentMode)}function tr(){$n&&($n.detachEvent("onpropertychange",nr),qn=$n=null)}function nr(e){if("value"===e.propertyName&&Zn(qn)){var t=[];Un(t,qn,e,we(e)),De(Qn,t)}}function rr(e,t,n){"focusin"===e?(tr(),qn=n,($n=t).attachEvent("onpropertychange",nr)):"focusout"===e&&tr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Zn(qn)}function ar(e,t){if("click"===e)return Zn(t)}function or(e,t){if("input"===e||"change"===e)return Zn(t)}var sr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function lr(e,t){if(sr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++){var i=n[r];if(!d.call(t,i)||!sr(e[i],t[i]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function ur(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function fr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function pr(e){var t=fr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&hr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var i=n.textContent.length,a=Math.min(r.start,i);r=void 0===r.end?a:Math.min(r.end,i),!e.extend&&a>r&&(i=r,r=a,a=i),i=ur(n,a);var o=ur(n,r);i&&o&&(1!==e.rangeCount||e.anchorNode!==i.node||e.anchorOffset!==i.offset||e.focusNode!==o.node||e.focusOffset!==o.offset)&&((t=t.createRange()).setStart(i.node,i.offset),e.removeAllRanges(),a>r?(e.addRange(t),e.extend(o.node,o.offset)):(t.setEnd(o.node,o.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var gr=u&&"documentMode"in document&&11>=document.documentMode,mr=null,br=null,yr=null,vr=!1;function xr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;vr||null==mr||mr!==Q(r)||(r="selectionStart"in(r=mr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},yr&&lr(yr,r)||(yr=r,0<(r=$r(br,"onSelect")).length&&(t=new un("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function wr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ar={animationend:wr("Animation","AnimationEnd"),animationiteration:wr("Animation","AnimationIteration"),animationstart:wr("Animation","AnimationStart"),transitionend:wr("Transition","TransitionEnd")},_r={},kr={};function Er(e){if(_r[e])return _r[e];if(!Ar[e])return e;var t,n=Ar[e];for(t in n)if(n.hasOwnProperty(t)&&t in kr)return _r[e]=n[t];return e}u&&(kr=document.createElement("div").style,"AnimationEvent"in window||(delete Ar.animationend.animation,delete Ar.animationiteration.animation,delete Ar.animationstart.animation),"TransitionEvent"in window||delete Ar.transitionend.transition);var Mr=Er("animationend"),Or=Er("animationiteration"),Cr=Er("animationstart"),Sr=Er("transitionend"),Pr=new Map,Dr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function jr(e,t){Pr.set(e,t),l(t,[e])}for(var Tr=0;Tr<Dr.length;Tr++){var Br=Dr[Tr];jr(Br.toLowerCase(),"on"+(Br[0].toUpperCase()+Br.slice(1)))}jr(Mr,"onAnimationEnd"),jr(Or,"onAnimationIteration"),jr(Cr,"onAnimationStart"),jr("dblclick","onDoubleClick"),jr("focusin","onFocus"),jr("focusout","onBlur"),jr(Sr,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Nr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Ir=new Set("cancel close invalid load scroll toggle".split(" ").concat(Nr));function Lr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,o,s,l,c){if(We.apply(this,arguments),Ie){if(!Ie)throw Error(a(198));var u=Le;Ie=!1,Le=null,ze||(ze=!0,Fe=u)}}(r,t,void 0,e),e.currentTarget=null}function zr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var a=void 0;if(t)for(var o=r.length-1;0<=o;o--){var s=r[o],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==a&&i.isPropagationStopped())break e;Lr(i,s,c),a=l}else for(o=0;o<r.length;o++){if(l=(s=r[o]).instance,c=s.currentTarget,s=s.listener,l!==a&&i.isPropagationStopped())break e;Lr(i,s,c),a=l}}}if(ze)throw e=Fe,ze=!1,Fe=null,e}function Fr(e,t){var n=t[gi];void 0===n&&(n=t[gi]=new Set);var r=e+"__bubble";n.has(r)||(Yr(t,e,2,!1),n.add(r))}function Rr(e,t,n){var r=0;t&&(r|=4),Yr(n,e,r,t)}var Wr="_reactListening"+Math.random().toString(36).slice(2);function Hr(e){if(!e[Wr]){e[Wr]=!0,o.forEach((function(t){"selectionchange"!==t&&(Ir.has(t)||Rr(t,!1,e),Rr(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Wr]||(t[Wr]=!0,Rr("selectionchange",!1,t))}}function Yr(e,t,n,r){switch(Xt(t)){case 1:var i=Ut;break;case 4:i=$t;break;default:i=qt}n=i.bind(null,t,n,e),i=void 0,!Te||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Vr(e,t,n,r,i){var a=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var o=r.tag;if(3===o||4===o){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===o)for(o=r.return;null!==o;){var l=o.tag;if((3===l||4===l)&&((l=o.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;o=o.return}for(;null!==s;){if(null===(o=yi(s)))return;if(5===(l=o.tag)||6===l){r=a=o;continue e}s=s.parentNode}}r=r.return}De((function(){var r=a,i=we(n),o=[];e:{var s=Pr.get(e);if(void 0!==s){var l=un,c=e;switch(e){case"keypress":if(0===tn(n))break e;case"keydown":case"keyup":l=On;break;case"focusin":c="focus",l=mn;break;case"focusout":c="blur",l=mn;break;case"beforeblur":case"afterblur":l=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=pn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=gn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Sn;break;case Mr:case Or:case Cr:l=bn;break;case Sr:l=Pn;break;case"scroll":l=fn;break;case"wheel":l=jn;break;case"copy":case"cut":case"paste":l=vn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Cn}var u=!!(4&t),d=!u&&"scroll"===e,f=u?null!==s?s+"Capture":null:s;u=[];for(var h,p=r;null!==p;){var g=(h=p).stateNode;if(5===h.tag&&null!==g&&(h=g,null!==f&&null!=(g=je(p,f))&&u.push(Ur(p,g,h))),d)break;p=p.return}0<u.length&&(s=new l(s,c,null,n,i),o.push({event:s,listeners:u}))}}if(!(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||n===xe||!(c=n.relatedTarget||n.fromElement)||!yi(c)&&!c[pi])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?yi(c):null)&&(c!==(d=He(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=pn,g="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=Cn,g="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==l?s:xi(l),h=null==c?s:xi(c),(s=new u(g,p+"leave",l,n,i)).target=d,s.relatedTarget=h,g=null,yi(i)===r&&((u=new u(f,p+"enter",c,n,i)).target=h,u.relatedTarget=d,g=u),d=g,l&&c)e:{for(f=c,p=0,h=u=l;h;h=qr(h))p++;for(h=0,g=f;g;g=qr(g))h++;for(;0<p-h;)u=qr(u),p--;for(;0<h-p;)f=qr(f),h--;for(;p--;){if(u===f||null!==f&&u===f.alternate)break e;u=qr(u),f=qr(f)}u=null}else u=null;null!==l&&Qr(o,s,l,u,!1),null!==c&&null!==d&&Qr(o,d,c,u,!0)}if("select"===(l=(s=r?xi(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Xn;else if(Vn(s))if(Gn)m=or;else{m=ir;var b=rr}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=ar);switch(m&&(m=m(e,r))?Un(o,m,n,i):(b&&b(e,s,r),"focusout"===e&&(b=s._wrapperState)&&b.controlled&&"number"===s.type&&ee(s,"number",s.value)),b=r?xi(r):window,e){case"focusin":(Vn(b)||"true"===b.contentEditable)&&(mr=b,br=r,yr=null);break;case"focusout":yr=br=mr=null;break;case"mousedown":vr=!0;break;case"contextmenu":case"mouseup":case"dragend":vr=!1,xr(o,n,i);break;case"selectionchange":if(gr)break;case"keydown":case"keyup":xr(o,n,i)}var y;if(Bn)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else Hn?Rn(e,n)&&(v="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(v="onCompositionStart");v&&(Ln&&"ko"!==n.locale&&(Hn||"onCompositionStart"!==v?"onCompositionEnd"===v&&Hn&&(y=en()):(Kt="value"in(Gt=i)?Gt.value:Gt.textContent,Hn=!0)),0<(b=$r(r,v)).length&&(v=new xn(v,e,null,n,i),o.push({event:v,listeners:b}),(y||null!==(y=Wn(n)))&&(v.data=y))),(y=In?function(e,t){switch(e){case"compositionend":return Wn(t);case"keypress":return 32!==t.which?null:(Fn=!0,zn);case"textInput":return(e=t.data)===zn&&Fn?null:e;default:return null}}(e,n):function(e,t){if(Hn)return"compositionend"===e||!Bn&&Rn(e,t)?(e=en(),Jt=Kt=Gt=null,Hn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Ln&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=$r(r,"onBeforeInput")).length&&(i=new xn("onBeforeInput","beforeinput",null,n,i),o.push({event:i,listeners:r}),i.data=y)}zr(o,t)}))}function Ur(e,t,n){return{instance:e,listener:t,currentTarget:n}}function $r(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,a=i.stateNode;5===i.tag&&null!==a&&(i=a,null!=(a=je(e,n))&&r.unshift(Ur(e,a,i)),null!=(a=je(e,t))&&r.push(Ur(e,a,i))),e=e.return}return r}function qr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,i){for(var a=t._reactName,o=[];null!==n&&n!==r;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,i?null!=(l=je(n,a))&&o.unshift(Ur(n,l,s)):i||null!=(l=je(n,a))&&o.push(Ur(n,l,s))),n=n.return}0!==o.length&&e.push({event:t,listeners:o})}var Zr=/\r\n?/g,Xr=/\u0000|\uFFFD/g;function Gr(e){return("string"==typeof e?e:""+e).replace(Zr,"\n").replace(Xr,"")}function Kr(e,t,n){if(t=Gr(t),Gr(e)!==t&&n)throw Error(a(425))}function Jr(){}var ei=null,ti=null;function ni(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var ri="function"==typeof setTimeout?setTimeout:void 0,ii="function"==typeof clearTimeout?clearTimeout:void 0,ai="function"==typeof Promise?Promise:void 0,oi="function"==typeof queueMicrotask?queueMicrotask:void 0!==ai?function(e){return ai.resolve(null).then(e).catch(si)}:ri;function si(e){setTimeout((function(){throw e}))}function li(e,t){var n=t,r=0;do{var i=n.nextSibling;if(e.removeChild(n),i&&8===i.nodeType)if("/$"===(n=i.data)){if(0===r)return e.removeChild(i),void Ht(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=i}while(n);Ht(t)}function ci(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function ui(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var di=Math.random().toString(36).slice(2),fi="__reactFiber$"+di,hi="__reactProps$"+di,pi="__reactContainer$"+di,gi="__reactEvents$"+di,mi="__reactListeners$"+di,bi="__reactHandles$"+di;function yi(e){var t=e[fi];if(t)return t;for(var n=e.parentNode;n;){if(t=n[pi]||n[fi]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=ui(e);null!==e;){if(n=e[fi])return n;e=ui(e)}return t}n=(e=n).parentNode}return null}function vi(e){return!(e=e[fi]||e[pi])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function xi(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function wi(e){return e[hi]||null}var Ai=[],_i=-1;function ki(e){return{current:e}}function Ei(e){0>_i||(e.current=Ai[_i],Ai[_i]=null,_i--)}function Mi(e,t){_i++,Ai[_i]=e.current,e.current=t}var Oi={},Ci=ki(Oi),Si=ki(!1),Pi=Oi;function Di(e,t){var n=e.type.contextTypes;if(!n)return Oi;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in n)a[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=a),a}function ji(e){return null!=e.childContextTypes}function Ti(){Ei(Si),Ei(Ci)}function Bi(e,t,n){if(Ci.current!==Oi)throw Error(a(168));Mi(Ci,t),Mi(Si,n)}function Ni(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in t))throw Error(a(108,Y(e)||"Unknown",i));return L({},n,r)}function Ii(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Oi,Pi=Ci.current,Mi(Ci,e),Mi(Si,Si.current),!0}function Li(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Ni(e,t,Pi),r.__reactInternalMemoizedMergedChildContext=e,Ei(Si),Ei(Ci),Mi(Ci,e)):Ei(Si),Mi(Si,n)}var zi=null,Fi=!1,Ri=!1;function Wi(e){null===zi?zi=[e]:zi.push(e)}function Hi(){if(!Ri&&null!==zi){Ri=!0;var e=0,t=vt;try{var n=zi;for(vt=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}zi=null,Fi=!1}catch(t){throw null!==zi&&(zi=zi.slice(e+1)),qe(Je,Hi),t}finally{vt=t,Ri=!1}}return null}var Yi=[],Vi=0,Ui=null,$i=0,qi=[],Qi=0,Zi=null,Xi=1,Gi="";function Ki(e,t){Yi[Vi++]=$i,Yi[Vi++]=Ui,Ui=e,$i=t}function Ji(e,t,n){qi[Qi++]=Xi,qi[Qi++]=Gi,qi[Qi++]=Zi,Zi=e;var r=Xi;e=Gi;var i=32-ot(r)-1;r&=~(1<<i),n+=1;var a=32-ot(t)+i;if(30<a){var o=i-i%5;a=(r&(1<<o)-1).toString(32),r>>=o,i-=o,Xi=1<<32-ot(t)+i|n<<i|r,Gi=a+e}else Xi=1<<a|n<<i|r,Gi=e}function ea(e){null!==e.return&&(Ki(e,1),Ji(e,1,0))}function ta(e){for(;e===Ui;)Ui=Yi[--Vi],Yi[Vi]=null,$i=Yi[--Vi],Yi[Vi]=null;for(;e===Zi;)Zi=qi[--Qi],qi[Qi]=null,Gi=qi[--Qi],qi[Qi]=null,Xi=qi[--Qi],qi[Qi]=null}var na=null,ra=null,ia=!1,aa=null;function oa(e,t){var n=Dc(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function sa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,na=e,ra=ci(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,na=e,ra=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Zi?{id:Xi,overflow:Gi}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Dc(18,null,null,0)).stateNode=t,n.return=e,e.child=n,na=e,ra=null,!0);default:return!1}}function la(e){return!(!(1&e.mode)||128&e.flags)}function ca(e){if(ia){var t=ra;if(t){var n=t;if(!sa(e,t)){if(la(e))throw Error(a(418));t=ci(n.nextSibling);var r=na;t&&sa(e,t)?oa(r,n):(e.flags=-4097&e.flags|2,ia=!1,na=e)}}else{if(la(e))throw Error(a(418));e.flags=-4097&e.flags|2,ia=!1,na=e}}}function ua(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;na=e}function da(e){if(e!==na)return!1;if(!ia)return ua(e),ia=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ni(e.type,e.memoizedProps)),t&&(t=ra)){if(la(e))throw fa(),Error(a(418));for(;t;)oa(e,t),t=ci(t.nextSibling)}if(ua(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ra=ci(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ra=null}}else ra=na?ci(e.stateNode.nextSibling):null;return!0}function fa(){for(var e=ra;e;)e=ci(e.nextSibling)}function ha(){ra=na=null,ia=!1}function pa(e){null===aa?aa=[e]:aa.push(e)}var ga=x.ReactCurrentBatchConfig;function ma(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=r,o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=i.refs;null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ba(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function ya(e){return(0,e._init)(e._payload)}function va(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Tc(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function s(t){return e&&null===t.alternate&&(t.flags|=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Lc(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){var a=n.type;return a===_?d(e,t,n.props.children,r,n.key):null!==t&&(t.elementType===a||"object"==typeof a&&null!==a&&a.$$typeof===j&&ya(a)===t.type)?((r=i(t,n.props)).ref=ma(e,t,n),r.return=e,r):((r=Bc(n.type,n.key,n.props,null,e.mode,r)).ref=ma(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zc(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,a){return null===t||7!==t.tag?((t=Nc(n,e.mode,r,a)).return=e,t):((t=i(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Lc(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case w:return(n=Bc(t.type,t.key,t.props,null,e.mode,n)).ref=ma(e,null,t),n.return=e,n;case A:return(t=zc(t,e.mode,n)).return=e,t;case j:return f(e,(0,t._init)(t._payload),n)}if(te(t)||N(t))return(t=Nc(t,e.mode,n,null)).return=e,t;ba(e,t)}return null}function h(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case w:return n.key===i?c(e,t,n,r):null;case A:return n.key===i?u(e,t,n,r):null;case j:return h(e,t,(i=n._init)(n._payload),r)}if(te(n)||N(n))return null!==i?null:d(e,t,n,r,null);ba(e,n)}return null}function p(e,t,n,r,i){if("string"==typeof r&&""!==r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case w:return c(t,e=e.get(null===r.key?n:r.key)||null,r,i);case A:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i);case j:return p(e,t,n,(0,r._init)(r._payload),i)}if(te(r)||N(r))return d(t,e=e.get(n)||null,r,i,null);ba(t,r)}return null}function g(i,a,s,l){for(var c=null,u=null,d=a,g=a=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var b=h(i,d,s[g],l);if(null===b){null===d&&(d=m);break}e&&d&&null===b.alternate&&t(i,d),a=o(b,a,g),null===u?c=b:u.sibling=b,u=b,d=m}if(g===s.length)return n(i,d),ia&&Ki(i,g),c;if(null===d){for(;g<s.length;g++)null!==(d=f(i,s[g],l))&&(a=o(d,a,g),null===u?c=d:u.sibling=d,u=d);return ia&&Ki(i,g),c}for(d=r(i,d);g<s.length;g++)null!==(m=p(d,i,g,s[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),a=o(m,a,g),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(i,e)})),ia&&Ki(i,g),c}function m(i,s,l,c){var u=N(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var d=u=null,g=s,m=s=0,b=null,y=l.next();null!==g&&!y.done;m++,y=l.next()){g.index>m?(b=g,g=null):b=g.sibling;var v=h(i,g,y.value,c);if(null===v){null===g&&(g=b);break}e&&g&&null===v.alternate&&t(i,g),s=o(v,s,m),null===d?u=v:d.sibling=v,d=v,g=b}if(y.done)return n(i,g),ia&&Ki(i,m),u;if(null===g){for(;!y.done;m++,y=l.next())null!==(y=f(i,y.value,c))&&(s=o(y,s,m),null===d?u=y:d.sibling=y,d=y);return ia&&Ki(i,m),u}for(g=r(i,g);!y.done;m++,y=l.next())null!==(y=p(g,i,m,y.value,c))&&(e&&null!==y.alternate&&g.delete(null===y.key?m:y.key),s=o(y,s,m),null===d?u=y:d.sibling=y,d=y);return e&&g.forEach((function(e){return t(i,e)})),ia&&Ki(i,m),u}return function e(r,a,o,l){if("object"==typeof o&&null!==o&&o.type===_&&null===o.key&&(o=o.props.children),"object"==typeof o&&null!==o){switch(o.$$typeof){case w:e:{for(var c=o.key,u=a;null!==u;){if(u.key===c){if((c=o.type)===_){if(7===u.tag){n(r,u.sibling),(a=i(u,o.props.children)).return=r,r=a;break e}}else if(u.elementType===c||"object"==typeof c&&null!==c&&c.$$typeof===j&&ya(c)===u.type){n(r,u.sibling),(a=i(u,o.props)).ref=ma(r,u,o),a.return=r,r=a;break e}n(r,u);break}t(r,u),u=u.sibling}o.type===_?((a=Nc(o.props.children,r.mode,l,o.key)).return=r,r=a):((l=Bc(o.type,o.key,o.props,null,r.mode,l)).ref=ma(r,a,o),l.return=r,r=l)}return s(r);case A:e:{for(u=o.key;null!==a;){if(a.key===u){if(4===a.tag&&a.stateNode.containerInfo===o.containerInfo&&a.stateNode.implementation===o.implementation){n(r,a.sibling),(a=i(a,o.children||[])).return=r,r=a;break e}n(r,a);break}t(r,a),a=a.sibling}(a=zc(o,r.mode,l)).return=r,r=a}return s(r);case j:return e(r,a,(u=o._init)(o._payload),l)}if(te(o))return g(r,a,o,l);if(N(o))return m(r,a,o,l);ba(r,o)}return"string"==typeof o&&""!==o||"number"==typeof o?(o=""+o,null!==a&&6===a.tag?(n(r,a.sibling),(a=i(a,o)).return=r,r=a):(n(r,a),(a=Lc(o,r.mode,l)).return=r,r=a),s(r)):n(r,a)}}var xa=va(!0),wa=va(!1),Aa=ki(null),_a=null,ka=null,Ea=null;function Ma(){Ea=ka=_a=null}function Oa(e){var t=Aa.current;Ei(Aa),e._currentValue=t}function Ca(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Sa(e,t){_a=e,Ea=ka=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(vs=!0),e.firstContext=null)}function Pa(e){var t=e._currentValue;if(Ea!==e)if(e={context:e,memoizedValue:t,next:null},null===ka){if(null===_a)throw Error(a(308));ka=e,_a.dependencies={lanes:0,firstContext:e}}else ka=ka.next=e;return t}var Da=null;function ja(e){null===Da?Da=[e]:Da.push(e)}function Ta(e,t,n,r){var i=t.interleaved;return null===i?(n.next=n,ja(t)):(n.next=i.next,i.next=n),t.interleaved=n,Ba(e,r)}function Ba(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Na=!1;function Ia(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function La(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function za(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Fa(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,2&Cl){var i=r.pending;return null===i?t.next=t:(t.next=i.next,i.next=t),r.pending=t,Ba(e,n)}return null===(i=r.interleaved)?(t.next=t,ja(r)):(t.next=i.next,i.next=t),r.interleaved=t,Ba(e,n)}function Ra(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}function Wa(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,a=null;if(null!==(n=n.firstBaseUpdate)){do{var o={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===a?i=a=o:a=a.next=o,n=n.next}while(null!==n);null===a?i=a=t:a=a.next=t}else i=a=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:a,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ha(e,t,n,r){var i=e.updateQueue;Na=!1;var a=i.firstBaseUpdate,o=i.lastBaseUpdate,s=i.shared.pending;if(null!==s){i.shared.pending=null;var l=s,c=l.next;l.next=null,null===o?a=c:o.next=c,o=l;var u=e.alternate;null!==u&&(s=(u=u.updateQueue).lastBaseUpdate)!==o&&(null===s?u.firstBaseUpdate=c:s.next=c,u.lastBaseUpdate=l)}if(null!==a){var d=i.baseState;for(o=0,u=c=l=null,s=a;;){var f=s.lane,h=s.eventTime;if((r&f)===f){null!==u&&(u=u.next={eventTime:h,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var p=e,g=s;switch(f=t,h=n,g.tag){case 1:if("function"==typeof(p=g.payload)){d=p.call(h,d,f);break e}d=p;break e;case 3:p.flags=-65537&p.flags|128;case 0:if(null==(f="function"==typeof(p=g.payload)?p.call(h,d,f):p))break e;d=L({},d,f);break e;case 2:Na=!0}}null!==s.callback&&0!==s.lane&&(e.flags|=64,null===(f=i.effects)?i.effects=[s]:f.push(s))}else h={eventTime:h,lane:f,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===u?(c=u=h,l=d):u=u.next=h,o|=f;if(null===(s=s.next)){if(null===(s=i.shared.pending))break;s=(f=s).next,f.next=null,i.lastBaseUpdate=f,i.shared.pending=null}}if(null===u&&(l=d),i.baseState=l,i.firstBaseUpdate=c,i.lastBaseUpdate=u,null!==(t=i.shared.interleaved)){i=t;do{o|=i.lane,i=i.next}while(i!==t)}else null===a&&(i.shared.lanes=0);Il|=o,e.lanes=o,e.memoizedState=d}}function Ya(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var Va={},Ua=ki(Va),$a=ki(Va),qa=ki(Va);function Qa(e){if(e===Va)throw Error(a(174));return e}function Za(e,t){switch(Mi(qa,t),Mi($a,e),Mi(Ua,Va),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:le(null,"");break;default:t=le(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Ei(Ua),Mi(Ua,t)}function Xa(){Ei(Ua),Ei($a),Ei(qa)}function Ga(e){Qa(qa.current);var t=Qa(Ua.current),n=le(t,e.type);t!==n&&(Mi($a,e),Mi(Ua,n))}function Ka(e){$a.current===e&&(Ei(Ua),Ei($a))}var Ja=ki(0);function eo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(128&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var to=[];function no(){for(var e=0;e<to.length;e++)to[e]._workInProgressVersionPrimary=null;to.length=0}var ro=x.ReactCurrentDispatcher,io=x.ReactCurrentBatchConfig,ao=0,oo=null,so=null,lo=null,co=!1,uo=!1,fo=0,ho=0;function po(){throw Error(a(321))}function go(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!sr(e[n],t[n]))return!1;return!0}function mo(e,t,n,r,i,o){if(ao=o,oo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,ro.current=null===e||null===e.memoizedState?Jo:es,e=n(r,i),uo){o=0;do{if(uo=!1,fo=0,25<=o)throw Error(a(301));o+=1,lo=so=null,t.updateQueue=null,ro.current=ts,e=n(r,i)}while(uo)}if(ro.current=Ko,t=null!==so&&null!==so.next,ao=0,lo=so=oo=null,co=!1,t)throw Error(a(300));return e}function bo(){var e=0!==fo;return fo=0,e}function yo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===lo?oo.memoizedState=lo=e:lo=lo.next=e,lo}function vo(){if(null===so){var e=oo.alternate;e=null!==e?e.memoizedState:null}else e=so.next;var t=null===lo?oo.memoizedState:lo.next;if(null!==t)lo=t,so=e;else{if(null===e)throw Error(a(310));e={memoizedState:(so=e).memoizedState,baseState:so.baseState,baseQueue:so.baseQueue,queue:so.queue,next:null},null===lo?oo.memoizedState=lo=e:lo=lo.next=e}return lo}function xo(e,t){return"function"==typeof t?t(e):t}function wo(e){var t=vo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=so,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){o=i.next,r=r.baseState;var l=s=null,c=null,u=o;do{var d=u.lane;if((ao&d)===d)null!==c&&(c=c.next={lane:0,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null}),r=u.hasEagerState?u.eagerState:e(r,u.action);else{var f={lane:d,action:u.action,hasEagerState:u.hasEagerState,eagerState:u.eagerState,next:null};null===c?(l=c=f,s=r):c=c.next=f,oo.lanes|=d,Il|=d}u=u.next}while(null!==u&&u!==o);null===c?s=r:c.next=l,sr(r,t.memoizedState)||(vs=!0),t.memoizedState=r,t.baseState=s,t.baseQueue=c,n.lastRenderedState=r}if(null!==(e=n.interleaved)){i=e;do{o=i.lane,oo.lanes|=o,Il|=o,i=i.next}while(i!==e)}else null===i&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ao(e){var t=vo(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=e(o,s.action),s=s.next}while(s!==i);sr(o,t.memoizedState)||(vs=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function _o(){}function ko(e,t){var n=oo,r=vo(),i=t(),o=!sr(r.memoizedState,i);if(o&&(r.memoizedState=i,vs=!0),r=r.queue,Io(Oo.bind(null,n,r,e),[e]),r.getSnapshot!==t||o||null!==lo&&1&lo.memoizedState.tag){if(n.flags|=2048,Do(9,Mo.bind(null,n,r,i,t),void 0,null),null===Sl)throw Error(a(349));30&ao||Eo(n,t,i)}return i}function Eo(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=oo.updateQueue)?(t={lastEffect:null,stores:null},oo.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Mo(e,t,n,r){t.value=n,t.getSnapshot=r,Co(t)&&So(e)}function Oo(e,t,n){return n((function(){Co(t)&&So(e)}))}function Co(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!sr(e,n)}catch(e){return!0}}function So(e){var t=Ba(e,1);null!==t&&nc(t,e,1,-1)}function Po(e){var t=yo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:xo,lastRenderedState:e},t.queue=e,e=e.dispatch=Qo.bind(null,oo,e),[t.memoizedState,e]}function Do(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=oo.updateQueue)?(t={lastEffect:null,stores:null},oo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function jo(){return vo().memoizedState}function To(e,t,n,r){var i=yo();oo.flags|=e,i.memoizedState=Do(1|t,n,void 0,void 0===r?null:r)}function Bo(e,t,n,r){var i=vo();r=void 0===r?null:r;var a=void 0;if(null!==so){var o=so.memoizedState;if(a=o.destroy,null!==r&&go(r,o.deps))return void(i.memoizedState=Do(t,n,a,r))}oo.flags|=e,i.memoizedState=Do(1|t,n,a,r)}function No(e,t){return To(8390656,8,e,t)}function Io(e,t){return Bo(2048,8,e,t)}function Lo(e,t){return Bo(4,2,e,t)}function zo(e,t){return Bo(4,4,e,t)}function Fo(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ro(e,t,n){return n=null!=n?n.concat([e]):null,Bo(4,4,Fo.bind(null,t,e),n)}function Wo(){}function Ho(e,t){var n=vo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&go(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Yo(e,t){var n=vo();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&go(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Vo(e,t,n){return 21&ao?(sr(n,t)||(n=gt(),oo.lanes|=n,Il|=n,e.baseState=!0),t):(e.baseState&&(e.baseState=!1,vs=!0),e.memoizedState=n)}function Uo(e,t){var n=vt;vt=0!==n&&4>n?n:4,e(!0);var r=io.transition;io.transition={};try{e(!1),t()}finally{vt=n,io.transition=r}}function $o(){return vo().memoizedState}function qo(e,t,n){var r=tc(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},Zo(e)?Xo(t,n):null!==(n=Ta(e,t,n,r))&&(nc(n,e,r,ec()),Go(n,t,r))}function Qo(e,t,n){var r=tc(e),i={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(Zo(e))Xo(t,i);else{var a=e.alternate;if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var o=t.lastRenderedState,s=a(o,n);if(i.hasEagerState=!0,i.eagerState=s,sr(s,o)){var l=t.interleaved;return null===l?(i.next=i,ja(t)):(i.next=l.next,l.next=i),void(t.interleaved=i)}}catch(e){}null!==(n=Ta(e,t,i,r))&&(nc(n,e,r,i=ec()),Go(n,t,r))}}function Zo(e){var t=e.alternate;return e===oo||null!==t&&t===oo}function Xo(e,t){uo=co=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function Go(e,t,n){if(4194240&n){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,yt(e,n)}}var Ko={readContext:Pa,useCallback:po,useContext:po,useEffect:po,useImperativeHandle:po,useInsertionEffect:po,useLayoutEffect:po,useMemo:po,useReducer:po,useRef:po,useState:po,useDebugValue:po,useDeferredValue:po,useTransition:po,useMutableSource:po,useSyncExternalStore:po,useId:po,unstable_isNewReconciler:!1},Jo={readContext:Pa,useCallback:function(e,t){return yo().memoizedState=[e,void 0===t?null:t],e},useContext:Pa,useEffect:No,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,To(4194308,4,Fo.bind(null,t,e),n)},useLayoutEffect:function(e,t){return To(4194308,4,e,t)},useInsertionEffect:function(e,t){return To(4,2,e,t)},useMemo:function(e,t){var n=yo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=yo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=qo.bind(null,oo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},yo().memoizedState=e},useState:Po,useDebugValue:Wo,useDeferredValue:function(e){return yo().memoizedState=e},useTransition:function(){var e=Po(!1),t=e[0];return e=Uo.bind(null,e[1]),yo().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=oo,i=yo();if(ia){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Sl)throw Error(a(349));30&ao||Eo(r,t,n)}i.memoizedState=n;var o={value:n,getSnapshot:t};return i.queue=o,No(Oo.bind(null,r,o,e),[e]),r.flags|=2048,Do(9,Mo.bind(null,r,o,n,t),void 0,null),n},useId:function(){var e=yo(),t=Sl.identifierPrefix;if(ia){var n=Gi;t=":"+t+"R"+(n=(Xi&~(1<<32-ot(Xi)-1)).toString(32)+n),0<(n=fo++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=ho++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},es={readContext:Pa,useCallback:Ho,useContext:Pa,useEffect:Io,useImperativeHandle:Ro,useInsertionEffect:Lo,useLayoutEffect:zo,useMemo:Yo,useReducer:wo,useRef:jo,useState:function(){return wo(xo)},useDebugValue:Wo,useDeferredValue:function(e){return Vo(vo(),so.memoizedState,e)},useTransition:function(){return[wo(xo)[0],vo().memoizedState]},useMutableSource:_o,useSyncExternalStore:ko,useId:$o,unstable_isNewReconciler:!1},ts={readContext:Pa,useCallback:Ho,useContext:Pa,useEffect:Io,useImperativeHandle:Ro,useInsertionEffect:Lo,useLayoutEffect:zo,useMemo:Yo,useReducer:Ao,useRef:jo,useState:function(){return Ao(xo)},useDebugValue:Wo,useDeferredValue:function(e){var t=vo();return null===so?t.memoizedState=e:Vo(t,so.memoizedState,e)},useTransition:function(){return[Ao(xo)[0],vo().memoizedState]},useMutableSource:_o,useSyncExternalStore:ko,useId:$o,unstable_isNewReconciler:!1};function ns(e,t){if(e&&e.defaultProps){for(var n in t=L({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}function rs(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:L({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var is={isMounted:function(e){return!!(e=e._reactInternals)&&He(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ec(),i=tc(e),a=za(r,i);a.payload=t,null!=n&&(a.callback=n),null!==(t=Fa(e,a,i))&&(nc(t,e,i,r),Ra(t,e,i))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ec(),i=tc(e),a=za(r,i);a.tag=1,a.payload=t,null!=n&&(a.callback=n),null!==(t=Fa(e,a,i))&&(nc(t,e,i,r),Ra(t,e,i))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ec(),r=tc(e),i=za(n,r);i.tag=2,null!=t&&(i.callback=t),null!==(t=Fa(e,i,r))&&(nc(t,e,r,n),Ra(t,e,r))}};function as(e,t,n,r,i,a,o){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,a,o):!(t.prototype&&t.prototype.isPureReactComponent&&lr(n,r)&&lr(i,a))}function os(e,t,n){var r=!1,i=Oi,a=t.contextType;return"object"==typeof a&&null!==a?a=Pa(a):(i=ji(t)?Pi:Ci.current,a=(r=null!=(r=t.contextTypes))?Di(e,i):Oi),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=is,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function ss(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&is.enqueueReplaceState(t,t.state,null)}function ls(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs={},Ia(e);var a=t.contextType;"object"==typeof a&&null!==a?i.context=Pa(a):(a=ji(t)?Pi:Ci.current,i.context=Di(e,a)),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(rs(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&is.enqueueReplaceState(i,i.state,null),Ha(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function cs(e,t){try{var n="",r=t;do{n+=W(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i,digest:null}}function us(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function ds(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var fs="function"==typeof WeakMap?WeakMap:Map;function hs(e,t,n){(n=za(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Vl||(Vl=!0,Ul=r),ds(0,t)},n}function ps(e,t,n){(n=za(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return r(i)},n.callback=function(){ds(0,t)}}var a=e.stateNode;return null!==a&&"function"==typeof a.componentDidCatch&&(n.callback=function(){ds(0,t),"function"!=typeof r&&(null===$l?$l=new Set([this]):$l.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function gs(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new fs;var i=new Set;r.set(t,i)}else void 0===(i=r.get(t))&&(i=new Set,r.set(t,i));i.has(n)||(i.add(n),e=Ec.bind(null,e,t,n),t.then(e,e))}function ms(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function bs(e,t,n,r,i){return 1&e.mode?(e.flags|=65536,e.lanes=i,e):(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=za(-1,1)).tag=2,Fa(n,t,1))),n.lanes|=1),e)}var ys=x.ReactCurrentOwner,vs=!1;function xs(e,t,n,r){t.child=null===e?wa(t,null,n,r):xa(t,e.child,n,r)}function ws(e,t,n,r,i){n=n.render;var a=t.ref;return Sa(t,i),r=mo(e,t,n,r,a,i),n=bo(),null===e||vs?(ia&&n&&ea(t),t.flags|=1,xs(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Vs(e,t,i))}function As(e,t,n,r,i){if(null===e){var a=n.type;return"function"!=typeof a||jc(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Bc(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,_s(e,t,a,r,i))}if(a=e.child,!(e.lanes&i)){var o=a.memoizedProps;if((n=null!==(n=n.compare)?n:lr)(o,r)&&e.ref===t.ref)return Vs(e,t,i)}return t.flags|=1,(e=Tc(a,r)).ref=t.ref,e.return=t,t.child=e}function _s(e,t,n,r,i){if(null!==e){var a=e.memoizedProps;if(lr(a,r)&&e.ref===t.ref){if(vs=!1,t.pendingProps=r=a,!(e.lanes&i))return t.lanes=e.lanes,Vs(e,t,i);131072&e.flags&&(vs=!0)}}return Ms(e,t,n,r,i)}function ks(e,t,n){var r=t.pendingProps,i=r.children,a=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(1&t.mode){if(!(1073741824&n))return e=null!==a?a.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,Mi(Tl,jl),jl|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==a?a.baseLanes:n,Mi(Tl,jl),jl|=r}else t.memoizedState={baseLanes:0,cachePool:null,transitions:null},Mi(Tl,jl),jl|=n;else null!==a?(r=a.baseLanes|n,t.memoizedState=null):r=n,Mi(Tl,jl),jl|=r;return xs(e,t,i,n),t.child}function Es(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function Ms(e,t,n,r,i){var a=ji(n)?Pi:Ci.current;return a=Di(t,a),Sa(t,i),n=mo(e,t,n,r,a,i),r=bo(),null===e||vs?(ia&&r&&ea(t),t.flags|=1,xs(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~i,Vs(e,t,i))}function Os(e,t,n,r,i){if(ji(n)){var a=!0;Ii(t)}else a=!1;if(Sa(t,i),null===t.stateNode)Ys(e,t),os(t,n,r),ls(t,n,r,i),r=!0;else if(null===e){var o=t.stateNode,s=t.memoizedProps;o.props=s;var l=o.context,c=n.contextType;c="object"==typeof c&&null!==c?Pa(c):Di(t,c=ji(n)?Pi:Ci.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof o.getSnapshotBeforeUpdate;d||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==r||l!==c)&&ss(t,o,r,c),Na=!1;var f=t.memoizedState;o.state=f,Ha(t,r,o,i),l=t.memoizedState,s!==r||f!==l||Si.current||Na?("function"==typeof u&&(rs(t,n,u,r),l=t.memoizedState),(s=Na||as(t,n,s,r,f,l,c))?(d||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||("function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount()),"function"==typeof o.componentDidMount&&(t.flags|=4194308)):("function"==typeof o.componentDidMount&&(t.flags|=4194308),t.memoizedProps=r,t.memoizedState=l),o.props=r,o.state=l,o.context=c,r=s):("function"==typeof o.componentDidMount&&(t.flags|=4194308),r=!1)}else{o=t.stateNode,La(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:ns(t.type,s),o.props=c,d=t.pendingProps,f=o.context,l="object"==typeof(l=n.contextType)&&null!==l?Pa(l):Di(t,l=ji(n)?Pi:Ci.current);var h=n.getDerivedStateFromProps;(u="function"==typeof h||"function"==typeof o.getSnapshotBeforeUpdate)||"function"!=typeof o.UNSAFE_componentWillReceiveProps&&"function"!=typeof o.componentWillReceiveProps||(s!==d||f!==l)&&ss(t,o,r,l),Na=!1,f=t.memoizedState,o.state=f,Ha(t,r,o,i);var p=t.memoizedState;s!==d||f!==p||Si.current||Na?("function"==typeof h&&(rs(t,n,h,r),p=t.memoizedState),(c=Na||as(t,n,c,r,f,p,l)||!1)?(u||"function"!=typeof o.UNSAFE_componentWillUpdate&&"function"!=typeof o.componentWillUpdate||("function"==typeof o.componentWillUpdate&&o.componentWillUpdate(r,p,l),"function"==typeof o.UNSAFE_componentWillUpdate&&o.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof o.componentDidUpdate&&(t.flags|=4),"function"==typeof o.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),t.memoizedProps=r,t.memoizedState=p),o.props=r,o.state=p,o.context=l,r=c):("function"!=typeof o.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof o.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=1024),r=!1)}return Cs(e,t,n,r,a,i)}function Cs(e,t,n,r,i,a){Es(e,t);var o=!!(128&t.flags);if(!r&&!o)return i&&Li(t,n,!1),Vs(e,t,a);r=t.stateNode,ys.current=t;var s=o&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&o?(t.child=xa(t,e.child,null,a),t.child=xa(t,null,s,a)):xs(e,t,s,a),t.memoizedState=r.state,i&&Li(t,n,!0),t.child}function Ss(e){var t=e.stateNode;t.pendingContext?Bi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Bi(0,t.context,!1),Za(e,t.containerInfo)}function Ps(e,t,n,r,i){return ha(),pa(i),t.flags|=256,xs(e,t,n,r),t.child}var Ds,js,Ts,Bs,Ns={dehydrated:null,treeContext:null,retryLane:0};function Is(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ls(e,t,n){var r,i=t.pendingProps,o=Ja.current,s=!1,l=!!(128&t.flags);if((r=l)||(r=(null===e||null!==e.memoizedState)&&!!(2&o)),r?(s=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(o|=1),Mi(Ja,1&o),null===e)return ca(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(1&t.mode?"$!"===e.data?t.lanes=8:t.lanes=1073741824:t.lanes=1,null):(l=i.children,e=i.fallback,s?(i=t.mode,s=t.child,l={mode:"hidden",children:l},1&i||null===s?s=Ic(l,i,0,null):(s.childLanes=0,s.pendingProps=l),e=Nc(e,i,n,null),s.return=t,e.return=t,s.sibling=e,t.child=s,t.child.memoizedState=Is(n),t.memoizedState=Ns,e):zs(t,l));if(null!==(o=e.memoizedState)&&null!==(r=o.dehydrated))return function(e,t,n,r,i,o,s){if(n)return 256&t.flags?(t.flags&=-257,Fs(e,t,s,r=us(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(o=r.fallback,i=t.mode,r=Ic({mode:"visible",children:r.children},i,0,null),(o=Nc(o,i,s,null)).flags|=2,r.return=t,o.return=t,r.sibling=o,t.child=r,1&t.mode&&xa(t,e.child,null,s),t.child.memoizedState=Is(s),t.memoizedState=Ns,o);if(!(1&t.mode))return Fs(e,t,s,null);if("$!"===i.data){if(r=i.nextSibling&&i.nextSibling.dataset)var l=r.dgst;return r=l,Fs(e,t,s,r=us(o=Error(a(419)),r,void 0))}if(l=!!(s&e.childLanes),vs||l){if(null!==(r=Sl)){switch(s&-s){case 4:i=2;break;case 16:i=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:i=32;break;case 536870912:i=268435456;break;default:i=0}0!==(i=i&(r.suspendedLanes|s)?0:i)&&i!==o.retryLane&&(o.retryLane=i,Ba(e,i),nc(r,e,i,-1))}return gc(),Fs(e,t,s,r=us(Error(a(421))))}return"$?"===i.data?(t.flags|=128,t.child=e.child,t=Oc.bind(null,e),i._reactRetry=t,null):(e=o.treeContext,ra=ci(i.nextSibling),na=t,ia=!0,aa=null,null!==e&&(qi[Qi++]=Xi,qi[Qi++]=Gi,qi[Qi++]=Zi,Xi=e.id,Gi=e.overflow,Zi=t),(t=zs(t,r.children)).flags|=4096,t)}(e,t,l,i,r,o,n);if(s){s=i.fallback,l=t.mode,r=(o=e.child).sibling;var c={mode:"hidden",children:i.children};return 1&l||t.child===o?(i=Tc(o,c)).subtreeFlags=14680064&o.subtreeFlags:((i=t.child).childLanes=0,i.pendingProps=c,t.deletions=null),null!==r?s=Tc(r,s):(s=Nc(s,l,n,null)).flags|=2,s.return=t,i.return=t,i.sibling=s,t.child=i,i=s,s=t.child,l=null===(l=e.child.memoizedState)?Is(n):{baseLanes:l.baseLanes|n,cachePool:null,transitions:l.transitions},s.memoizedState=l,s.childLanes=e.childLanes&~n,t.memoizedState=Ns,i}return e=(s=e.child).sibling,i=Tc(s,{mode:"visible",children:i.children}),!(1&t.mode)&&(i.lanes=n),i.return=t,i.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=i,t.memoizedState=null,i}function zs(e,t){return(t=Ic({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Fs(e,t,n,r){return null!==r&&pa(r),xa(t,e.child,null,n),(e=zs(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Rs(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Ca(e.return,t,n)}function Ws(e,t,n,r,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i)}function Hs(e,t,n){var r=t.pendingProps,i=r.revealOrder,a=r.tail;if(xs(e,t,r.children,n),2&(r=Ja.current))r=1&r|2,t.flags|=128;else{if(null!==e&&128&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Rs(e,n,t);else if(19===e.tag)Rs(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(Mi(Ja,r),1&t.mode)switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===eo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),Ws(t,!1,i,n,a);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===eo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}Ws(t,!0,n,null,a);break;case"together":Ws(t,!1,null,null,void 0);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function Ys(e,t){!(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function Vs(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Il|=t.lanes,!(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Tc(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tc(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Us(e,t){if(!ia)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function $s(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=14680064&i.subtreeFlags,r|=14680064&i.flags,i.return=e,i=i.sibling;else for(i=e.child;null!==i;)n|=i.lanes|i.childLanes,r|=i.subtreeFlags,r|=i.flags,i.return=e,i=i.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function qs(e,t,n){var r=t.pendingProps;switch(ta(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return $s(t),null;case 1:case 17:return ji(t.type)&&Ti(),$s(t),null;case 3:return r=t.stateNode,Xa(),Ei(Si),Ei(Ci),no(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(da(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&!(256&t.flags)||(t.flags|=1024,null!==aa&&(oc(aa),aa=null))),js(e,t),$s(t),null;case 5:Ka(t);var i=Qa(qa.current);if(n=t.type,null!==e&&null!=t.stateNode)Ts(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return $s(t),null}if(e=Qa(Ua.current),da(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[fi]=t,r[hi]=o,e=!!(1&t.mode),n){case"dialog":Fr("cancel",r),Fr("close",r);break;case"iframe":case"object":case"embed":Fr("load",r);break;case"video":case"audio":for(i=0;i<Nr.length;i++)Fr(Nr[i],r);break;case"source":Fr("error",r);break;case"img":case"image":case"link":Fr("error",r),Fr("load",r);break;case"details":Fr("toggle",r);break;case"input":X(r,o),Fr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},Fr("invalid",r);break;case"textarea":ie(r,o),Fr("invalid",r)}for(var l in ye(n,o),i=null,o)if(o.hasOwnProperty(l)){var c=o[l];"children"===l?"string"==typeof c?r.textContent!==c&&(!0!==o.suppressHydrationWarning&&Kr(r.textContent,c,e),i=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(!0!==o.suppressHydrationWarning&&Kr(r.textContent,c,e),i=["children",""+c]):s.hasOwnProperty(l)&&null!=c&&"onScroll"===l&&Fr("scroll",r)}switch(n){case"input":$(r),J(r,o,!0);break;case"textarea":$(r),oe(r);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(r.onclick=Jr)}r=i,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===i.nodeType?i:i.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=se(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[fi]=t,e[hi]=r,Ds(e,t,!1,!1),t.stateNode=e;e:{switch(l=ve(n,r),n){case"dialog":Fr("cancel",e),Fr("close",e),i=r;break;case"iframe":case"object":case"embed":Fr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Nr.length;i++)Fr(Nr[i],e);i=r;break;case"source":Fr("error",e),i=r;break;case"img":case"image":case"link":Fr("error",e),Fr("load",e),i=r;break;case"details":Fr("toggle",e),i=r;break;case"input":X(e,r),i=Z(e,r),Fr("invalid",e);break;case"option":default:i=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=L({},r,{value:void 0}),Fr("invalid",e);break;case"textarea":ie(e,r),i=re(e,r),Fr("invalid",e)}for(o in ye(n,i),c=i)if(c.hasOwnProperty(o)){var u=c[o];"style"===o?me(e,u):"dangerouslySetInnerHTML"===o?null!=(u=u?u.__html:void 0)&&de(e,u):"children"===o?"string"==typeof u?("textarea"!==n||""!==u)&&fe(e,u):"number"==typeof u&&fe(e,""+u):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(s.hasOwnProperty(o)?null!=u&&"onScroll"===o&&Fr("scroll",e):null!=u&&v(e,o,u,l))}switch(n){case"input":$(e),J(e,r,!1);break;case"textarea":$(e),oe(e);break;case"option":null!=r.value&&e.setAttribute("value",""+V(r.value));break;case"select":e.multiple=!!r.multiple,null!=(o=r.value)?ne(e,!!r.multiple,o,!1):null!=r.defaultValue&&ne(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Jr)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return $s(t),null;case 6:if(e&&null!=t.stateNode)Bs(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=Qa(qa.current),Qa(Ua.current),da(t)){if(r=t.stateNode,n=t.memoizedProps,r[fi]=t,(o=r.nodeValue!==n)&&null!==(e=na))switch(e.tag){case 3:Kr(r.nodeValue,n,!!(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Kr(r.nodeValue,n,!!(1&e.mode))}o&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[fi]=t,t.stateNode=r}return $s(t),null;case 13:if(Ei(Ja),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ia&&null!==ra&&1&t.mode&&!(128&t.flags))fa(),ha(),t.flags|=98560,o=!1;else if(o=da(t),null!==r&&null!==r.dehydrated){if(null===e){if(!o)throw Error(a(318));if(!(o=null!==(o=t.memoizedState)?o.dehydrated:null))throw Error(a(317));o[fi]=t}else ha(),!(128&t.flags)&&(t.memoizedState=null),t.flags|=4;$s(t),o=!1}else null!==aa&&(oc(aa),aa=null),o=!0;if(!o)return 65536&t.flags?t:null}return 128&t.flags?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,1&t.mode&&(null===e||1&Ja.current?0===Bl&&(Bl=3):gc())),null!==t.updateQueue&&(t.flags|=4),$s(t),null);case 4:return Xa(),js(e,t),null===e&&Hr(t.stateNode.containerInfo),$s(t),null;case 10:return Oa(t.type._context),$s(t),null;case 19:if(Ei(Ja),null===(o=t.memoizedState))return $s(t),null;if(r=!!(128&t.flags),null===(l=o.rendering))if(r)Us(o,!1);else{if(0!==Bl||null!==e&&128&e.flags)for(e=t.child;null!==e;){if(null!==(l=eo(e))){for(t.flags|=128,Us(o,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(o=n).flags&=14680066,null===(l=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.subtreeFlags=0,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=l.childLanes,o.lanes=l.lanes,o.child=l.child,o.subtreeFlags=0,o.deletions=null,o.memoizedProps=l.memoizedProps,o.memoizedState=l.memoizedState,o.updateQueue=l.updateQueue,o.type=l.type,e=l.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return Mi(Ja,1&Ja.current|2),t.child}e=e.sibling}null!==o.tail&&Ge()>Hl&&(t.flags|=128,r=!0,Us(o,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=eo(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Us(o,!0),null===o.tail&&"hidden"===o.tailMode&&!l.alternate&&!ia)return $s(t),null}else 2*Ge()-o.renderingStartTime>Hl&&1073741824!==n&&(t.flags|=128,r=!0,Us(o,!1),t.lanes=4194304);o.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=o.last)?n.sibling=l:t.child=l,o.last=l)}return null!==o.tail?(t=o.tail,o.rendering=t,o.tail=t.sibling,o.renderingStartTime=Ge(),t.sibling=null,n=Ja.current,Mi(Ja,r?1&n|2:1&n),t):($s(t),null);case 22:case 23:return dc(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&1&t.mode?!!(1073741824&jl)&&($s(t),6&t.subtreeFlags&&(t.flags|=8192)):$s(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Qs(e,t){switch(ta(t),t.tag){case 1:return ji(t.type)&&Ti(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return Xa(),Ei(Si),Ei(Ci),no(),65536&(e=t.flags)&&!(128&e)?(t.flags=-65537&e|128,t):null;case 5:return Ka(t),null;case 13:if(Ei(Ja),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));ha()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Ei(Ja),null;case 4:return Xa(),null;case 10:return Oa(t.type._context),null;case 22:case 23:return dc(),null;default:return null}}Ds=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},js=function(){},Ts=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Qa(Ua.current);var a,o=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),o=[];break;case"select":i=L({},i,{value:void 0}),r=L({},r,{value:void 0}),o=[];break;case"textarea":i=re(e,i),r=re(e,r),o=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Jr)}for(u in ye(n,r),n=null,i)if(!r.hasOwnProperty(u)&&i.hasOwnProperty(u)&&null!=i[u])if("style"===u){var l=i[u];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(s.hasOwnProperty(u)?o||(o=[]):(o=o||[]).push(u,null));for(u in r){var c=r[u];if(l=null!=i?i[u]:void 0,r.hasOwnProperty(u)&&c!==l&&(null!=c||null!=l))if("style"===u)if(l){for(a in l)!l.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&l[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(o||(o=[]),o.push(u,n)),n=c;else"dangerouslySetInnerHTML"===u?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(o=o||[]).push(u,c)):"children"===u?"string"!=typeof c&&"number"!=typeof c||(o=o||[]).push(u,""+c):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(s.hasOwnProperty(u)?(null!=c&&"onScroll"===u&&Fr("scroll",e),o||l===c||(o=[])):(o=o||[]).push(u,c))}n&&(o=o||[]).push("style",n);var u=o;(t.updateQueue=u)&&(t.flags|=4)}},Bs=function(e,t,n,r){n!==r&&(t.flags|=4)};var Zs=!1,Xs=!1,Gs="function"==typeof WeakSet?WeakSet:Set,Ks=null;function Js(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){kc(e,t,n)}else n.current=null}function el(e,t,n){try{n()}catch(n){kc(e,t,n)}}var tl=!1;function nl(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var i=r=r.next;do{if((i.tag&e)===e){var a=i.destroy;i.destroy=void 0,void 0!==a&&el(t,n,a)}i=i.next}while(i!==r)}}function rl(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function il(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function al(e){var t=e.alternate;null!==t&&(e.alternate=null,al(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[fi],delete t[hi],delete t[gi],delete t[mi],delete t[bi]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function ol(e){return 5===e.tag||3===e.tag||4===e.tag}function sl(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||ol(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function ll(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Jr));else if(4!==r&&null!==(e=e.child))for(ll(e,t,n),e=e.sibling;null!==e;)ll(e,t,n),e=e.sibling}function cl(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(cl(e,t,n),e=e.sibling;null!==e;)cl(e,t,n),e=e.sibling}var ul=null,dl=!1;function fl(e,t,n){for(n=n.child;null!==n;)hl(e,t,n),n=n.sibling}function hl(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:Xs||Js(n,t);case 6:var r=ul,i=dl;ul=null,fl(e,t,n),dl=i,null!==(ul=r)&&(dl?(e=ul,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):ul.removeChild(n.stateNode));break;case 18:null!==ul&&(dl?(e=ul,n=n.stateNode,8===e.nodeType?li(e.parentNode,n):1===e.nodeType&&li(e,n),Ht(e)):li(ul,n.stateNode));break;case 4:r=ul,i=dl,ul=n.stateNode.containerInfo,dl=!0,fl(e,t,n),ul=r,dl=i;break;case 0:case 11:case 14:case 15:if(!Xs&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){i=r=r.next;do{var a=i,o=a.destroy;a=a.tag,void 0!==o&&(2&a||4&a)&&el(n,t,o),i=i.next}while(i!==r)}fl(e,t,n);break;case 1:if(!Xs&&(Js(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){kc(n,t,e)}fl(e,t,n);break;case 21:fl(e,t,n);break;case 22:1&n.mode?(Xs=(r=Xs)||null!==n.memoizedState,fl(e,t,n),Xs=r):fl(e,t,n);break;default:fl(e,t,n)}}function pl(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Gs),t.forEach((function(t){var r=Cc.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function gl(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var i=n[r];try{var o=e,s=t,l=s;e:for(;null!==l;){switch(l.tag){case 5:ul=l.stateNode,dl=!1;break e;case 3:case 4:ul=l.stateNode.containerInfo,dl=!0;break e}l=l.return}if(null===ul)throw Error(a(160));hl(o,s,i),ul=null,dl=!1;var c=i.alternate;null!==c&&(c.return=null),i.return=null}catch(e){kc(i,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)ml(t,e),t=t.sibling}function ml(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(gl(t,e),bl(e),4&r){try{nl(3,e,e.return),rl(3,e)}catch(t){kc(e,e.return,t)}try{nl(5,e,e.return)}catch(t){kc(e,e.return,t)}}break;case 1:gl(t,e),bl(e),512&r&&null!==n&&Js(n,n.return);break;case 5:if(gl(t,e),bl(e),512&r&&null!==n&&Js(n,n.return),32&e.flags){var i=e.stateNode;try{fe(i,"")}catch(t){kc(e,e.return,t)}}if(4&r&&null!=(i=e.stateNode)){var o=e.memoizedProps,s=null!==n?n.memoizedProps:o,l=e.type,c=e.updateQueue;if(e.updateQueue=null,null!==c)try{"input"===l&&"radio"===o.type&&null!=o.name&&G(i,o),ve(l,s);var u=ve(l,o);for(s=0;s<c.length;s+=2){var d=c[s],f=c[s+1];"style"===d?me(i,f):"dangerouslySetInnerHTML"===d?de(i,f):"children"===d?fe(i,f):v(i,d,f,u)}switch(l){case"input":K(i,o);break;case"textarea":ae(i,o);break;case"select":var h=i._wrapperState.wasMultiple;i._wrapperState.wasMultiple=!!o.multiple;var p=o.value;null!=p?ne(i,!!o.multiple,p,!1):h!==!!o.multiple&&(null!=o.defaultValue?ne(i,!!o.multiple,o.defaultValue,!0):ne(i,!!o.multiple,o.multiple?[]:"",!1))}i[hi]=o}catch(t){kc(e,e.return,t)}}break;case 6:if(gl(t,e),bl(e),4&r){if(null===e.stateNode)throw Error(a(162));i=e.stateNode,o=e.memoizedProps;try{i.nodeValue=o}catch(t){kc(e,e.return,t)}}break;case 3:if(gl(t,e),bl(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Ht(t.containerInfo)}catch(t){kc(e,e.return,t)}break;case 4:default:gl(t,e),bl(e);break;case 13:gl(t,e),bl(e),8192&(i=e.child).flags&&(o=null!==i.memoizedState,i.stateNode.isHidden=o,!o||null!==i.alternate&&null!==i.alternate.memoizedState||(Wl=Ge())),4&r&&pl(e);break;case 22:if(d=null!==n&&null!==n.memoizedState,1&e.mode?(Xs=(u=Xs)||d,gl(t,e),Xs=u):gl(t,e),bl(e),8192&r){if(u=null!==e.memoizedState,(e.stateNode.isHidden=u)&&!d&&1&e.mode)for(Ks=e,d=e.child;null!==d;){for(f=Ks=d;null!==Ks;){switch(p=(h=Ks).child,h.tag){case 0:case 11:case 14:case 15:nl(4,h,h.return);break;case 1:Js(h,h.return);var g=h.stateNode;if("function"==typeof g.componentWillUnmount){r=h,n=h.return;try{t=r,g.props=t.memoizedProps,g.state=t.memoizedState,g.componentWillUnmount()}catch(e){kc(r,n,e)}}break;case 5:Js(h,h.return);break;case 22:if(null!==h.memoizedState){wl(f);continue}}null!==p?(p.return=h,Ks=p):wl(f)}d=d.sibling}e:for(d=null,f=e;;){if(5===f.tag){if(null===d){d=f;try{i=f.stateNode,u?"function"==typeof(o=i.style).setProperty?o.setProperty("display","none","important"):o.display="none":(l=f.stateNode,s=null!=(c=f.memoizedProps.style)&&c.hasOwnProperty("display")?c.display:null,l.style.display=ge("display",s))}catch(t){kc(e,e.return,t)}}}else if(6===f.tag){if(null===d)try{f.stateNode.nodeValue=u?"":f.memoizedProps}catch(t){kc(e,e.return,t)}}else if((22!==f.tag&&23!==f.tag||null===f.memoizedState||f===e)&&null!==f.child){f.child.return=f,f=f.child;continue}if(f===e)break e;for(;null===f.sibling;){if(null===f.return||f.return===e)break e;d===f&&(d=null),f=f.return}d===f&&(d=null),f.sibling.return=f.return,f=f.sibling}}break;case 19:gl(t,e),bl(e),4&r&&pl(e);case 21:}}function bl(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(ol(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var i=r.stateNode;32&r.flags&&(fe(i,""),r.flags&=-33),cl(e,sl(e),i);break;case 3:case 4:var o=r.stateNode.containerInfo;ll(e,sl(e),o);break;default:throw Error(a(161))}}catch(t){kc(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function yl(e,t,n){Ks=e,vl(e,t,n)}function vl(e,t,n){for(var r=!!(1&e.mode);null!==Ks;){var i=Ks,a=i.child;if(22===i.tag&&r){var o=null!==i.memoizedState||Zs;if(!o){var s=i.alternate,l=null!==s&&null!==s.memoizedState||Xs;s=Zs;var c=Xs;if(Zs=o,(Xs=l)&&!c)for(Ks=i;null!==Ks;)l=(o=Ks).child,22===o.tag&&null!==o.memoizedState?Al(i):null!==l?(l.return=o,Ks=l):Al(i);for(;null!==a;)Ks=a,vl(a,t,n),a=a.sibling;Ks=i,Zs=s,Xs=c}xl(e)}else 8772&i.subtreeFlags&&null!==a?(a.return=i,Ks=a):xl(e)}}function xl(e){for(;null!==Ks;){var t=Ks;if(8772&t.flags){var n=t.alternate;try{if(8772&t.flags)switch(t.tag){case 0:case 11:case 15:Xs||rl(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xs)if(null===n)r.componentDidMount();else{var i=t.elementType===t.type?n.memoizedProps:ns(t.type,n.memoizedProps);r.componentDidUpdate(i,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var o=t.updateQueue;null!==o&&Ya(t,o,r);break;case 3:var s=t.updateQueue;if(null!==s){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}Ya(t,s,n)}break;case 5:var l=t.stateNode;if(null===n&&4&t.flags){n=l;var c=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":c.autoFocus&&n.focus();break;case"img":c.src&&(n.src=c.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var u=t.alternate;if(null!==u){var d=u.memoizedState;if(null!==d){var f=d.dehydrated;null!==f&&Ht(f)}}}break;default:throw Error(a(163))}Xs||512&t.flags&&il(t)}catch(e){kc(t,t.return,e)}}if(t===e){Ks=null;break}if(null!==(n=t.sibling)){n.return=t.return,Ks=n;break}Ks=t.return}}function wl(e){for(;null!==Ks;){var t=Ks;if(t===e){Ks=null;break}var n=t.sibling;if(null!==n){n.return=t.return,Ks=n;break}Ks=t.return}}function Al(e){for(;null!==Ks;){var t=Ks;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{rl(4,t)}catch(e){kc(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var i=t.return;try{r.componentDidMount()}catch(e){kc(t,i,e)}}var a=t.return;try{il(t)}catch(e){kc(t,a,e)}break;case 5:var o=t.return;try{il(t)}catch(e){kc(t,o,e)}}}catch(e){kc(t,t.return,e)}if(t===e){Ks=null;break}var s=t.sibling;if(null!==s){s.return=t.return,Ks=s;break}Ks=t.return}}var _l,kl=Math.ceil,El=x.ReactCurrentDispatcher,Ml=x.ReactCurrentOwner,Ol=x.ReactCurrentBatchConfig,Cl=0,Sl=null,Pl=null,Dl=0,jl=0,Tl=ki(0),Bl=0,Nl=null,Il=0,Ll=0,zl=0,Fl=null,Rl=null,Wl=0,Hl=1/0,Yl=null,Vl=!1,Ul=null,$l=null,ql=!1,Ql=null,Zl=0,Xl=0,Gl=null,Kl=-1,Jl=0;function ec(){return 6&Cl?Ge():-1!==Kl?Kl:Kl=Ge()}function tc(e){return 1&e.mode?2&Cl&&0!==Dl?Dl&-Dl:null!==ga.transition?(0===Jl&&(Jl=gt()),Jl):0!==(e=vt)?e:e=void 0===(e=window.event)?16:Xt(e.type):1}function nc(e,t,n,r){if(50<Xl)throw Xl=0,Gl=null,Error(a(185));bt(e,n,r),2&Cl&&e===Sl||(e===Sl&&(!(2&Cl)&&(Ll|=n),4===Bl&&sc(e,Dl)),rc(e,r),1===n&&0===Cl&&!(1&t.mode)&&(Hl=Ge()+500,Fi&&Hi()))}function rc(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,i=e.expirationTimes,a=e.pendingLanes;0<a;){var o=31-ot(a),s=1<<o,l=i[o];-1===l?s&n&&!(s&r)||(i[o]=ht(s,t)):l<=t&&(e.expiredLanes|=s),a&=~s}}(e,t);var r=ft(e,e===Sl?Dl:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Fi=!0,Wi(e)}(lc.bind(null,e)):Wi(lc.bind(null,e)),oi((function(){!(6&Cl)&&Hi()})),n=null;else{switch(xt(r)){case 1:n=Je;break;case 4:n=et;break;case 16:default:n=tt;break;case 536870912:n=rt}n=Sc(n,ic.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function ic(e,t){if(Kl=-1,Jl=0,6&Cl)throw Error(a(327));var n=e.callbackNode;if(Ac()&&e.callbackNode!==n)return null;var r=ft(e,e===Sl?Dl:0);if(0===r)return null;if(30&r||r&e.expiredLanes||t)t=mc(e,r);else{t=r;var i=Cl;Cl|=2;var o=pc();for(Sl===e&&Dl===t||(Yl=null,Hl=Ge()+500,fc(e,t));;)try{yc();break}catch(t){hc(e,t)}Ma(),El.current=o,Cl=i,null!==Pl?t=0:(Sl=null,Dl=0,t=Bl)}if(0!==t){if(2===t&&0!==(i=pt(e))&&(r=i,t=ac(e,i)),1===t)throw n=Nl,fc(e,0),sc(e,r),rc(e,Ge()),n;if(6===t)sc(e,r);else{if(i=e.current.alternate,!(30&r||function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var i=n[r],a=i.getSnapshot;i=i.value;try{if(!sr(a(),i))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(i)||(t=mc(e,r),2===t&&(o=pt(e),0!==o&&(r=o,t=ac(e,o))),1!==t)))throw n=Nl,fc(e,0),sc(e,r),rc(e,Ge()),n;switch(e.finishedWork=i,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:wc(e,Rl,Yl);break;case 3:if(sc(e,r),(130023424&r)===r&&10<(t=Wl+500-Ge())){if(0!==ft(e,0))break;if(((i=e.suspendedLanes)&r)!==r){ec(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=ri(wc.bind(null,e,Rl,Yl),t);break}wc(e,Rl,Yl);break;case 4:if(sc(e,r),(4194240&r)===r)break;for(t=e.eventTimes,i=-1;0<r;){var s=31-ot(r);o=1<<s,(s=t[s])>i&&(i=s),r&=~o}if(r=i,10<(r=(120>(r=Ge()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*kl(r/1960))-r)){e.timeoutHandle=ri(wc.bind(null,e,Rl,Yl),r);break}wc(e,Rl,Yl);break;default:throw Error(a(329))}}}return rc(e,Ge()),e.callbackNode===n?ic.bind(null,e):null}function ac(e,t){var n=Fl;return e.current.memoizedState.isDehydrated&&(fc(e,t).flags|=256),2!==(e=mc(e,t))&&(t=Rl,Rl=n,null!==t&&oc(t)),e}function oc(e){null===Rl?Rl=e:Rl.push.apply(Rl,e)}function sc(e,t){for(t&=~zl,t&=~Ll,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-ot(t),r=1<<n;e[n]=-1,t&=~r}}function lc(e){if(6&Cl)throw Error(a(327));Ac();var t=ft(e,0);if(!(1&t))return rc(e,Ge()),null;var n=mc(e,t);if(0!==e.tag&&2===n){var r=pt(e);0!==r&&(t=r,n=ac(e,r))}if(1===n)throw n=Nl,fc(e,0),sc(e,t),rc(e,Ge()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,wc(e,Rl,Yl),rc(e,Ge()),null}function cc(e,t){var n=Cl;Cl|=1;try{return e(t)}finally{0===(Cl=n)&&(Hl=Ge()+500,Fi&&Hi())}}function uc(e){null!==Ql&&0===Ql.tag&&!(6&Cl)&&Ac();var t=Cl;Cl|=1;var n=Ol.transition,r=vt;try{if(Ol.transition=null,vt=1,e)return e()}finally{vt=r,Ol.transition=n,!(6&(Cl=t))&&Hi()}}function dc(){jl=Tl.current,Ei(Tl)}function fc(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,ii(n)),null!==Pl)for(n=Pl.return;null!==n;){var r=n;switch(ta(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Ti();break;case 3:Xa(),Ei(Si),Ei(Ci),no();break;case 5:Ka(r);break;case 4:Xa();break;case 13:case 19:Ei(Ja);break;case 10:Oa(r.type._context);break;case 22:case 23:dc()}n=n.return}if(Sl=e,Pl=e=Tc(e.current,null),Dl=jl=t,Bl=0,Nl=null,zl=Ll=Il=0,Rl=Fl=null,null!==Da){for(t=0;t<Da.length;t++)if(null!==(r=(n=Da[t]).interleaved)){n.interleaved=null;var i=r.next,a=n.pending;if(null!==a){var o=a.next;a.next=i,r.next=o}n.pending=r}Da=null}return e}function hc(e,t){for(;;){var n=Pl;try{if(Ma(),ro.current=Ko,co){for(var r=oo.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}co=!1}if(ao=0,lo=so=oo=null,uo=!1,fo=0,Ml.current=null,null===n||null===n.return){Bl=1,Nl=t,Pl=null;break}e:{var o=e,s=n.return,l=n,c=t;if(t=Dl,l.flags|=32768,null!==c&&"object"==typeof c&&"function"==typeof c.then){var u=c,d=l,f=d.tag;if(!(1&d.mode||0!==f&&11!==f&&15!==f)){var h=d.alternate;h?(d.updateQueue=h.updateQueue,d.memoizedState=h.memoizedState,d.lanes=h.lanes):(d.updateQueue=null,d.memoizedState=null)}var p=ms(s);if(null!==p){p.flags&=-257,bs(p,s,l,0,t),1&p.mode&&gs(o,u,t),c=u;var g=(t=p).updateQueue;if(null===g){var m=new Set;m.add(c),t.updateQueue=m}else g.add(c);break e}if(!(1&t)){gs(o,u,t),gc();break e}c=Error(a(426))}else if(ia&&1&l.mode){var b=ms(s);if(null!==b){!(65536&b.flags)&&(b.flags|=256),bs(b,s,l,0,t),pa(cs(c,l));break e}}o=c=cs(c,l),4!==Bl&&(Bl=2),null===Fl?Fl=[o]:Fl.push(o),o=s;do{switch(o.tag){case 3:o.flags|=65536,t&=-t,o.lanes|=t,Wa(o,hs(0,c,t));break e;case 1:l=c;var y=o.type,v=o.stateNode;if(!(128&o.flags||"function"!=typeof y.getDerivedStateFromError&&(null===v||"function"!=typeof v.componentDidCatch||null!==$l&&$l.has(v)))){o.flags|=65536,t&=-t,o.lanes|=t,Wa(o,ps(o,l,t));break e}}o=o.return}while(null!==o)}xc(n)}catch(e){t=e,Pl===n&&null!==n&&(Pl=n=n.return);continue}break}}function pc(){var e=El.current;return El.current=Ko,null===e?Ko:e}function gc(){0!==Bl&&3!==Bl&&2!==Bl||(Bl=4),null===Sl||!(268435455&Il)&&!(268435455&Ll)||sc(Sl,Dl)}function mc(e,t){var n=Cl;Cl|=2;var r=pc();for(Sl===e&&Dl===t||(Yl=null,fc(e,t));;)try{bc();break}catch(t){hc(e,t)}if(Ma(),Cl=n,El.current=r,null!==Pl)throw Error(a(261));return Sl=null,Dl=0,Bl}function bc(){for(;null!==Pl;)vc(Pl)}function yc(){for(;null!==Pl&&!Ze();)vc(Pl)}function vc(e){var t=_l(e.alternate,e,jl);e.memoizedProps=e.pendingProps,null===t?xc(e):Pl=t,Ml.current=null}function xc(e){var t=e;do{var n=t.alternate;if(e=t.return,32768&t.flags){if(null!==(n=Qs(n,t)))return n.flags&=32767,void(Pl=n);if(null===e)return Bl=6,void(Pl=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}else if(null!==(n=qs(n,t,jl)))return void(Pl=n);if(null!==(t=t.sibling))return void(Pl=t);Pl=t=e}while(null!==t);0===Bl&&(Bl=5)}function wc(e,t,n){var r=vt,i=Ol.transition;try{Ol.transition=null,vt=1,function(e,t,n,r){do{Ac()}while(null!==Ql);if(6&Cl)throw Error(a(327));n=e.finishedWork;var i=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var o=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var i=31-ot(n),a=1<<i;t[i]=0,r[i]=-1,e[i]=-1,n&=~a}}(e,o),e===Sl&&(Pl=Sl=null,Dl=0),!(2064&n.subtreeFlags)&&!(2064&n.flags)||ql||(ql=!0,Sc(tt,(function(){return Ac(),null}))),o=!!(15990&n.flags),15990&n.subtreeFlags||o){o=Ol.transition,Ol.transition=null;var s=vt;vt=1;var l=Cl;Cl|=4,Ml.current=null,function(e,t){if(ei=Vt,hr(e=fr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var i=r.anchorOffset,o=r.focusNode;r=r.focusOffset;try{n.nodeType,o.nodeType}catch(e){n=null;break e}var s=0,l=-1,c=-1,u=0,d=0,f=e,h=null;t:for(;;){for(var p;f!==n||0!==i&&3!==f.nodeType||(l=s+i),f!==o||0!==r&&3!==f.nodeType||(c=s+r),3===f.nodeType&&(s+=f.nodeValue.length),null!==(p=f.firstChild);)h=f,f=p;for(;;){if(f===e)break t;if(h===n&&++u===i&&(l=s),h===o&&++d===r&&(c=s),null!==(p=f.nextSibling))break;h=(f=h).parentNode}f=p}n=-1===l||-1===c?null:{start:l,end:c}}else n=null}n=n||{start:0,end:0}}else n=null;for(ti={focusedElem:e,selectionRange:n},Vt=!1,Ks=t;null!==Ks;)if(e=(t=Ks).child,1028&t.subtreeFlags&&null!==e)e.return=t,Ks=e;else for(;null!==Ks;){t=Ks;try{var g=t.alternate;if(1024&t.flags)switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==g){var m=g.memoizedProps,b=g.memoizedState,y=t.stateNode,v=y.getSnapshotBeforeUpdate(t.elementType===t.type?m:ns(t.type,m),b);y.__reactInternalSnapshotBeforeUpdate=v}break;case 3:var x=t.stateNode.containerInfo;1===x.nodeType?x.textContent="":9===x.nodeType&&x.documentElement&&x.removeChild(x.documentElement);break;default:throw Error(a(163))}}catch(e){kc(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,Ks=e;break}Ks=t.return}g=tl,tl=!1}(e,n),ml(n,e),pr(ti),Vt=!!ei,ti=ei=null,e.current=n,yl(n,e,i),Xe(),Cl=l,vt=s,Ol.transition=o}else e.current=n;if(ql&&(ql=!1,Ql=e,Zl=i),0===(o=e.pendingLanes)&&($l=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(it,e,void 0,!(128&~e.current.flags))}catch(e){}}(n.stateNode),rc(e,Ge()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((i=t[n]).value,{componentStack:i.stack,digest:i.digest});if(Vl)throw Vl=!1,e=Ul,Ul=null,e;!!(1&Zl)&&0!==e.tag&&Ac(),1&(o=e.pendingLanes)?e===Gl?Xl++:(Xl=0,Gl=e):Xl=0,Hi()}(e,t,n,r)}finally{Ol.transition=i,vt=r}return null}function Ac(){if(null!==Ql){var e=xt(Zl),t=Ol.transition,n=vt;try{if(Ol.transition=null,vt=16>e?16:e,null===Ql)var r=!1;else{if(e=Ql,Ql=null,Zl=0,6&Cl)throw Error(a(331));var i=Cl;for(Cl|=4,Ks=e.current;null!==Ks;){var o=Ks,s=o.child;if(16&Ks.flags){var l=o.deletions;if(null!==l){for(var c=0;c<l.length;c++){var u=l[c];for(Ks=u;null!==Ks;){var d=Ks;switch(d.tag){case 0:case 11:case 15:nl(8,d,o)}var f=d.child;if(null!==f)f.return=d,Ks=f;else for(;null!==Ks;){var h=(d=Ks).sibling,p=d.return;if(al(d),d===u){Ks=null;break}if(null!==h){h.return=p,Ks=h;break}Ks=p}}}var g=o.alternate;if(null!==g){var m=g.child;if(null!==m){g.child=null;do{var b=m.sibling;m.sibling=null,m=b}while(null!==m)}}Ks=o}}if(2064&o.subtreeFlags&&null!==s)s.return=o,Ks=s;else e:for(;null!==Ks;){if(2048&(o=Ks).flags)switch(o.tag){case 0:case 11:case 15:nl(9,o,o.return)}var y=o.sibling;if(null!==y){y.return=o.return,Ks=y;break e}Ks=o.return}}var v=e.current;for(Ks=v;null!==Ks;){var x=(s=Ks).child;if(2064&s.subtreeFlags&&null!==x)x.return=s,Ks=x;else e:for(s=v;null!==Ks;){if(2048&(l=Ks).flags)try{switch(l.tag){case 0:case 11:case 15:rl(9,l)}}catch(e){kc(l,l.return,e)}if(l===s){Ks=null;break e}var w=l.sibling;if(null!==w){w.return=l.return,Ks=w;break e}Ks=l.return}}if(Cl=i,Hi(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{vt=n,Ol.transition=t}}return!1}function _c(e,t,n){e=Fa(e,t=hs(0,t=cs(n,t),1),1),t=ec(),null!==e&&(bt(e,1,t),rc(e,t))}function kc(e,t,n){if(3===e.tag)_c(e,e,n);else for(;null!==t;){if(3===t.tag){_c(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$l||!$l.has(r))){t=Fa(t,e=ps(t,e=cs(n,e),1),1),e=ec(),null!==t&&(bt(t,1,e),rc(t,e));break}}t=t.return}}function Ec(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ec(),e.pingedLanes|=e.suspendedLanes&n,Sl===e&&(Dl&n)===n&&(4===Bl||3===Bl&&(130023424&Dl)===Dl&&500>Ge()-Wl?fc(e,0):zl|=n),rc(e,t)}function Mc(e,t){0===t&&(1&e.mode?(t=ut,!(130023424&(ut<<=1))&&(ut=4194304)):t=1);var n=ec();null!==(e=Ba(e,t))&&(bt(e,t,n),rc(e,n))}function Oc(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),Mc(e,n)}function Cc(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,i=e.memoizedState;null!==i&&(n=i.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),Mc(e,n)}function Sc(e,t){return qe(e,t)}function Pc(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Dc(e,t,n,r){return new Pc(e,t,n,r)}function jc(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tc(e,t){var n=e.alternate;return null===n?((n=Dc(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Bc(e,t,n,r,i,o){var s=2;if(r=e,"function"==typeof e)jc(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case _:return Nc(n.children,i,o,t);case k:s=8,i|=8;break;case E:return(e=Dc(12,n,t,2|i)).elementType=E,e.lanes=o,e;case S:return(e=Dc(13,n,t,i)).elementType=S,e.lanes=o,e;case P:return(e=Dc(19,n,t,i)).elementType=P,e.lanes=o,e;case T:return Ic(n,i,o,t);default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case M:s=10;break e;case O:s=9;break e;case C:s=11;break e;case D:s=14;break e;case j:s=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Dc(s,n,t,i)).elementType=e,t.type=r,t.lanes=o,t}function Nc(e,t,n,r){return(e=Dc(7,e,r,t)).lanes=n,e}function Ic(e,t,n,r){return(e=Dc(22,e,r,t)).elementType=T,e.lanes=n,e.stateNode={isHidden:!1},e}function Lc(e,t,n){return(e=Dc(6,e,null,t)).lanes=n,e}function zc(e,t,n){return(t=Dc(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fc(e,t,n,r,i){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=i,this.mutableSourceEagerHydrationData=null}function Rc(e,t,n,r,i,a,o,s,l){return e=new Fc(e,t,n,s,l),1===t?(t=1,!0===a&&(t|=8)):t=0,a=Dc(3,null,null,t),e.current=a,a.stateNode=e,a.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Ia(a),e}function Wc(e){if(!e)return Oi;e:{if(He(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(ji(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(ji(n))return Ni(e,n,t)}return t}function Hc(e,t,n,r,i,a,o,s,l){return(e=Rc(n,r,!0,e,0,a,0,s,l)).context=Wc(null),n=e.current,(a=za(r=ec(),i=tc(n))).callback=null!=t?t:null,Fa(n,a,i),e.current.lanes=i,bt(e,i,r),rc(e,r),e}function Yc(e,t,n,r){var i=t.current,a=ec(),o=tc(i);return n=Wc(n),null===t.context?t.context=n:t.pendingContext=n,(t=za(a,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Fa(i,t,o))&&(nc(e,i,o,a),Ra(e,i,o)),o}function Vc(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Uc(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function $c(e,t){Uc(e,t),(e=e.alternate)&&Uc(e,t)}_l=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||Si.current)vs=!0;else{if(!(e.lanes&n||128&t.flags))return vs=!1,function(e,t,n){switch(t.tag){case 3:Ss(t),ha();break;case 5:Ga(t);break;case 1:ji(t.type)&&Ii(t);break;case 4:Za(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,i=t.memoizedProps.value;Mi(Aa,r._currentValue),r._currentValue=i;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(Mi(Ja,1&Ja.current),t.flags|=128,null):n&t.child.childLanes?Ls(e,t,n):(Mi(Ja,1&Ja.current),null!==(e=Vs(e,t,n))?e.sibling:null);Mi(Ja,1&Ja.current);break;case 19:if(r=!!(n&t.childLanes),128&e.flags){if(r)return Hs(e,t,n);t.flags|=128}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),Mi(Ja,Ja.current),r)break;return null;case 22:case 23:return t.lanes=0,ks(e,t,n)}return Vs(e,t,n)}(e,t,n);vs=!!(131072&e.flags)}else vs=!1,ia&&1048576&t.flags&&Ji(t,$i,t.index);switch(t.lanes=0,t.tag){case 2:var r=t.type;Ys(e,t),e=t.pendingProps;var i=Di(t,Ci.current);Sa(t,n),i=mo(null,t,r,e,i,n);var o=bo();return t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,ji(r)?(o=!0,Ii(t)):o=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Ia(t),i.updater=is,t.stateNode=i,i._reactInternals=t,ls(t,r,e,n),t=Cs(null,t,r,!0,o,n)):(t.tag=0,ia&&o&&ea(t),xs(null,t,i,n),t=t.child),t;case 16:r=t.elementType;e:{switch(Ys(e,t),e=t.pendingProps,r=(i=r._init)(r._payload),t.type=r,i=t.tag=function(e){if("function"==typeof e)return jc(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===D)return 14}return 2}(r),e=ns(r,e),i){case 0:t=Ms(null,t,r,e,n);break e;case 1:t=Os(null,t,r,e,n);break e;case 11:t=ws(null,t,r,e,n);break e;case 14:t=As(null,t,r,ns(r.type,e),n);break e}throw Error(a(306,r,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ms(e,t,r,i=t.elementType===r?i:ns(r,i),n);case 1:return r=t.type,i=t.pendingProps,Os(e,t,r,i=t.elementType===r?i:ns(r,i),n);case 3:e:{if(Ss(t),null===e)throw Error(a(387));r=t.pendingProps,i=(o=t.memoizedState).element,La(e,t),Ha(t,r,null,n);var s=t.memoizedState;if(r=s.element,o.isDehydrated){if(o={element:r,isDehydrated:!1,cache:s.cache,pendingSuspenseBoundaries:s.pendingSuspenseBoundaries,transitions:s.transitions},t.updateQueue.baseState=o,t.memoizedState=o,256&t.flags){t=Ps(e,t,r,n,i=cs(Error(a(423)),t));break e}if(r!==i){t=Ps(e,t,r,n,i=cs(Error(a(424)),t));break e}for(ra=ci(t.stateNode.containerInfo.firstChild),na=t,ia=!0,aa=null,n=wa(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(ha(),r===i){t=Vs(e,t,n);break e}xs(e,t,r,n)}t=t.child}return t;case 5:return Ga(t),null===e&&ca(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,s=i.children,ni(r,i)?s=null:null!==o&&ni(r,o)&&(t.flags|=32),Es(e,t),xs(e,t,s,n),t.child;case 6:return null===e&&ca(t),null;case 13:return Ls(e,t,n);case 4:return Za(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=xa(t,null,r,n):xs(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,ws(e,t,r,i=t.elementType===r?i:ns(r,i),n);case 7:return xs(e,t,t.pendingProps,n),t.child;case 8:case 12:return xs(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,o=t.memoizedProps,s=i.value,Mi(Aa,r._currentValue),r._currentValue=s,null!==o)if(sr(o.value,s)){if(o.children===i.children&&!Si.current){t=Vs(e,t,n);break e}}else for(null!==(o=t.child)&&(o.return=t);null!==o;){var l=o.dependencies;if(null!==l){s=o.child;for(var c=l.firstContext;null!==c;){if(c.context===r){if(1===o.tag){(c=za(-1,n&-n)).tag=2;var u=o.updateQueue;if(null!==u){var d=(u=u.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),u.pending=c}}o.lanes|=n,null!==(c=o.alternate)&&(c.lanes|=n),Ca(o.return,n,t),l.lanes|=n;break}c=c.next}}else if(10===o.tag)s=o.type===t.type?null:o.child;else if(18===o.tag){if(null===(s=o.return))throw Error(a(341));s.lanes|=n,null!==(l=s.alternate)&&(l.lanes|=n),Ca(s,n,t),s=o.sibling}else s=o.child;if(null!==s)s.return=o;else for(s=o;null!==s;){if(s===t){s=null;break}if(null!==(o=s.sibling)){o.return=s.return,s=o;break}s=s.return}o=s}xs(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=t.pendingProps.children,Sa(t,n),r=r(i=Pa(i)),t.flags|=1,xs(e,t,r,n),t.child;case 14:return i=ns(r=t.type,t.pendingProps),As(e,t,r,i=ns(r.type,i),n);case 15:return _s(e,t,t.type,t.pendingProps,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:ns(r,i),Ys(e,t),t.tag=1,ji(r)?(e=!0,Ii(t)):e=!1,Sa(t,n),os(t,r,i),ls(t,r,i,n),Cs(null,t,r,!0,e,n);case 19:return Hs(e,t,n);case 22:return ks(e,t,n)}throw Error(a(156,t.tag))};var qc="function"==typeof reportError?reportError:function(e){console.error(e)};function Qc(e){this._internalRoot=e}function Zc(e){this._internalRoot=e}function Xc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Gc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Kc(){}function Jc(e,t,n,r,i){var a=n._reactRootContainer;if(a){var o=a;if("function"==typeof i){var s=i;i=function(){var e=Vc(o);s.call(e)}}Yc(t,o,e,i)}else o=function(e,t,n,r,i){if(i){if("function"==typeof r){var a=r;r=function(){var e=Vc(o);a.call(e)}}var o=Hc(t,r,e,0,null,!1,0,"",Kc);return e._reactRootContainer=o,e[pi]=o.current,Hr(8===e.nodeType?e.parentNode:e),uc(),o}for(;i=e.lastChild;)e.removeChild(i);if("function"==typeof r){var s=r;r=function(){var e=Vc(l);s.call(e)}}var l=Rc(e,0,!1,null,0,!1,0,"",Kc);return e._reactRootContainer=l,e[pi]=l.current,Hr(8===e.nodeType?e.parentNode:e),uc((function(){Yc(t,l,n,r)})),l}(n,t,e,i,r);return Vc(o)}Zc.prototype.render=Qc.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Yc(e,t,null,null)},Zc.prototype.unmount=Qc.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;uc((function(){Yc(null,e,null,null)})),t[pi]=null}},Zc.prototype.unstable_scheduleHydration=function(e){if(e){var t=kt();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Tt.length&&0!==t&&t<Tt[n].priority;n++);Tt.splice(n,0,e),0===n&&Lt(e)}},wt=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(yt(t,1|n),rc(t,Ge()),!(6&Cl)&&(Hl=Ge()+500,Hi()))}break;case 13:uc((function(){var t=Ba(e,1);if(null!==t){var n=ec();nc(t,e,1,n)}})),$c(e,1)}},At=function(e){if(13===e.tag){var t=Ba(e,134217728);null!==t&&nc(t,e,134217728,ec()),$c(e,134217728)}},_t=function(e){if(13===e.tag){var t=tc(e),n=Ba(e,t);null!==n&&nc(n,e,t,ec()),$c(e,t)}},kt=function(){return vt},Et=function(e,t){var n=vt;try{return vt=e,t()}finally{vt=n}},Ae=function(e,t,n){switch(t){case"input":if(K(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=wi(r);if(!i)throw Error(a(90));q(r),K(r,i)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&ne(e,!!n.multiple,t,!1)}},Ce=cc,Se=uc;var eu={usingClientEntryPoint:!1,Events:[vi,xi,wi,Me,Oe,cc]},tu={findFiberByHostInstance:yi,bundleType:0,version:"18.3.1",rendererPackageName:"react-dom"},nu={bundleType:tu.bundleType,version:tu.version,rendererPackageName:tu.rendererPackageName,rendererConfig:tu.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:x.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ue(e))?null:e.stateNode},findFiberByHostInstance:tu.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.3.1-next-f1338f8080-20240426"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ru=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ru.isDisabled&&ru.supportsFiber)try{it=ru.inject(nu),at=ru}catch(ue){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=eu,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xc(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:A,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xc(e))throw Error(a(299));var n=!1,r="",i=qc;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(i=t.onRecoverableError)),t=Rc(e,1,!1,null,0,n,0,r,i),e[pi]=t.current,Hr(8===e.nodeType?e.parentNode:e),new Qc(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=Ue(t))?null:e.stateNode},t.flushSync=function(e){return uc(e)},t.hydrate=function(e,t,n){if(!Gc(t))throw Error(a(200));return Jc(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xc(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,i=!1,o="",s=qc;if(null!=n&&(!0===n.unstable_strictMode&&(i=!0),void 0!==n.identifierPrefix&&(o=n.identifierPrefix),void 0!==n.onRecoverableError&&(s=n.onRecoverableError)),t=Hc(t,null,e,1,null!=n?n:null,i,0,o,s),e[pi]=t.current,Hr(e),r)for(e=0;e<r.length;e++)i=(i=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,i]:t.mutableSourceEagerHydrationData.push(n,i);return new Zc(t)},t.render=function(e,t,n){if(!Gc(t))throw Error(a(200));return Jc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Gc(e))throw Error(a(40));return!!e._reactRootContainer&&(uc((function(){Jc(null,null,e,!1,(function(){e._reactRootContainer=null,e[pi]=null}))})),!0)},t.unstable_batchedUpdates=cc,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Gc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return Jc(e,t,n,!1,r)},t.version="18.3.1-next-f1338f8080-20240426"},5338:(e,t,n)=>{"use strict";var r=n(961);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(2551)},1020:(e,t,n)=>{"use strict";var r=n(6540),i=Symbol.for("react.element"),a=Symbol.for("react.fragment"),o=Object.prototype.hasOwnProperty,s=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,a={},c=null,u=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)o.call(t,r)&&!l.hasOwnProperty(r)&&(a[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===a[r]&&(a[r]=t[r]);return{$$typeof:i,type:e,key:c,ref:u,props:a,_owner:s.current}}t.Fragment=a,t.jsx=c,t.jsxs=c},5287:(e,t)=>{"use strict";var n=Symbol.for("react.element"),r=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),o=Symbol.for("react.profiler"),s=Symbol.for("react.provider"),l=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),u=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),f=Symbol.for("react.lazy"),h=Symbol.iterator,p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g=Object.assign,m={};function b(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}function y(){}function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||p}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=b.prototype;var x=v.prototype=new y;x.constructor=v,g(x,b.prototype),x.isPureReactComponent=!0;var w=Array.isArray,A=Object.prototype.hasOwnProperty,_={current:null},k={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,r){var i,a={},o=null,s=null;if(null!=t)for(i in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(o=""+t.key),t)A.call(t,i)&&!k.hasOwnProperty(i)&&(a[i]=t[i]);var l=arguments.length-2;if(1===l)a.children=r;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];a.children=c}if(e&&e.defaultProps)for(i in l=e.defaultProps)void 0===a[i]&&(a[i]=l[i]);return{$$typeof:n,type:e,key:o,ref:s,props:a,_owner:_.current}}function M(e){return"object"==typeof e&&null!==e&&e.$$typeof===n}var O=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function S(e,t,i,a,o){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case n:case r:l=!0}}if(l)return o=o(l=e),e=""===a?"."+C(l,0):a,w(o)?(i="",null!=e&&(i=e.replace(O,"$&/")+"/"),S(o,t,i,"",(function(e){return e}))):null!=o&&(M(o)&&(o=function(e,t){return{$$typeof:n,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(o,i+(!o.key||l&&l.key===o.key?"":(""+o.key).replace(O,"$&/")+"/")+e)),t.push(o)),1;if(l=0,a=""===a?".":a+":",w(e))for(var c=0;c<e.length;c++){var u=a+C(s=e[c],c);l+=S(s,t,i,u,o)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=S(s=s.value,t,i,u=a+C(s,c++),o);else if("object"===s)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return l}function P(e,t,n){if(null==e)return e;var r=[],i=0;return S(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function D(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var j={current:null},T={transition:null},B={ReactCurrentDispatcher:j,ReactCurrentBatchConfig:T,ReactCurrentOwner:_};function N(){throw Error("act(...) is not supported in production builds of React.")}t.Children={map:P,forEach:function(e,t,n){P(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return P(e,(function(){t++})),t},toArray:function(e){return P(e,(function(e){return e}))||[]},only:function(e){if(!M(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=b,t.Fragment=i,t.Profiler=o,t.PureComponent=v,t.StrictMode=a,t.Suspense=u,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B,t.act=N,t.cloneElement=function(e,t,r){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var i=g({},e.props),a=e.key,o=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,s=_.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)A.call(t,c)&&!k.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=r;else if(1<c){l=Array(c);for(var u=0;u<c;u++)l[u]=arguments[u+2];i.children=l}return{$$typeof:n,type:e.type,key:a,ref:o,props:i,_owner:s}},t.createContext=function(e){return(e={$$typeof:l,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=M,t.lazy=function(e){return{$$typeof:f,_payload:{_status:-1,_result:e},_init:D}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=T.transition;T.transition={};try{e()}finally{T.transition=t}},t.unstable_act=N,t.useCallback=function(e,t){return j.current.useCallback(e,t)},t.useContext=function(e){return j.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return j.current.useDeferredValue(e)},t.useEffect=function(e,t){return j.current.useEffect(e,t)},t.useId=function(){return j.current.useId()},t.useImperativeHandle=function(e,t,n){return j.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return j.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return j.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return j.current.useMemo(e,t)},t.useReducer=function(e,t,n){return j.current.useReducer(e,t,n)},t.useRef=function(e){return j.current.useRef(e)},t.useState=function(e){return j.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return j.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return j.current.useTransition()},t.version="18.3.1"},6540:(e,t,n)=>{"use strict";e.exports=n(5287)},4848:(e,t,n)=>{"use strict";e.exports=n(1020)},7463:(e,t)=>{"use strict";function n(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,i=e[r];if(!(0<a(i,t)))break e;e[r]=t,e[n]=i,n=r}}function r(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length,o=i>>>1;r<o;){var s=2*(r+1)-1,l=e[s],c=s+1,u=e[c];if(0>a(l,n))c<i&&0>a(u,l)?(e[r]=u,e[c]=n,r=c):(e[r]=l,e[s]=n,r=s);else{if(!(c<i&&0>a(u,n)))break e;e[r]=u,e[c]=n,r=c}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"==typeof performance&&"function"==typeof performance.now){var o=performance;t.unstable_now=function(){return o.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}var c=[],u=[],d=1,f=null,h=3,p=!1,g=!1,m=!1,b="function"==typeof setTimeout?setTimeout:null,y="function"==typeof clearTimeout?clearTimeout:null,v="undefined"!=typeof setImmediate?setImmediate:null;function x(e){for(var t=r(u);null!==t;){if(null===t.callback)i(u);else{if(!(t.startTime<=e))break;i(u),t.sortIndex=t.expirationTime,n(c,t)}t=r(u)}}function w(e){if(m=!1,x(e),!g)if(null!==r(c))g=!0,T(A);else{var t=r(u);null!==t&&B(w,t.startTime-e)}}function A(e,n){g=!1,m&&(m=!1,y(M),M=-1),p=!0;var a=h;try{for(x(n),f=r(c);null!==f&&(!(f.expirationTime>n)||e&&!S());){var o=f.callback;if("function"==typeof o){f.callback=null,h=f.priorityLevel;var s=o(f.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?f.callback=s:f===r(c)&&i(c),x(n)}else i(c);f=r(c)}if(null!==f)var l=!0;else{var d=r(u);null!==d&&B(w,d.startTime-n),l=!1}return l}finally{f=null,h=a,p=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var _,k=!1,E=null,M=-1,O=5,C=-1;function S(){return!(t.unstable_now()-C<O)}function P(){if(null!==E){var e=t.unstable_now();C=e;var n=!0;try{n=E(!0,e)}finally{n?_():(k=!1,E=null)}}else k=!1}if("function"==typeof v)_=function(){v(P)};else if("undefined"!=typeof MessageChannel){var D=new MessageChannel,j=D.port2;D.port1.onmessage=P,_=function(){j.postMessage(null)}}else _=function(){b(P,0)};function T(e){E=e,k||(k=!0,_())}function B(e,n){M=b((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){g||p||(g=!0,T(A))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):O=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return h},t.unstable_getFirstCallbackNode=function(){return r(c)},t.unstable_next=function(e){switch(h){case 1:case 2:case 3:var t=3;break;default:t=h}var n=h;h=t;try{return e()}finally{h=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=h;h=e;try{return t()}finally{h=n}},t.unstable_scheduleCallback=function(e,i,a){var o=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?o+a:o,e){case 1:var s=-1;break;case 2:s=250;break;case 5:s=1073741823;break;case 4:s=1e4;break;default:s=5e3}return e={id:d++,callback:i,priorityLevel:e,startTime:a,expirationTime:s=a+s,sortIndex:-1},a>o?(e.sortIndex=a,n(u,e),null===r(c)&&e===r(u)&&(m?(y(M),M=-1):m=!0,B(w,a-o))):(e.sortIndex=s,n(c,e),g||p||(g=!0,T(A))),e},t.unstable_shouldYield=S,t.unstable_wrapCallback=function(e){var t=h;return function(){var n=h;h=t;try{return e.apply(this,arguments)}finally{h=n}}}},9982:(e,t,n)=>{"use strict";e.exports=n(7463)},6685:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>b});var r=n(5072),i=n.n(r),a=n(7825),o=n.n(a),s=n(7659),l=n.n(s),c=n(5056),u=n.n(c),d=n(540),f=n.n(d),h=n(1113),p=n.n(h),g=n(7720),m={};m.styleTagTransform=p(),m.setAttributes=u(),m.insert=l().bind(null,"head"),m.domAPI=o(),m.insertStyleElement=f(),i()(g.A,m);const b=g.A&&g.A.locals?g.A.locals:void 0},5072:e=>{"use strict";var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},o=[],s=0;s<e.length;s++){var l=e[s],c=r.base?l[0]+r.base:l[0],u=a[c]||0,d="".concat(c," ").concat(u);a[c]=u+1;var f=n(d),h={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==f)t[f].references++,t[f].updater(h);else{var p=i(h,r);r.byIndex=s,t.splice(s,0,{identifier:d,updater:p,references:1})}o.push(d)}return o}function i(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,i){var a=r(e=e||[],i=i||{});return function(e){e=e||[];for(var o=0;o<a.length;o++){var s=n(a[o]);t[s].references--}for(var l=r(e,i),c=0;c<a.length;c++){var u=n(a[c]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}a=l}}},7659:e=>{"use strict";var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},540:e=>{"use strict";e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},5056:(e,t,n)=>{"use strict";e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},7825:e=>{"use strict";e.exports=function(e){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var i=void 0!==n.layer;i&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,i&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},1113:e=>{"use strict";e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}},8897:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{l(r.next(e))}catch(e){a(e)}}function s(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}l((r=r.apply(e,t||[])).next())}))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const a=n(4848);n(6685);const o=n(6540),s=i(n(99)),l=i(n(9428)),c=i(n(7799)),u=i(n(7409));t.default=function(){const[e,t]=(0,o.useState)(""),[n,i]=(0,o.useState)([]);return(0,a.jsxs)("main",{className:"flex flex-col h-screen",children:[(0,a.jsx)("h1",{className:"text-4xl font-bold text-center text-blue-600 my-4",children:"Renderabl"}),(0,a.jsx)("div",{className:"flex-grow overflow-y-auto px-4",children:n.map((e=>function(e){return"string"===e.cardType?"user"===e.role?(0,a.jsx)("div",{className:"flex flex-row-reverse",children:(0,a.jsx)("p",{className:"message "+e.role+" inline-block mt-8 p-2 mr-4",children:e.content})}):(0,a.jsx)("div",{className:"flex",children:(0,a.jsx)("p",{className:"message "+e.role+" inline-block mt-8 p-4",children:e.content})}):"person"===e.cardType?(0,a.jsx)("div",{className:"flex justify-start",children:(0,a.jsx)("p",{className:"inline-block mt-8 p-4",children:(0,a.jsx)(s.default,Object.assign({},e.personCard))})}):"graph"===e.cardType?(0,a.jsx)("div",{children:(0,a.jsx)(l.default,Object.assign({},e.graph))}):"player"===e.cardType?(0,a.jsx)("div",{className:"flex justify-start",children:(0,a.jsx)("p",{className:"inline-block mt-8 p-4",children:(0,a.jsx)(c.default,Object.assign({},e.golfPlayerCard,{messages:n,setMessages:i}))})}):"tournament"===e.cardType?(0,a.jsx)("div",{className:"flex justify-start",children:(0,a.jsx)("p",{className:"inline-block mt-8 p-4",children:(0,a.jsx)(u.default,Object.assign({},e.golfTournamentCard,{messages:n,setMessages:i}))})}):void 0}(e)))}),(0,a.jsxs)("form",{className:"flex justify-between px-4 mt-8 pb-4",onSubmit:a=>r(this,void 0,void 0,(function*(){a.preventDefault(),t("");const r=""!==e.trim()?[...n,{role:"user",content:e,cardType:"string"}]:n;i(r);const o=yield fetch("http://localhost:5500/api/openai",{method:"POST",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:r})}),s=JSON.parse(yield o.text());i([...r,s])})),children:[(0,a.jsx)("input",{type:"text",className:"mr-4 flex-grow leading-8 border rounded-md p-2",placeholder:"Enter your message here!",value:e,onChange:e=>t(e.currentTarget.value)}),(0,a.jsx)("input",{type:"submit",className:"border rounded-md p-2 bg-gray-200",value:"Send"})]})]})}},7799:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{l(r.next(e))}catch(e){a(e)}}function s(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}l((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const i=n(4848),a=n(6540);t.default=({name:e,year:t,height:n,birthday:o,rank:s,tour:l,alma_mater:c,hometown:u,recent_win:d,first_win:f,profilePictureUrl:h,sponsor:p,clubs:g,ball:m,messages:b,setMessages:y})=>{const v=(e=>{switch(e){case"LIV":return"https://i0.wp.com/golfblogger.com/wp-content/uploads/2022/05/liv-golf-logo.png?ssl=1";case"PGA":return"https://upload.wikimedia.org/wikipedia/en/thumb/7/77/PGA_Tour_logo.svg/1200px-PGA_Tour_logo.svg.png";case"DP":return"https://sportspro.com/wp-content/uploads/2023/03/DP-World-Tour-Logo.png";case"LPGA":return"https://cdn.cookielaw.org/logos/9c8a7e84-2713-496b-bb8b-4ab1c7aa9853/01917b66-958c-71d8-80e3-efefcbc9cdc9/9ed04020-943b-462b-ac02-b19496f9ce72/BRD23_LOGO_-_FLAT_RGB_VERT_(1).png";case"Champions":return"https://upload.wikimedia.org/wikipedia/en/thumb/f/fe/PGA_Tour_Champions_logo.svg/640px-PGA_Tour_Champions_logo.svg.png"}return null})(l),x=(e=>{switch(e){case"TaylorMade":return"https://upload.wikimedia.org/wikipedia/commons/a/a0/TaylorMade.svg";case"Titleist":return"https://upload.wikimedia.org/wikipedia/commons/d/d6/Titleist_golf_logo.png";case"Callaway":return"https://upload.wikimedia.org/wikipedia/commons/thumb/8/89/Callaway_Golf_Company_logo.svg/2560px-Callaway_Golf_Company_logo.svg.png";case"Ping":return"https://upload.wikimedia.org/wikipedia/commons/3/37/Ping-logo.png";case"Mizuno":return"https://upload.wikimedia.org/wikipedia/commons/thumb/5/53/MIZUNO_logo.svg/2560px-MIZUNO_logo.svg.png";case"Srixon":return"https://upload.wikimedia.org/wikipedia/commons/f/f5/Srixon_golf_logo.PNG";case"Wilson":return"https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Wilson-logo.svg/1024px-Wilson-logo.svg.png";case"PXG":return"https://upload.wikimedia.org/wikipedia/commons/thumb/d/d8/PXG_Logo.svg/1280px-PXG_Logo.svg.png";case"Nike":return"https://logos-world.net/wp-content/uploads/2020/04/Nike-Logo.png";case"Adams":return"https://upload.wikimedia.org/wikipedia/commons/c/cb/Adams_golf_brand_logo.png"}return null})(p),w=e=>r(void 0,void 0,void 0,(function*(){const t=yield fetch("http://localhost:5500/api/openai",{method:"POST",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"user",content:e}]})}),n=JSON.parse(yield t.text());y([...b,n])})),[A,_]=(0,a.useState)(!1),[k,E]=(0,a.useState)(!1);return(0,i.jsxs)("div",{className:"max-w-md mx-auto bg-white shadow-lg rounded-lg overflow-hidden border border-gray-200",children:[h&&(0,i.jsx)("div",{className:"w-full h-64 bg-gray-100 overflow-hidden",children:(0,i.jsx)("img",{src:h,alt:`${e} profile`,className:"w-full h-full object-cover"})}),(0,i.jsxs)("div",{className:"bg-gray-100 p-4 flex items-center justify-between",children:[(0,i.jsxs)("div",{className:"flex items-center",children:[v&&(0,i.jsx)("img",{src:v,alt:"Tour Logo",className:"h-8 w-8 mr-2 object-contain"}),(0,i.jsxs)("div",{children:[(0,i.jsx)("h2",{className:"text-2xl font-semibold",children:t?e+" ("+t+")":e}),(0,i.jsxs)("p",{className:"text-sm text-gray-600",children:["Rank: ",s]})]})]}),x&&(0,i.jsx)("div",{children:(0,i.jsx)("img",{src:x,alt:`${p} Logo`,className:"h-8 w-16 object-contain"})})]}),(0,i.jsxs)("div",{className:"p-4",children:[(0,i.jsx)("div",{className:"text-sm text-gray-600 mb-2",children:(0,i.jsxs)("p",{children:[(0,i.jsx)("strong",{children:"Born:"})," ",o]})}),(0,i.jsxs)("div",{className:"grid grid-cols-2 gap-4 text-sm text-gray-600",children:[(0,i.jsxs)("div",{children:[(0,i.jsxs)("p",{children:[(0,i.jsx)("strong",{children:"Hometown:"})," ",u]}),(0,i.jsxs)("p",{children:[(0,i.jsx)("strong",{children:"Height:"})," ",n]})]}),(0,i.jsxs)("div",{children:[(0,i.jsxs)("p",{children:[(0,i.jsx)("strong",{children:"Alma Mater:"})," ",c]}),f&&(0,i.jsxs)("p",{onClick:()=>w(f),onMouseEnter:()=>_(!0),onMouseLeave:()=>_(!1),style:{cursor:"pointer",textDecoration:A?"underline":"none"},children:[(0,i.jsx)("strong",{children:"First Win:"})," ",f]}),d&&(0,i.jsxs)("p",{onClick:()=>w(d),onMouseEnter:()=>E(!0),onMouseLeave:()=>E(!1),style:{cursor:"pointer",textDecoration:k?"underline":"none"},children:[(0,i.jsx)("strong",{children:"Recent Win:"})," ",d]})]})]}),(0,i.jsxs)("div",{className:"mt-4",children:[(0,i.jsx)("p",{className:"text-sm font-semibold",children:"Ball Used:"}),(0,i.jsx)("p",{className:"text-sm text-gray-700",children:m})]}),g&&g.length>0&&(0,i.jsxs)("div",{className:"mt-4",children:[(0,i.jsx)("p",{className:"text-sm font-semibold",children:"Clubs:"}),(0,i.jsx)("ul",{className:"list-disc list-inside text-sm text-gray-700",children:g.map(((e,t)=>(0,i.jsx)("li",{children:e},t)))})]})]})]})}},7409:function(e,t,n){"use strict";var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,a){function o(e){try{l(r.next(e))}catch(e){a(e)}}function s(e){try{l(r.throw(e))}catch(e){a(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,s)}l((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0});const i=n(4848),a=n(6540);t.default=({name:e,location:t,course:n,summary:o,dates:s,weather:l,purse:c,players:u,course_picture_url:d,yt_highlights:f,year:h,messages:p,setMessages:g})=>{const[m,b]=(0,a.useState)(null),y=()=>b(null);return(0,i.jsxs)("div",{className:"inline-block w-3/4 max-w-4xl mx-auto bg-white shadow-lg rounded-lg overflow-hidden border border-gray-200",children:[d&&(0,i.jsx)("div",{className:"w-full h-68 bg-gray-100 overflow-hidden",children:(0,i.jsx)("img",{src:d,alt:`${n} Course`,className:"w-full h-full object-cover"})}),(0,i.jsxs)("div",{className:"bg-gray-100 p-4",children:[(0,i.jsx)("h2",{className:"text-2xl font-semibold",children:e+" ("+h+")"}),(0,i.jsx)("p",{className:"text-sm text-gray-600",children:n})]}),(0,i.jsxs)("div",{className:"p-4",children:[(0,i.jsxs)("p",{className:"text-sm text-gray-600",children:[(0,i.jsx)("strong",{children:"Location:"})," ",t]}),(0,i.jsxs)("p",{className:"text-sm text-gray-600",children:[(0,i.jsx)("strong",{children:"Dates:"})," ",s]}),(0,i.jsxs)("p",{className:"text-sm text-gray-600",children:[(0,i.jsx)("strong",{children:"Weather:"})," ",l]}),(0,i.jsxs)("p",{className:"text-sm text-gray-600",children:[(0,i.jsx)("strong",{children:"Purse:"})," $",c.toLocaleString()]}),(0,i.jsxs)("p",{className:"text-sm text-gray-600",children:[(0,i.jsx)("strong",{children:"Summary:"})," ",o.toLocaleString()]})]}),u&&u.length>0&&(0,i.jsxs)("div",{className:"p-4",children:[(0,i.jsx)("p",{className:"text-lg font-semibold mb-2",children:"Leaderboard"}),(0,i.jsxs)("table",{className:"min-w-full bg-white border border-gray-300",children:[(0,i.jsx)("thead",{className:"bg-gray-200",children:(0,i.jsxs)("tr",{children:[(0,i.jsx)("th",{className:"px-4 py-2 text-left",children:"Position"}),(0,i.jsx)("th",{className:"px-4 py-2 text-left",children:"Name"}),(0,i.jsx)("th",{className:"px-4 py-2 text-center",children:"R1"}),(0,i.jsx)("th",{className:"px-4 py-2 text-center",children:"R2"}),(0,i.jsx)("th",{className:"px-4 py-2 text-center",children:"R3"}),(0,i.jsx)("th",{className:"px-4 py-2 text-center",children:"R4"}),(0,i.jsx)("th",{className:"px-4 py-2 text-center",children:"Final"}),(0,i.jsx)("th",{className:"px-4 py-2 text-right",children:"Prize Money"})]})}),(0,i.jsx)("tbody",{children:u.map(((e,t)=>(0,i.jsxs)("tr",{className:"border-t "+(t%2==0?"bg-gray-100":""),children:[(0,i.jsx)("td",{className:"px-4 py-2 text-left",children:e.position}),(0,i.jsx)("td",{onClick:()=>{((e,t)=>{r(void 0,void 0,void 0,(function*(){const n=yield fetch("http://localhost:5500/api/openai",{method:"POST",mode:"cors",headers:{"Content-Type":"application/json"},body:JSON.stringify({messages:[{role:"user",content:e+" in "+t}]})}),r=JSON.parse(yield n.text());g([...p,r])}))})(e.name,h)},onMouseEnter:()=>(e=>b(e))(t),onMouseLeave:y,style:{cursor:"pointer",textDecoration:m===t?"underline":"none"},className:"px-4 py-2 text-left",children:e.name}),(0,i.jsx)("td",{className:"px-4 py-2 text-center",children:e.round_scores[0]}),(0,i.jsx)("td",{className:"px-4 py-2 text-center",children:e.round_scores[1]}),(0,i.jsx)("td",{className:"px-4 py-2 text-center",children:e.round_scores[2]}),(0,i.jsx)("td",{className:"px-4 py-2 text-center",children:e.round_scores[3]}),(0,i.jsx)("td",{className:"px-4 py-2 text-center",children:e.final_score}),(0,i.jsxs)("td",{className:"px-4 py-2 text-right",children:["$",e.prize_money.toLocaleString()]})]},t)))})]})]})]})}},8221:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=n(4848),a=r(n(6540)),o=r(n(5338)),s=r(n(8897));o.default.createRoot(document.getElementById("root")).render((0,i.jsx)(a.default.StrictMode,{children:(0,i.jsx)(s.default,{})}))},9428:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4848),i=n(9766),a=n(8969),o=n(411);a.Chart.register(a.CategoryScale,a.LinearScale,a.PointElement,a.LineElement,a.Title,a.Tooltip,a.Legend),t.default=({handlerName:e,inputData:t})=>{const n={labels:t.map((e=>(0,o.format)(new Date(e.timestamp),"yyyy-MM-dd HH:mm:ss"))),datasets:[{label:"QPS (Queries per Second)",data:t.map((e=>e.qps)),borderColor:"rgba(75, 192, 192, 1)",backgroundColor:"rgba(75, 192, 192, 0.2)",borderWidth:2}]},a={responsive:!0,plugins:{legend:{position:"top"},title:{display:!0,text:e}},scales:{x:{title:{display:!0,text:"Time"}},y:{title:{display:!0,text:"QPS"},beginAtZero:!0}}};return(0,r.jsx)("div",{style:{width:"80%",margin:"0 auto"},children:(0,r.jsx)(i.Line,{data:n,options:a})})}},99:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(4848);t.default=({name:e,summary:t,birthday:n,death:i,age:a,occupation:o,alma_mater:s,hometown:l,spouses:c,awards:u,profilePictureUrl:d})=>(0,r.jsxs)("div",{className:"max-w-md mx-auto bg-white shadow-lg rounded-lg overflow-hidden border border-gray-200 justify-start",children:[d&&(0,r.jsx)("div",{className:"w-full h-64 bg-gray-100 overflow-hidden",children:(0,r.jsx)("img",{src:d,alt:`${e} profile`,className:"w-full h-full object-cover"})}),(0,r.jsxs)("div",{className:"bg-gray-100 p-4 text-left",children:[(0,r.jsx)("h2",{className:"text-2xl font-semibold",children:e}),(0,r.jsx)("p",{className:"text-sm text-gray-600 italic",children:o})]}),(0,r.jsxs)("div",{className:"p-4",children:[(0,r.jsx)("p",{className:"text-sm text-gray-700 mb-2",children:t}),(0,r.jsxs)("div",{className:"grid grid-cols-2 gap-4 text-sm text-gray-600",children:[(0,r.jsxs)("div",{children:[(0,r.jsxs)("p",{children:[(0,r.jsx)("strong",{children:"Born:"})," ",n]}),i&&(0,r.jsxs)("p",{children:[(0,r.jsx)("strong",{children:"Died:"})," ",i]}),(0,r.jsxs)("p",{children:[(0,r.jsx)("strong",{children:"Age:"})," ",a," years"]})]}),(0,r.jsxs)("div",{children:[(0,r.jsxs)("p",{children:[(0,r.jsx)("strong",{children:"Hometown:"})," ",l]}),(0,r.jsxs)("p",{children:[(0,r.jsx)("strong",{children:"Alma Mater:"})," ",s]})]})]}),c&&c.length>0&&(0,r.jsxs)("div",{className:"mt-4",children:[(0,r.jsx)("p",{className:"text-sm font-semibold",children:"Spouses:"}),(0,r.jsx)("ul",{className:"list-disc list-inside text-sm text-gray-700",children:c.map(((e,t)=>(0,r.jsx)("li",{children:e},t)))})]}),u&&u.length>0&&(0,r.jsxs)("div",{className:"mt-4",children:[(0,r.jsx)("p",{className:"text-sm font-semibold",children:"Awards:"}),(0,r.jsx)("ul",{className:"list-disc list-inside text-sm text-gray-700",children:u.map(((e,t)=>(0,r.jsx)("li",{children:e},t)))})]})]})]})},4001:function(e){e.exports=function(){"use strict";function e(e){return e+.5|0}const t=(e,t,n)=>Math.max(Math.min(e,n),t);function n(n){return t(e(2.55*n),0,255)}function r(n){return t(e(255*n),0,255)}function i(n){return t(e(n/2.55)/100,0,1)}function a(n){return t(e(100*n),0,100)}const o={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},s=[..."0123456789ABCDEF"],l=e=>s[15&e],c=e=>s[(240&e)>>4]+s[15&e],u=e=>(240&e)>>4==(15&e);function d(e){var t,n=e.length;return"#"===e[0]&&(4===n||5===n?t={r:255&17*o[e[1]],g:255&17*o[e[2]],b:255&17*o[e[3]],a:5===n?17*o[e[4]]:255}:7!==n&&9!==n||(t={r:o[e[1]]<<4|o[e[2]],g:o[e[3]]<<4|o[e[4]],b:o[e[5]]<<4|o[e[6]],a:9===n?o[e[7]]<<4|o[e[8]]:255})),t}function f(e){var t=(e=>u(e.r)&&u(e.g)&&u(e.b)&&u(e.a))(e)?l:c;return e?"#"+t(e.r)+t(e.g)+t(e.b)+((e,t)=>e<255?t(e):"")(e.a,t):void 0}const h=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function p(e,t,n){const r=t*Math.min(n,1-n),i=(t,i=(t+e/30)%12)=>n-r*Math.max(Math.min(i-3,9-i,1),-1);return[i(0),i(8),i(4)]}function g(e,t,n){const r=(r,i=(r+e/60)%6)=>n-n*t*Math.max(Math.min(i,4-i,1),0);return[r(5),r(3),r(1)]}function m(e,t,n){const r=p(e,1,.5);let i;for(t+n>1&&(i=1/(t+n),t*=i,n*=i),i=0;i<3;i++)r[i]*=1-t-n,r[i]+=t;return r}function b(e){const t=e.r/255,n=e.g/255,r=e.b/255,i=Math.max(t,n,r),a=Math.min(t,n,r),o=(i+a)/2;let s,l,c;return i!==a&&(c=i-a,l=o>.5?c/(2-i-a):c/(i+a),s=function(e,t,n,r,i){return e===i?(t-n)/r+(t<n?6:0):t===i?(n-e)/r+2:(e-t)/r+4}(t,n,r,c,i),s=60*s+.5),[0|s,l||0,o]}function y(e,t,n,i){return(Array.isArray(t)?e(t[0],t[1],t[2]):e(t,n,i)).map(r)}function v(e,t,n){return y(p,e,t,n)}function x(e,t,n){return y(m,e,t,n)}function w(e,t,n){return y(g,e,t,n)}function A(e){return(e%360+360)%360}function _(e){const t=h.exec(e);let i,a=255;if(!t)return;t[5]!==i&&(a=t[6]?n(+t[5]):r(+t[5]));const o=A(+t[2]),s=+t[3]/100,l=+t[4]/100;return i="hwb"===t[1]?x(o,s,l):"hsv"===t[1]?w(o,s,l):v(o,s,l),{r:i[0],g:i[1],b:i[2],a}}function k(e,t){var n=b(e);n[0]=A(n[0]+t),n=v(n),e.r=n[0],e.g=n[1],e.b=n[2]}function E(e){if(!e)return;const t=b(e),n=t[0],r=a(t[1]),o=a(t[2]);return e.a<255?`hsla(${n}, ${r}%, ${o}%, ${i(e.a)})`:`hsl(${n}, ${r}%, ${o}%)`}const M={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},O={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let C;function S(e){C||(C=function(){const e={},t=Object.keys(O),n=Object.keys(M);let r,i,a,o,s;for(r=0;r<t.length;r++){for(o=s=t[r],i=0;i<n.length;i++)a=n[i],s=s.replace(a,M[a]);a=parseInt(O[o],16),e[s]=[a>>16&255,a>>8&255,255&a]}return e}(),C.transparent=[0,0,0,0]);const t=C[e.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:4===t.length?t[3]:255}}const P=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;function D(e){const r=P.exec(e);let i,a,o,s=255;if(r){if(r[7]!==i){const e=+r[7];s=r[8]?n(e):t(255*e,0,255)}return i=+r[1],a=+r[3],o=+r[5],i=255&(r[2]?n(i):t(i,0,255)),a=255&(r[4]?n(a):t(a,0,255)),o=255&(r[6]?n(o):t(o,0,255)),{r:i,g:a,b:o,a:s}}}function j(e){return e&&(e.a<255?`rgba(${e.r}, ${e.g}, ${e.b}, ${i(e.a)})`:`rgb(${e.r}, ${e.g}, ${e.b})`)}const T=e=>e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055,B=e=>e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4);function N(e,t,n){if(e){let r=b(e);r[t]=Math.max(0,Math.min(r[t]+r[t]*n,0===t?360:1)),r=v(r),e.r=r[0],e.g=r[1],e.b=r[2]}}function I(e,t){return e?Object.assign(t||{},e):e}function L(e){var t={r:0,g:0,b:0,a:255};return Array.isArray(e)?e.length>=3&&(t={r:e[0],g:e[1],b:e[2],a:255},e.length>3&&(t.a=r(e[3]))):(t=I(e,{r:0,g:0,b:0,a:1})).a=r(t.a),t}class z{constructor(e){if(e instanceof z)return e;const t=typeof e;let n;var r;"object"===t?n=L(e):"string"===t&&(n=d(e)||S(e)||("r"===(r=e).charAt(0)?D(r):_(r))),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var e=I(this._rgb);return e&&(e.a=i(e.a)),e}set rgb(e){this._rgb=L(e)}rgbString(){return this._valid?j(this._rgb):void 0}hexString(){return this._valid?f(this._rgb):void 0}hslString(){return this._valid?E(this._rgb):void 0}mix(e,t){if(e){const n=this.rgb,r=e.rgb;let i;const a=t===i?.5:t,o=2*a-1,s=n.a-r.a,l=((o*s==-1?o:(o+s)/(1+o*s))+1)/2;i=1-l,n.r=255&l*n.r+i*r.r+.5,n.g=255&l*n.g+i*r.g+.5,n.b=255&l*n.b+i*r.b+.5,n.a=a*n.a+(1-a)*r.a,this.rgb=n}return this}interpolate(e,t){return e&&(this._rgb=function(e,t,n){const a=B(i(e.r)),o=B(i(e.g)),s=B(i(e.b));return{r:r(T(a+n*(B(i(t.r))-a))),g:r(T(o+n*(B(i(t.g))-o))),b:r(T(s+n*(B(i(t.b))-s))),a:e.a+n*(t.a-e.a)}}(this._rgb,e._rgb,t)),this}clone(){return new z(this.rgb)}alpha(e){return this._rgb.a=r(e),this}clearer(e){return this._rgb.a*=1-e,this}greyscale(){const t=this._rgb,n=e(.3*t.r+.59*t.g+.11*t.b);return t.r=t.g=t.b=n,this}opaquer(e){return this._rgb.a*=1+e,this}negate(){const e=this._rgb;return e.r=255-e.r,e.g=255-e.g,e.b=255-e.b,this}lighten(e){return N(this._rgb,2,e),this}darken(e){return N(this._rgb,2,-e),this}saturate(e){return N(this._rgb,1,e),this}desaturate(e){return N(this._rgb,1,-e),this}rotate(e){return k(this._rgb,e),this}}function F(e){return new z(e)}var R=Object.freeze({__proto__:null,Color:z,b2n:i,b2p:function(n){return t(e(n/2.55),0,100)},default:F,hexParse:d,hexString:f,hsl2rgb:v,hslString:E,hsv2rgb:w,hueParse:_,hwb2rgb:x,lim:t,n2b:r,n2p:a,nameParse:S,p2b:n,rgb2hsl:b,rgbParse:D,rgbString:j,rotate:k,round:e});return Object.assign(F,R)}()},8969:(e,t,n)=>{"use strict";var r=n(9878);n(4001);class i{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,t,n,r){const i=t.listeners[r],a=t.duration;i.forEach((r=>r({chart:e,initial:t.initial,numSteps:a,currentStep:Math.min(n-t.start,a)})))}_refresh(){this._request||(this._running=!0,this._request=r.requestAnimFrame.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(e=Date.now()){let t=0;this._charts.forEach(((n,r)=>{if(!n.running||!n.items.length)return;const i=n.items;let a,o=i.length-1,s=!1;for(;o>=0;--o)a=i[o],a._active?(a._total>n.duration&&(n.duration=a._total),a.tick(e),s=!0):(i[o]=i[i.length-1],i.pop());s&&(r.draw(),this._notify(r,n,e,"progress")),i.length||(n.running=!1,this._notify(r,n,e,"complete"),n.initial=!1),t+=i.length})),this._lastDate=e,0===t&&(this._running=!1)}_getAnims(e){const t=this._charts;let n=t.get(e);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},t.set(e,n)),n}listen(e,t,n){this._getAnims(e).listeners[t].push(n)}add(e,t){t&&t.length&&this._getAnims(e).items.push(...t)}has(e){return this._getAnims(e).items.length>0}start(e){const t=this._charts.get(e);t&&(t.running=!0,t.start=Date.now(),t.duration=t.items.reduce(((e,t)=>Math.max(e,t._duration)),0),this._refresh())}running(e){if(!this._running)return!1;const t=this._charts.get(e);return!!(t&&t.running&&t.items.length)}stop(e){const t=this._charts.get(e);if(!t||!t.items.length)return;const n=t.items;let r=n.length-1;for(;r>=0;--r)n[r].cancel();t.items=[],this._notify(e,t,Date.now(),"complete")}remove(e){return this._charts.delete(e)}}var a=new i;const o="transparent",s={boolean:(e,t,n)=>n>.5?t:e,color(e,t,n){const i=r.color(e||o),a=i.valid&&r.color(t||o);return a&&a.valid?a.mix(i,n).hexString():t},number:(e,t,n)=>e+(t-e)*n};class l{constructor(e,t,n,i){const a=t[n];i=r.resolve([e.to,i,a,e.from]);const o=r.resolve([e.from,a,i]);this._active=!0,this._fn=e.fn||s[e.type||typeof o],this._easing=r.effects[e.easing]||r.effects.linear,this._start=Math.floor(Date.now()+(e.delay||0)),this._duration=this._total=Math.floor(e.duration),this._loop=!!e.loop,this._target=t,this._prop=n,this._from=o,this._to=i,this._promises=void 0}active(){return this._active}update(e,t,n){if(this._active){this._notify(!1);const i=this._target[this._prop],a=n-this._start,o=this._duration-a;this._start=n,this._duration=Math.floor(Math.max(o,e.duration)),this._total+=a,this._loop=!!e.loop,this._to=r.resolve([e.to,t,i,e.from]),this._from=r.resolve([e.from,i,t])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(e){const t=e-this._start,n=this._duration,r=this._prop,i=this._from,a=this._loop,o=this._to;let s;if(this._active=i!==o&&(a||t<n),!this._active)return this._target[r]=o,void this._notify(!0);t<0?this._target[r]=i:(s=t/n%2,s=a&&s>1?2-s:s,s=this._easing(Math.min(1,Math.max(0,s))),this._target[r]=this._fn(i,o,s))}wait(){const e=this._promises||(this._promises=[]);return new Promise(((t,n)=>{e.push({res:t,rej:n})}))}_notify(e){const t=e?"res":"rej",n=this._promises||[];for(let e=0;e<n.length;e++)n[e][t]()}}class c{constructor(e,t){this._chart=e,this._properties=new Map,this.configure(t)}configure(e){if(!r.isObject(e))return;const t=Object.keys(r.defaults.animation),n=this._properties;Object.getOwnPropertyNames(e).forEach((i=>{const a=e[i];if(!r.isObject(a))return;const o={};for(const e of t)o[e]=a[e];(r.isArray(a.properties)&&a.properties||[i]).forEach((e=>{e!==i&&n.has(e)||n.set(e,o)}))}))}_animateOptions(e,t){const n=t.options,r=function(e,t){if(!t)return;let n=e.options;if(n)return n.$shared&&(e.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;e.options=t}(e,n);if(!r)return[];const i=this._createAnimations(r,n);return n.$shared&&function(e,t){const n=[],r=Object.keys(t);for(let t=0;t<r.length;t++){const i=e[r[t]];i&&i.active()&&n.push(i.wait())}return Promise.all(n)}(e.options.$animations,n).then((()=>{e.options=n}),(()=>{})),i}_createAnimations(e,t){const n=this._properties,r=[],i=e.$animations||(e.$animations={}),a=Object.keys(t),o=Date.now();let s;for(s=a.length-1;s>=0;--s){const c=a[s];if("$"===c.charAt(0))continue;if("options"===c){r.push(...this._animateOptions(e,t));continue}const u=t[c];let d=i[c];const f=n.get(c);if(d){if(f&&d.active()){d.update(f,u,o);continue}d.cancel()}f&&f.duration?(i[c]=d=new l(f,e,c,u),r.push(d)):e[c]=u}return r}update(e,t){if(0===this._properties.size)return void Object.assign(e,t);const n=this._createAnimations(e,t);return n.length?(a.add(this._chart,n),!0):void 0}}function u(e,t){const n=e&&e.options||{},r=n.reverse,i=void 0===n.min?t:0,a=void 0===n.max?t:0;return{start:r?a:i,end:r?i:a}}function d(e,t){const n=[],r=e._getSortedDatasetMetas(t);let i,a;for(i=0,a=r.length;i<a;++i)n.push(r[i].index);return n}function f(e,t,n,i={}){const a=e.keys,o="single"===i.mode;let s,l,c,u;if(null===t)return;let d=!1;for(s=0,l=a.length;s<l;++s){if(c=+a[s],c===n){if(d=!0,i.all)continue;break}u=e.values[c],r.isNumberFinite(u)&&(o||0===t||r.sign(t)===r.sign(u))&&(t+=u)}return d||i.all?t:0}function h(e,t){const n=e&&e.options.stacked;return n||void 0===n&&void 0!==t.stack}function p(e,t,n){const r=e[t]||(e[t]={});return r[n]||(r[n]={})}function g(e,t,n,r){for(const i of t.getMatchingVisibleMetas(r).reverse()){const t=e[i.index];if(n&&t>0||!n&&t<0)return i.index}return null}function m(e,t){const{chart:n,_cachedMeta:r}=e,i=n._stacks||(n._stacks={}),{iScale:a,vScale:o,index:s}=r,l=a.axis,c=o.axis,u=function(e,t,n){return`${e.id}.${t.id}.${n.stack||n.type}`}(a,o,r),d=t.length;let f;for(let e=0;e<d;++e){const n=t[e],{[l]:a,[c]:d}=n;f=(n._stacks||(n._stacks={}))[c]=p(i,u,a),f[s]=d,f._top=g(f,o,!0,r.type),f._bottom=g(f,o,!1,r.type),(f._visualValues||(f._visualValues={}))[s]=d}}function b(e,t){const n=e.scales;return Object.keys(n).filter((e=>n[e].axis===t)).shift()}function y(e,t){const n=e.controller.index,r=e.vScale&&e.vScale.axis;if(r){t=t||e._parsed;for(const e of t){const t=e._stacks;if(!t||void 0===t[r]||void 0===t[r][n])return;delete t[r][n],void 0!==t[r]._visualValues&&void 0!==t[r]._visualValues[n]&&delete t[r]._visualValues[n]}}}const v=e=>"reset"===e||"none"===e,x=(e,t)=>t?e:Object.assign({},e);class w{static defaults={};static datasetElementType=null;static dataElementType=null;constructor(e,t){this.chart=e,this._ctx=e.ctx,this.index=t,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.datasetElementType=new.target.datasetElementType,this.dataElementType=new.target.dataElementType,this.initialize()}initialize(){const e=this._cachedMeta;this.configure(),this.linkScales(),e._stacked=h(e.vScale,e),this.addElements(),this.options.fill&&!this.chart.isPluginEnabled("filler")&&console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options")}updateIndex(e){this.index!==e&&y(this._cachedMeta),this.index=e}linkScales(){const e=this.chart,t=this._cachedMeta,n=this.getDataset(),i=(e,t,n,r)=>"x"===e?t:"r"===e?r:n,a=t.xAxisID=r.valueOrDefault(n.xAxisID,b(e,"x")),o=t.yAxisID=r.valueOrDefault(n.yAxisID,b(e,"y")),s=t.rAxisID=r.valueOrDefault(n.rAxisID,b(e,"r")),l=t.indexAxis,c=t.iAxisID=i(l,a,o,s),u=t.vAxisID=i(l,o,a,s);t.xScale=this.getScaleForId(a),t.yScale=this.getScaleForId(o),t.rScale=this.getScaleForId(s),t.iScale=this.getScaleForId(c),t.vScale=this.getScaleForId(u)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(e){return this.chart.scales[e]}_getOtherScale(e){const t=this._cachedMeta;return e===t.iScale?t.vScale:t.iScale}reset(){this._update("reset")}_destroy(){const e=this._cachedMeta;this._data&&r.unlistenArrayEvents(this._data,this),e._stacked&&y(e)}_dataCheck(){const e=this.getDataset(),t=e.data||(e.data=[]),n=this._data;if(r.isObject(t)){const e=this._cachedMeta;this._data=function(e,t){const{iScale:n,vScale:r}=t,i="x"===n.axis?"x":"y",a="x"===r.axis?"x":"y",o=Object.keys(e),s=new Array(o.length);let l,c,u;for(l=0,c=o.length;l<c;++l)u=o[l],s[l]={[i]:u,[a]:e[u]};return s}(t,e)}else if(n!==t){if(n){r.unlistenArrayEvents(n,this);const e=this._cachedMeta;y(e),e._parsed=[]}t&&Object.isExtensible(t)&&r.listenArrayEvents(t,this),this._syncList=[],this._data=t}}addElements(){const e=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(e.dataset=new this.datasetElementType)}buildOrUpdateElements(e){const t=this._cachedMeta,n=this.getDataset();let r=!1;this._dataCheck();const i=t._stacked;t._stacked=h(t.vScale,t),t.stack!==n.stack&&(r=!0,y(t),t.stack=n.stack),this._resyncElements(e),(r||i!==t._stacked)&&(m(this,t._parsed),t._stacked=h(t.vScale,t))}configure(){const e=this.chart.config,t=e.datasetScopeKeys(this._type),n=e.getOptionScopes(this.getDataset(),t,!0);this.options=e.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(e,t){const{_cachedMeta:n,_data:i}=this,{iScale:a,_stacked:o}=n,s=a.axis;let l,c,u,d=0===e&&t===i.length||n._sorted,f=e>0&&n._parsed[e-1];if(!1===this._parsing)n._parsed=i,n._sorted=!0,u=i;else{u=r.isArray(i[e])?this.parseArrayData(n,i,e,t):r.isObject(i[e])?this.parseObjectData(n,i,e,t):this.parsePrimitiveData(n,i,e,t);const a=()=>null===c[s]||f&&c[s]<f[s];for(l=0;l<t;++l)n._parsed[l+e]=c=u[l],d&&(a()&&(d=!1),f=c);n._sorted=d}o&&m(this,u)}parsePrimitiveData(e,t,n,r){const{iScale:i,vScale:a}=e,o=i.axis,s=a.axis,l=i.getLabels(),c=i===a,u=new Array(r);let d,f,h;for(d=0,f=r;d<f;++d)h=d+n,u[d]={[o]:c||i.parse(l[h],h),[s]:a.parse(t[h],h)};return u}parseArrayData(e,t,n,r){const{xScale:i,yScale:a}=e,o=new Array(r);let s,l,c,u;for(s=0,l=r;s<l;++s)c=s+n,u=t[c],o[s]={x:i.parse(u[0],c),y:a.parse(u[1],c)};return o}parseObjectData(e,t,n,i){const{xScale:a,yScale:o}=e,{xAxisKey:s="x",yAxisKey:l="y"}=this._parsing,c=new Array(i);let u,d,f,h;for(u=0,d=i;u<d;++u)f=u+n,h=t[f],c[u]={x:a.parse(r.resolveObjectKey(h,s),f),y:o.parse(r.resolveObjectKey(h,l),f)};return c}getParsed(e){return this._cachedMeta._parsed[e]}getDataElement(e){return this._cachedMeta.data[e]}applyStack(e,t,n){const r=this.chart,i=this._cachedMeta,a=t[e.axis];return f({keys:d(r,!0),values:t._stacks[e.axis]._visualValues},a,i.index,{mode:n})}updateRangeFromParsed(e,t,n,r){const i=n[t.axis];let a=null===i?NaN:i;const o=r&&n._stacks[t.axis];r&&o&&(r.values=o,a=f(r,i,this._cachedMeta.index)),e.min=Math.min(e.min,a),e.max=Math.max(e.max,a)}getMinMax(e,t){const n=this._cachedMeta,i=n._parsed,a=n._sorted&&e===n.iScale,o=i.length,s=this._getOtherScale(e),l=((e,t,n)=>e&&!t.hidden&&t._stacked&&{keys:d(n,!0),values:null})(t,n,this.chart),c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:u,max:f}=function(e){const{min:t,max:n,minDefined:r,maxDefined:i}=e.getUserBounds();return{min:r?t:Number.NEGATIVE_INFINITY,max:i?n:Number.POSITIVE_INFINITY}}(s);let h,p;function g(){p=i[h];const t=p[s.axis];return!r.isNumberFinite(p[e.axis])||u>t||f<t}for(h=0;h<o&&(g()||(this.updateRangeFromParsed(c,e,p,l),!a));++h);if(a)for(h=o-1;h>=0;--h)if(!g()){this.updateRangeFromParsed(c,e,p,l);break}return c}getAllParsedValues(e){const t=this._cachedMeta._parsed,n=[];let i,a,o;for(i=0,a=t.length;i<a;++i)o=t[i][e.axis],r.isNumberFinite(o)&&n.push(o);return n}getMaxOverflow(){return!1}getLabelAndValue(e){const t=this._cachedMeta,n=t.iScale,r=t.vScale,i=this.getParsed(e);return{label:n?""+n.getLabelForValue(i[n.axis]):"",value:r?""+r.getLabelForValue(i[r.axis]):""}}_update(e){const t=this._cachedMeta;this.update(e||"default"),t._clip=function(e){let t,n,i,a;return r.isObject(e)?(t=e.top,n=e.right,i=e.bottom,a=e.left):t=n=i=a=e,{top:t,right:n,bottom:i,left:a,disabled:!1===e}}(r.valueOrDefault(this.options.clip,function(e,t,n){if(!1===n)return!1;const r=u(e,n),i=u(t,n);return{top:i.end,right:r.end,bottom:i.start,left:r.start}}(t.xScale,t.yScale,this.getMaxOverflow())))}update(e){}draw(){const e=this._ctx,t=this.chart,n=this._cachedMeta,r=n.data||[],i=t.chartArea,a=[],o=this._drawStart||0,s=this._drawCount||r.length-o,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(e,i,o,s),c=o;c<o+s;++c){const t=r[c];t.hidden||(t.active&&l?a.push(t):t.draw(e,i))}for(c=0;c<a.length;++c)a[c].draw(e,i)}getStyle(e,t){const n=t?"active":"default";return void 0===e&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(e||0,n)}getContext(e,t,n){const i=this.getDataset();let a;if(e>=0&&e<this._cachedMeta.data.length){const t=this._cachedMeta.data[e];a=t.$context||(t.$context=function(e,t,n){return r.createContext(e,{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:n,index:t,mode:"default",type:"data"})}(this.getContext(),e,t)),a.parsed=this.getParsed(e),a.raw=i.data[e],a.index=a.dataIndex=e}else a=this.$context||(this.$context=function(e,t){return r.createContext(e,{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),a.dataset=i,a.index=a.datasetIndex=this.index;return a.active=!!t,a.mode=n,a}resolveDatasetElementOptions(e){return this._resolveElementOptions(this.datasetElementType.id,e)}resolveDataElementOptions(e,t){return this._resolveElementOptions(this.dataElementType.id,t,e)}_resolveElementOptions(e,t="default",n){const i="active"===t,a=this._cachedDataOpts,o=e+"-"+t,s=a[o],l=this.enableOptionSharing&&r.defined(n);if(s)return x(s,l);const c=this.chart.config,u=c.datasetElementScopeKeys(this._type,e),d=i?[`${e}Hover`,"hover",e,""]:[e,""],f=c.getOptionScopes(this.getDataset(),u),h=Object.keys(r.defaults.elements[e]),p=c.resolveNamedOptions(f,h,(()=>this.getContext(n,i,t)),d);return p.$shared&&(p.$shared=l,a[o]=Object.freeze(x(p,l))),p}_resolveAnimations(e,t,n){const r=this.chart,i=this._cachedDataOpts,a=`animation-${t}`,o=i[a];if(o)return o;let s;if(!1!==r.options.animation){const r=this.chart.config,i=r.datasetAnimationScopeKeys(this._type,t),a=r.getOptionScopes(this.getDataset(),i);s=r.createResolver(a,this.getContext(e,n,t))}const l=new c(r,s&&s.animations);return s&&s._cacheable&&(i[a]=Object.freeze(l)),l}getSharedOptions(e){if(e.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},e))}includeOptions(e,t){return!t||v(e)||this.chart._animationsDisabled}_getSharedOptions(e,t){const n=this.resolveDataElementOptions(e,t),r=this._sharedOptions,i=this.getSharedOptions(n),a=this.includeOptions(t,i)||i!==r;return this.updateSharedOptions(i,t,n),{sharedOptions:i,includeOptions:a}}updateElement(e,t,n,r){v(r)?Object.assign(e,n):this._resolveAnimations(t,r).update(e,n)}updateSharedOptions(e,t,n){e&&!v(t)&&this._resolveAnimations(void 0,t).update(e,n)}_setStyle(e,t,n,r){e.active=r;const i=this.getStyle(t,r);this._resolveAnimations(t,n,r).update(e,{options:!r&&this.getSharedOptions(i)||i})}removeHoverStyle(e,t,n){this._setStyle(e,n,"active",!1)}setHoverStyle(e,t,n){this._setStyle(e,n,"active",!0)}_removeDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!1)}_setDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!0)}_resyncElements(e){const t=this._data,n=this._cachedMeta.data;for(const[e,t,n]of this._syncList)this[e](t,n);this._syncList=[];const r=n.length,i=t.length,a=Math.min(i,r);a&&this.parse(0,a),i>r?this._insertElements(r,i-r,e):i<r&&this._removeElements(i,r-i)}_insertElements(e,t,n=!0){const r=this._cachedMeta,i=r.data,a=e+t;let o;const s=e=>{for(e.length+=t,o=e.length-1;o>=a;o--)e[o]=e[o-t]};for(s(i),o=e;o<a;++o)i[o]=new this.dataElementType;this._parsing&&s(r._parsed),this.parse(e,t),n&&this.updateElements(i,e,t,"reset")}updateElements(e,t,n,r){}_removeElements(e,t){const n=this._cachedMeta;if(this._parsing){const r=n._parsed.splice(e,t);n._stacked&&y(n,r)}n.data.splice(e,t)}_sync(e){if(this._parsing)this._syncList.push(e);else{const[t,n,r]=e;this[t](n,r)}this.chart._dataChanges.push([this.index,...e])}_onDataPush(){const e=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-e,e])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(e,t){t&&this._sync(["_removeElements",e,t]);const n=arguments.length-2;n&&this._sync(["_insertElements",e,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function A(e){const t=e.iScale,n=function(e,t){if(!e._cache.$bar){const n=e.getMatchingVisibleMetas(t);let i=[];for(let t=0,r=n.length;t<r;t++)i=i.concat(n[t].controller.getAllParsedValues(e));e._cache.$bar=r._arrayUnique(i.sort(((e,t)=>e-t)))}return e._cache.$bar}(t,e.type);let i,a,o,s,l=t._length;const c=()=>{32767!==o&&-32768!==o&&(r.defined(s)&&(l=Math.min(l,Math.abs(o-s)||l)),s=o)};for(i=0,a=n.length;i<a;++i)o=t.getPixelForValue(n[i]),c();for(s=void 0,i=0,a=t.ticks.length;i<a;++i)o=t.getPixelForTick(i),c();return l}function _(e,t,n,i){return r.isArray(e)?function(e,t,n,r){const i=n.parse(e[0],r),a=n.parse(e[1],r),o=Math.min(i,a),s=Math.max(i,a);let l=o,c=s;Math.abs(o)>Math.abs(s)&&(l=s,c=o),t[n.axis]=c,t._custom={barStart:l,barEnd:c,start:i,end:a,min:o,max:s}}(e,t,n,i):t[n.axis]=n.parse(e,i),t}function k(e,t,n,r){const i=e.iScale,a=e.vScale,o=i.getLabels(),s=i===a,l=[];let c,u,d,f;for(c=n,u=n+r;c<u;++c)f=t[c],d={},d[i.axis]=s||i.parse(o[c],c),l.push(_(f,d,a,c));return l}function E(e){return e&&void 0!==e.barStart&&void 0!==e.barEnd}function M(e,t,n,r){let i=t.borderSkipped;const a={};if(!i)return void(e.borderSkipped=a);if(!0===i)return void(e.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:o,end:s,reverse:l,top:c,bottom:u}=function(e){let t,n,r,i,a;return e.horizontal?(t=e.base>e.x,n="left",r="right"):(t=e.base<e.y,n="bottom",r="top"),t?(i="end",a="start"):(i="start",a="end"),{start:n,end:r,reverse:t,top:i,bottom:a}}(e);"middle"===i&&n&&(e.enableBorderRadius=!0,(n._top||0)===r?i=c:(n._bottom||0)===r?i=u:(a[O(u,o,s,l)]=!0,i=c)),a[O(i,o,s,l)]=!0,e.borderSkipped=a}function O(e,t,n,r){var i,a,o;return r?(o=n,e=C(e=(i=e)===(a=t)?o:i===o?a:i,n,t)):e=C(e,t,n),e}function C(e,t,n){return"start"===e?t:"end"===e?n:e}function S(e,{inflateAmount:t},n){e.inflateAmount="auto"===t?1===n?.33:0:t}class P extends w{static id="bar";static defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}};static overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};parsePrimitiveData(e,t,n,r){return k(e,t,n,r)}parseArrayData(e,t,n,r){return k(e,t,n,r)}parseObjectData(e,t,n,i){const{iScale:a,vScale:o}=e,{xAxisKey:s="x",yAxisKey:l="y"}=this._parsing,c="x"===a.axis?s:l,u="x"===o.axis?s:l,d=[];let f,h,p,g;for(f=n,h=n+i;f<h;++f)g=t[f],p={},p[a.axis]=a.parse(r.resolveObjectKey(g,c),f),d.push(_(r.resolveObjectKey(g,u),p,o,f));return d}updateRangeFromParsed(e,t,n,r){super.updateRangeFromParsed(e,t,n,r);const i=n._custom;i&&t===this._cachedMeta.vScale&&(e.min=Math.min(e.min,i.min),e.max=Math.max(e.max,i.max))}getMaxOverflow(){return 0}getLabelAndValue(e){const t=this._cachedMeta,{iScale:n,vScale:r}=t,i=this.getParsed(e),a=i._custom,o=E(a)?"["+a.start+", "+a.end+"]":""+r.getLabelForValue(i[r.axis]);return{label:""+n.getLabelForValue(i[n.axis]),value:o}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(e){const t=this._cachedMeta;this.updateElements(t.data,0,t.data.length,e)}updateElements(e,t,n,i){const a="reset"===i,{index:o,_cachedMeta:{vScale:s}}=this,l=s.getBasePixel(),c=s.isHorizontal(),u=this._getRuler(),{sharedOptions:d,includeOptions:f}=this._getSharedOptions(t,i);for(let h=t;h<t+n;h++){const t=this.getParsed(h),n=a||r.isNullOrUndef(t[s.axis])?{base:l,head:l}:this._calculateBarValuePixels(h),p=this._calculateBarIndexPixels(h,u),g=(t._stacks||{})[s.axis],m={horizontal:c,base:n.base,enableBorderRadius:!g||E(t._custom)||o===g._top||o===g._bottom,x:c?n.head:p.center,y:c?p.center:n.head,height:c?p.size:Math.abs(n.size),width:c?Math.abs(n.size):p.size};f&&(m.options=d||this.resolveDataElementOptions(h,e[h].active?"active":i));const b=m.options||e[h].options;M(m,b,g,o),S(m,b,u.ratio),this.updateElement(e[h],h,m,i)}}_getStacks(e,t){const{iScale:n}=this._cachedMeta,i=n.getMatchingVisibleMetas(this._type).filter((e=>e.controller.options.grouped)),a=n.options.stacked,o=[],s=this._cachedMeta.controller.getParsed(t),l=s&&s[n.axis],c=e=>{const t=e._parsed.find((e=>e[n.axis]===l)),i=t&&t[e.vScale.axis];if(r.isNullOrUndef(i)||isNaN(i))return!0};for(const n of i)if((void 0===t||!c(n))&&((!1===a||-1===o.indexOf(n.stack)||void 0===a&&void 0===n.stack)&&o.push(n.stack),n.index===e))break;return o.length||o.push(void 0),o}_getStackCount(e){return this._getStacks(void 0,e).length}_getStackIndex(e,t,n){const r=this._getStacks(e,n),i=void 0!==t?r.indexOf(t):-1;return-1===i?r.length-1:i}_getRuler(){const e=this.options,t=this._cachedMeta,n=t.iScale,r=[];let i,a;for(i=0,a=t.data.length;i<a;++i)r.push(n.getPixelForValue(this.getParsed(i)[n.axis],i));const o=e.barThickness;return{min:o||A(t),pixels:r,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:e.grouped,ratio:o?1:e.categoryPercentage*e.barPercentage}}_calculateBarValuePixels(e){const{_cachedMeta:{vScale:t,_stacked:n,index:i},options:{base:a,minBarLength:o}}=this,s=a||0,l=this.getParsed(e),c=l._custom,u=E(c);let d,f,h=l[t.axis],p=0,g=n?this.applyStack(t,l,n):h;g!==h&&(p=g-h,g=h),u&&(h=c.barStart,g=c.barEnd-c.barStart,0!==h&&r.sign(h)!==r.sign(c.barEnd)&&(p=0),p+=h);const m=r.isNullOrUndef(a)||u?p:a;let b=t.getPixelForValue(m);if(d=this.chart.getDataVisibility(e)?t.getPixelForValue(p+g):b,f=d-b,Math.abs(f)<o){f=function(e,t,n){return 0!==e?r.sign(e):(t.isHorizontal()?1:-1)*(t.min>=n?1:-1)}(f,t,s)*o,h===s&&(b-=f/2);const e=t.getPixelForDecimal(0),a=t.getPixelForDecimal(1),c=Math.min(e,a),p=Math.max(e,a);b=Math.max(Math.min(b,p),c),d=b+f,n&&!u&&(l._stacks[t.axis]._visualValues[i]=t.getValueForPixel(d)-t.getValueForPixel(b))}if(b===t.getPixelForValue(s)){const e=r.sign(f)*t.getLineWidthForValue(s)/2;b+=e,f-=e}return{size:f,base:b,head:d,center:d+f/2}}_calculateBarIndexPixels(e,t){const n=t.scale,i=this.options,a=i.skipNull,o=r.valueOrDefault(i.maxBarThickness,1/0);let s,l;if(t.grouped){const n=a?this._getStackCount(e):t.stackCount,c="flex"===i.barThickness?function(e,t,n,r){const i=t.pixels,a=i[e];let o=e>0?i[e-1]:null,s=e<i.length-1?i[e+1]:null;const l=n.categoryPercentage;null===o&&(o=a-(null===s?t.end-t.start:s-a)),null===s&&(s=a+a-o);const c=a-(a-Math.min(o,s))/2*l;return{chunk:Math.abs(s-o)/2*l/r,ratio:n.barPercentage,start:c}}(e,t,i,n):function(e,t,n,i){const a=n.barThickness;let o,s;return r.isNullOrUndef(a)?(o=t.min*n.categoryPercentage,s=n.barPercentage):(o=a*i,s=1),{chunk:o/i,ratio:s,start:t.pixels[e]-o/2}}(e,t,i,n),u=this._getStackIndex(this.index,this._cachedMeta.stack,a?e:void 0);s=c.start+c.chunk*u+c.chunk/2,l=Math.min(o,c.chunk*c.ratio)}else s=n.getPixelForValue(this.getParsed(e)[n.axis],e),l=Math.min(o,t.min*t.ratio);return{base:s-l/2,head:s+l/2,center:s,size:l}}draw(){const e=this._cachedMeta,t=e.vScale,n=e.data,r=n.length;let i=0;for(;i<r;++i)null===this.getParsed(i)[t.axis]||n[i].hidden||n[i].draw(this._ctx)}}class D extends w{static id="bubble";static defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}};static overrides={scales:{x:{type:"linear"},y:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(e,t,n,r){const i=super.parsePrimitiveData(e,t,n,r);for(let e=0;e<i.length;e++)i[e]._custom=this.resolveDataElementOptions(e+n).radius;return i}parseArrayData(e,t,n,i){const a=super.parseArrayData(e,t,n,i);for(let e=0;e<a.length;e++){const i=t[n+e];a[e]._custom=r.valueOrDefault(i[2],this.resolveDataElementOptions(e+n).radius)}return a}parseObjectData(e,t,n,i){const a=super.parseObjectData(e,t,n,i);for(let e=0;e<a.length;e++){const i=t[n+e];a[e]._custom=r.valueOrDefault(i&&i.r&&+i.r,this.resolveDataElementOptions(e+n).radius)}return a}getMaxOverflow(){const e=this._cachedMeta.data;let t=0;for(let n=e.length-1;n>=0;--n)t=Math.max(t,e[n].size(this.resolveDataElementOptions(n))/2);return t>0&&t}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart.data.labels||[],{xScale:r,yScale:i}=t,a=this.getParsed(e),o=r.getLabelForValue(a.x),s=i.getLabelForValue(a.y),l=a._custom;return{label:n[e]||"",value:"("+o+", "+s+(l?", "+l:"")+")"}}update(e){const t=this._cachedMeta.data;this.updateElements(t,0,t.length,e)}updateElements(e,t,n,r){const i="reset"===r,{iScale:a,vScale:o}=this._cachedMeta,{sharedOptions:s,includeOptions:l}=this._getSharedOptions(t,r),c=a.axis,u=o.axis;for(let d=t;d<t+n;d++){const t=e[d],n=!i&&this.getParsed(d),f={},h=f[c]=i?a.getPixelForDecimal(.5):a.getPixelForValue(n[c]),p=f[u]=i?o.getBasePixel():o.getPixelForValue(n[u]);f.skip=isNaN(h)||isNaN(p),l&&(f.options=s||this.resolveDataElementOptions(d,t.active?"active":r),i&&(f.options.radius=0)),this.updateElement(t,d,f,r)}}resolveDataElementOptions(e,t){const n=this.getParsed(e);let i=super.resolveDataElementOptions(e,t);i.$shared&&(i=Object.assign({},i,{$shared:!1}));const a=i.radius;return"active"!==t&&(i.radius=0),i.radius+=r.valueOrDefault(n&&n._custom,a),i}}class j extends w{static id="doughnut";static defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"};static descriptors={_scriptable:e=>"spacing"!==e,_indexable:e=>"spacing"!==e&&!e.startsWith("borderDash")&&!e.startsWith("hoverBorderDash")};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n,color:r}}=e.legend.options;return t.labels.map(((t,i)=>{const a=e.getDatasetMeta(0).controller.getStyle(i);return{text:t,fillStyle:a.backgroundColor,strokeStyle:a.borderColor,fontColor:r,lineWidth:a.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(i),index:i}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}}}};constructor(e,t){super(e,t),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(e,t){const n=this.getDataset().data,i=this._cachedMeta;if(!1===this._parsing)i._parsed=n;else{let a,o,s=e=>+n[e];if(r.isObject(n[e])){const{key:e="value"}=this._parsing;s=t=>+r.resolveObjectKey(n[t],e)}for(a=e,o=e+t;a<o;++a)i._parsed[a]=s(a)}}_getRotation(){return r.toRadians(this.options.rotation-90)}_getCircumference(){return r.toRadians(this.options.circumference)}_getRotationExtents(){let e=r.TAU,t=-r.TAU;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)&&this.chart.getDatasetMeta(n).type===this._type){const r=this.chart.getDatasetMeta(n).controller,i=r._getRotation(),a=r._getCircumference();e=Math.min(e,i),t=Math.max(t,i+a)}return{rotation:e,circumference:t-e}}update(e){const t=this.chart,{chartArea:n}=t,i=this._cachedMeta,a=i.data,o=this.getMaxBorderWidth()+this.getMaxOffset(a)+this.options.spacing,s=Math.max((Math.min(n.width,n.height)-o)/2,0),l=Math.min(r.toPercentage(this.options.cutout,s),1),c=this._getRingWeight(this.index),{circumference:u,rotation:d}=this._getRotationExtents(),{ratioX:f,ratioY:h,offsetX:p,offsetY:g}=function(e,t,n){let i=1,a=1,o=0,s=0;if(t<r.TAU){const l=e,c=l+t,u=Math.cos(l),d=Math.sin(l),f=Math.cos(c),h=Math.sin(c),p=(e,t,i)=>r._angleBetween(e,l,c,!0)?1:Math.max(t,t*n,i,i*n),g=(e,t,i)=>r._angleBetween(e,l,c,!0)?-1:Math.min(t,t*n,i,i*n),m=p(0,u,f),b=p(r.HALF_PI,d,h),y=g(r.PI,u,f),v=g(r.PI+r.HALF_PI,d,h);i=(m-y)/2,a=(b-v)/2,o=-(m+y)/2,s=-(b+v)/2}return{ratioX:i,ratioY:a,offsetX:o,offsetY:s}}(d,u,l),m=(n.width-o)/f,b=(n.height-o)/h,y=Math.max(Math.min(m,b)/2,0),v=r.toDimension(this.options.radius,y),x=(v-Math.max(v*l,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*v,this.offsetY=g*v,i.total=this.calculateTotal(),this.outerRadius=v-x*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-x*c,0),this.updateElements(a,0,a.length,e)}_circumference(e,t){const n=this.options,i=this._cachedMeta,a=this._getCircumference();return t&&n.animation.animateRotate||!this.chart.getDataVisibility(e)||null===i._parsed[e]||i.data[e].hidden?0:this.calculateCircumference(i._parsed[e]*a/r.TAU)}updateElements(e,t,n,r){const i="reset"===r,a=this.chart,o=a.chartArea,s=a.options.animation,l=(o.left+o.right)/2,c=(o.top+o.bottom)/2,u=i&&s.animateScale,d=u?0:this.innerRadius,f=u?0:this.outerRadius,{sharedOptions:h,includeOptions:p}=this._getSharedOptions(t,r);let g,m=this._getRotation();for(g=0;g<t;++g)m+=this._circumference(g,i);for(g=t;g<t+n;++g){const t=this._circumference(g,i),n=e[g],a={x:l+this.offsetX,y:c+this.offsetY,startAngle:m,endAngle:m+t,circumference:t,outerRadius:f,innerRadius:d};p&&(a.options=h||this.resolveDataElementOptions(g,n.active?"active":r)),m+=t,this.updateElement(n,g,a,r)}}calculateTotal(){const e=this._cachedMeta,t=e.data;let n,r=0;for(n=0;n<t.length;n++){const i=e._parsed[n];null===i||isNaN(i)||!this.chart.getDataVisibility(n)||t[n].hidden||(r+=Math.abs(i))}return r}calculateCircumference(e){const t=this._cachedMeta.total;return t>0&&!isNaN(e)?r.TAU*(Math.abs(e)/t):0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,i=n.data.labels||[],a=r.formatNumber(t._parsed[e],n.options.locale);return{label:i[e]||"",value:a}}getMaxBorderWidth(e){let t=0;const n=this.chart;let r,i,a,o,s;if(!e)for(r=0,i=n.data.datasets.length;r<i;++r)if(n.isDatasetVisible(r)){a=n.getDatasetMeta(r),e=a.data,o=a.controller;break}if(!e)return 0;for(r=0,i=e.length;r<i;++r)s=o.resolveDataElementOptions(r),"inner"!==s.borderAlign&&(t=Math.max(t,s.borderWidth||0,s.hoverBorderWidth||0));return t}getMaxOffset(e){let t=0;for(let n=0,r=e.length;n<r;++n){const e=this.resolveDataElementOptions(n);t=Math.max(t,e.offset||0,e.hoverOffset||0)}return t}_getRingWeightOffset(e){let t=0;for(let n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t}_getRingWeight(e){return Math.max(r.valueOrDefault(this.chart.data.datasets[e].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}class T extends w{static id="line";static defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1};static overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(e){const t=this._cachedMeta,{dataset:n,data:i=[],_dataset:a}=t,o=this.chart._animationsDisabled;let{start:s,count:l}=r._getStartAndCountOfVisiblePoints(t,i,o);this._drawStart=s,this._drawCount=l,r._scaleRangesChanged(t)&&(s=0,l=i.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!a._decimated,n.points=i;const c=this.resolveDatasetElementOptions(e);this.options.showLine||(c.borderWidth=0),c.segment=this.options.segment,this.updateElement(n,void 0,{animated:!o,options:c},e),this.updateElements(i,s,l,e)}updateElements(e,t,n,i){const a="reset"===i,{iScale:o,vScale:s,_stacked:l,_dataset:c}=this._cachedMeta,{sharedOptions:u,includeOptions:d}=this._getSharedOptions(t,i),f=o.axis,h=s.axis,{spanGaps:p,segment:g}=this.options,m=r.isNumber(p)?p:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||a||"none"===i,y=t+n,v=e.length;let x=t>0&&this.getParsed(t-1);for(let n=0;n<v;++n){const p=e[n],v=b?p:{};if(n<t||n>=y){v.skip=!0;continue}const w=this.getParsed(n),A=r.isNullOrUndef(w[h]),_=v[f]=o.getPixelForValue(w[f],n),k=v[h]=a||A?s.getBasePixel():s.getPixelForValue(l?this.applyStack(s,w,l):w[h],n);v.skip=isNaN(_)||isNaN(k)||A,v.stop=n>0&&Math.abs(w[f]-x[f])>m,g&&(v.parsed=w,v.raw=c.data[n]),d&&(v.options=u||this.resolveDataElementOptions(n,p.active?"active":i)),b||this.updateElement(p,n,v,i),x=w}}getMaxOverflow(){const e=this._cachedMeta,t=e.dataset,n=t.options&&t.options.borderWidth||0,r=e.data||[];if(!r.length)return n;const i=r[0].size(this.resolveDataElementOptions(0)),a=r[r.length-1].size(this.resolveDataElementOptions(r.length-1));return Math.max(n,i,a)/2}draw(){const e=this._cachedMeta;e.dataset.updateControlPoints(this.chart.chartArea,e.iScale.axis),super.draw()}}class B extends w{static id="polarArea";static defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0};static overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n,color:r}}=e.legend.options;return t.labels.map(((t,i)=>{const a=e.getDatasetMeta(0).controller.getStyle(i);return{text:t,fillStyle:a.backgroundColor,strokeStyle:a.borderColor,fontColor:r,lineWidth:a.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(i),index:i}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};constructor(e,t){super(e,t),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,i=n.data.labels||[],a=r.formatNumber(t._parsed[e].r,n.options.locale);return{label:i[e]||"",value:a}}parseObjectData(e,t,n,i){return r._parseObjectDataRadialScale.bind(this)(e,t,n,i)}update(e){const t=this._cachedMeta.data;this._updateRadius(),this.updateElements(t,0,t.length,e)}getMinMax(){const e=this._cachedMeta,t={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return e.data.forEach(((e,n)=>{const r=this.getParsed(n).r;!isNaN(r)&&this.chart.getDataVisibility(n)&&(r<t.min&&(t.min=r),r>t.max&&(t.max=r))})),t}_updateRadius(){const e=this.chart,t=e.chartArea,n=e.options,r=Math.min(t.right-t.left,t.bottom-t.top),i=Math.max(r/2,0),a=(i-Math.max(n.cutoutPercentage?i/100*n.cutoutPercentage:1,0))/e.getVisibleDatasetCount();this.outerRadius=i-a*this.index,this.innerRadius=this.outerRadius-a}updateElements(e,t,n,i){const a="reset"===i,o=this.chart,s=o.options.animation,l=this._cachedMeta.rScale,c=l.xCenter,u=l.yCenter,d=l.getIndexAngle(0)-.5*r.PI;let f,h=d;const p=360/this.countVisibleElements();for(f=0;f<t;++f)h+=this._computeAngle(f,i,p);for(f=t;f<t+n;f++){const t=e[f];let n=h,r=h+this._computeAngle(f,i,p),g=o.getDataVisibility(f)?l.getDistanceFromCenterForValue(this.getParsed(f).r):0;h=r,a&&(s.animateScale&&(g=0),s.animateRotate&&(n=r=d));const m={x:c,y:u,innerRadius:0,outerRadius:g,startAngle:n,endAngle:r,options:this.resolveDataElementOptions(f,t.active?"active":i)};this.updateElement(t,f,m,i)}}countVisibleElements(){const e=this._cachedMeta;let t=0;return e.data.forEach(((e,n)=>{!isNaN(this.getParsed(n).r)&&this.chart.getDataVisibility(n)&&t++})),t}_computeAngle(e,t,n){return this.chart.getDataVisibility(e)?r.toRadians(this.resolveDataElementOptions(e,t).angle||n):0}}class N extends j{static id="pie";static defaults={cutout:0,rotation:0,circumference:360,radius:"100%"}}class I extends w{static id="radar";static defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}};static overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};getLabelAndValue(e){const t=this._cachedMeta.vScale,n=this.getParsed(e);return{label:t.getLabels()[e],value:""+t.getLabelForValue(n[t.axis])}}parseObjectData(e,t,n,i){return r._parseObjectDataRadialScale.bind(this)(e,t,n,i)}update(e){const t=this._cachedMeta,n=t.dataset,r=t.data||[],i=t.iScale.getLabels();if(n.points=r,"resize"!==e){const t=this.resolveDatasetElementOptions(e);this.options.showLine||(t.borderWidth=0);const a={_loop:!0,_fullLoop:i.length===r.length,options:t};this.updateElement(n,void 0,a,e)}this.updateElements(r,0,r.length,e)}updateElements(e,t,n,r){const i=this._cachedMeta.rScale,a="reset"===r;for(let o=t;o<t+n;o++){const t=e[o],n=this.resolveDataElementOptions(o,t.active?"active":r),s=i.getPointPositionForValue(o,this.getParsed(o).r),l=a?i.xCenter:s.x,c=a?i.yCenter:s.y,u={x:l,y:c,angle:s.angle,skip:isNaN(l)||isNaN(c),options:n};this.updateElement(t,o,u,r)}}}class L extends w{static id="scatter";static defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1};static overrides={interaction:{mode:"point"},scales:{x:{type:"linear"},y:{type:"linear"}}};getLabelAndValue(e){const t=this._cachedMeta,n=this.chart.data.labels||[],{xScale:r,yScale:i}=t,a=this.getParsed(e),o=r.getLabelForValue(a.x),s=i.getLabelForValue(a.y);return{label:n[e]||"",value:"("+o+", "+s+")"}}update(e){const t=this._cachedMeta,{data:n=[]}=t,i=this.chart._animationsDisabled;let{start:a,count:o}=r._getStartAndCountOfVisiblePoints(t,n,i);if(this._drawStart=a,this._drawCount=o,r._scaleRangesChanged(t)&&(a=0,o=n.length),this.options.showLine){this.datasetElementType||this.addElements();const{dataset:r,_dataset:a}=t;r._chart=this.chart,r._datasetIndex=this.index,r._decimated=!!a._decimated,r.points=n;const o=this.resolveDatasetElementOptions(e);o.segment=this.options.segment,this.updateElement(r,void 0,{animated:!i,options:o},e)}else this.datasetElementType&&(delete t.dataset,this.datasetElementType=!1);this.updateElements(n,a,o,e)}addElements(){const{showLine:e}=this.options;!this.datasetElementType&&e&&(this.datasetElementType=this.chart.registry.getElement("line")),super.addElements()}updateElements(e,t,n,i){const a="reset"===i,{iScale:o,vScale:s,_stacked:l,_dataset:c}=this._cachedMeta,u=this.resolveDataElementOptions(t,i),d=this.getSharedOptions(u),f=this.includeOptions(i,d),h=o.axis,p=s.axis,{spanGaps:g,segment:m}=this.options,b=r.isNumber(g)?g:Number.POSITIVE_INFINITY,y=this.chart._animationsDisabled||a||"none"===i;let v=t>0&&this.getParsed(t-1);for(let u=t;u<t+n;++u){const t=e[u],n=this.getParsed(u),g=y?t:{},x=r.isNullOrUndef(n[p]),w=g[h]=o.getPixelForValue(n[h],u),A=g[p]=a||x?s.getBasePixel():s.getPixelForValue(l?this.applyStack(s,n,l):n[p],u);g.skip=isNaN(w)||isNaN(A)||x,g.stop=u>0&&Math.abs(n[h]-v[h])>b,m&&(g.parsed=n,g.raw=c.data[u]),f&&(g.options=d||this.resolveDataElementOptions(u,t.active?"active":i)),y||this.updateElement(t,u,g,i),v=n}this.updateSharedOptions(d,i,u)}getMaxOverflow(){const e=this._cachedMeta,t=e.data||[];if(!this.options.showLine){let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}const n=e.dataset,r=n.options&&n.options.borderWidth||0;if(!t.length)return r;const i=t[0].size(this.resolveDataElementOptions(0)),a=t[t.length-1].size(this.resolveDataElementOptions(t.length-1));return Math.max(r,i,a)/2}}var z=Object.freeze({__proto__:null,BarController:P,BubbleController:D,DoughnutController:j,LineController:T,PieController:N,PolarAreaController:B,RadarController:I,ScatterController:L});function F(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class R{static override(e){Object.assign(R.prototype,e)}options;constructor(e){this.options=e||{}}init(){}formats(){return F()}parse(){return F()}format(){return F()}add(){return F()}diff(){return F()}startOf(){return F()}endOf(){return F()}}var W={_date:R};function H(e,t,n,i){const{controller:a,data:o,_sorted:s}=e,l=a._cachedMeta.iScale;if(l&&t===l.axis&&"r"!==t&&s&&o.length){const e=l._reversePixels?r._rlookupByKey:r._lookupByKey;if(!i)return e(o,t,n);if(a._sharedOptions){const r=o[0],i="function"==typeof r.getRange&&r.getRange(t);if(i){const r=e(o,t,n-i),a=e(o,t,n+i);return{lo:r.lo,hi:a.hi}}}}return{lo:0,hi:o.length-1}}function Y(e,t,n,r,i){const a=e.getSortedVisibleDatasetMetas(),o=n[t];for(let e=0,n=a.length;e<n;++e){const{index:n,data:s}=a[e],{lo:l,hi:c}=H(a[e],t,o,i);for(let e=l;e<=c;++e){const t=s[e];t.skip||r(t,n,e)}}}function V(e,t,n,i,a){const o=[];return a||e.isPointInArea(t)?(Y(e,n,t,(function(n,s,l){(a||r._isPointInArea(n,e.chartArea,0))&&n.inRange(t.x,t.y,i)&&o.push({element:n,datasetIndex:s,index:l})}),!0),o):o}function U(e,t,n,i,a,o){return o||e.isPointInArea(t)?"r"!==n||i?function(e,t,n,r,i,a){let o=[];const s=function(e){const t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,r){const i=t?Math.abs(e.x-r.x):0,a=n?Math.abs(e.y-r.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(a,2))}}(n);let l=Number.POSITIVE_INFINITY;return Y(e,n,t,(function(n,c,u){const d=n.inRange(t.x,t.y,i);if(r&&!d)return;const f=n.getCenterPoint(i);if(!a&&!e.isPointInArea(f)&&!d)return;const h=s(t,f);h<l?(o=[{element:n,datasetIndex:c,index:u}],l=h):h===l&&o.push({element:n,datasetIndex:c,index:u})})),o}(e,t,n,i,a,o):function(e,t,n,i){let a=[];return Y(e,n,t,(function(e,n,o){const{startAngle:s,endAngle:l}=e.getProps(["startAngle","endAngle"],i),{angle:c}=r.getAngleFromPoint(e,{x:t.x,y:t.y});r._angleBetween(c,s,l)&&a.push({element:e,datasetIndex:n,index:o})})),a}(e,t,n,a):[]}function $(e,t,n,r,i){const a=[],o="x"===n?"inXRange":"inYRange";let s=!1;return Y(e,n,t,((e,r,l)=>{e[o]&&e[o](t[n],i)&&(a.push({element:e,datasetIndex:r,index:l}),s=s||e.inRange(t.x,t.y,i))})),r&&!s?[]:a}var q={evaluateInteractionItems:Y,modes:{index(e,t,n,i){const a=r.getRelativePosition(t,e),o=n.axis||"x",s=n.includeInvisible||!1,l=n.intersect?V(e,a,o,i,s):U(e,a,o,!1,i,s),c=[];return l.length?(e.getSortedVisibleDatasetMetas().forEach((e=>{const t=l[0].index,n=e.data[t];n&&!n.skip&&c.push({element:n,datasetIndex:e.index,index:t})})),c):[]},dataset(e,t,n,i){const a=r.getRelativePosition(t,e),o=n.axis||"xy",s=n.includeInvisible||!1;let l=n.intersect?V(e,a,o,i,s):U(e,a,o,!1,i,s);if(l.length>0){const t=l[0].datasetIndex,n=e.getDatasetMeta(t).data;l=[];for(let e=0;e<n.length;++e)l.push({element:n[e],datasetIndex:t,index:e})}return l},point:(e,t,n,i)=>V(e,r.getRelativePosition(t,e),n.axis||"xy",i,n.includeInvisible||!1),nearest(e,t,n,i){const a=r.getRelativePosition(t,e),o=n.axis||"xy",s=n.includeInvisible||!1;return U(e,a,o,n.intersect,i,s)},x:(e,t,n,i)=>$(e,r.getRelativePosition(t,e),"x",n.intersect,i),y:(e,t,n,i)=>$(e,r.getRelativePosition(t,e),"y",n.intersect,i)}};const Q=["left","top","right","bottom"];function Z(e,t){return e.filter((e=>e.pos===t))}function X(e,t){return e.filter((e=>-1===Q.indexOf(e.pos)&&e.box.axis===t))}function G(e,t){return e.sort(((e,n)=>{const r=t?n:e,i=t?e:n;return r.weight===i.weight?r.index-i.index:r.weight-i.weight}))}function K(e,t,n,r){return Math.max(e[n],t[n])+Math.max(e[r],t[r])}function J(e,t){e.top=Math.max(e.top,t.top),e.left=Math.max(e.left,t.left),e.bottom=Math.max(e.bottom,t.bottom),e.right=Math.max(e.right,t.right)}function ee(e,t,n,i){const{pos:a,box:o}=n,s=e.maxPadding;if(!r.isObject(a)){n.size&&(e[a]-=n.size);const t=i[n.stack]||{size:0,count:1};t.size=Math.max(t.size,n.horizontal?o.height:o.width),n.size=t.size/t.count,e[a]+=n.size}o.getPadding&&J(s,o.getPadding());const l=Math.max(0,t.outerWidth-K(s,e,"left","right")),c=Math.max(0,t.outerHeight-K(s,e,"top","bottom")),u=l!==e.w,d=c!==e.h;return e.w=l,e.h=c,n.horizontal?{same:u,other:d}:{same:d,other:u}}function te(e,t){const n=t.maxPadding;return function(e){const r={left:0,top:0,right:0,bottom:0};return e.forEach((e=>{r[e]=Math.max(t[e],n[e])})),r}(e?["left","right"]:["top","bottom"])}function ne(e,t,n,r){const i=[];let a,o,s,l,c,u;for(a=0,o=e.length,c=0;a<o;++a){s=e[a],l=s.box,l.update(s.width||t.w,s.height||t.h,te(s.horizontal,t));const{same:o,other:d}=ee(t,n,s,r);c|=o&&i.length,u=u||d,l.fullSize||i.push(s)}return c&&ne(i,t,n,r)||u}function re(e,t,n,r,i){e.top=n,e.left=t,e.right=t+r,e.bottom=n+i,e.width=r,e.height=i}function ie(e,t,n,i){const a=n.padding;let{x:o,y:s}=t;for(const l of e){const e=l.box,c=i[l.stack]||{count:1,placed:0,weight:1},u=l.stackWeight/c.weight||1;if(l.horizontal){const i=t.w*u,o=c.size||e.height;r.defined(c.start)&&(s=c.start),e.fullSize?re(e,a.left,s,n.outerWidth-a.right-a.left,o):re(e,t.left+c.placed,s,i,o),c.start=s,c.placed+=i,s=e.bottom}else{const i=t.h*u,s=c.size||e.width;r.defined(c.start)&&(o=c.start),e.fullSize?re(e,o,a.top,s,n.outerHeight-a.bottom-a.top):re(e,o,t.top+c.placed,s,i),c.start=o,c.placed+=i,o=e.right}}t.x=o,t.y=s}var ae={addBox(e,t){e.boxes||(e.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(e){t.draw(e)}}]},e.boxes.push(t)},removeBox(e,t){const n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure(e,t,n){t.fullSize=n.fullSize,t.position=n.position,t.weight=n.weight},update(e,t,n,i){if(!e)return;const a=r.toPadding(e.options.layout.padding),o=Math.max(t-a.width,0),s=Math.max(n-a.height,0),l=function(e){const t=function(e){const t=[];let n,r,i,a,o,s;for(n=0,r=(e||[]).length;n<r;++n)i=e[n],({position:a,options:{stack:o,stackWeight:s=1}}=i),t.push({index:n,box:i,pos:a,horizontal:i.isHorizontal(),weight:i.weight,stack:o&&a+o,stackWeight:s});return t}(e),n=G(t.filter((e=>e.box.fullSize)),!0),r=G(Z(t,"left"),!0),i=G(Z(t,"right")),a=G(Z(t,"top"),!0),o=G(Z(t,"bottom")),s=X(t,"x"),l=X(t,"y");return{fullSize:n,leftAndTop:r.concat(a),rightAndBottom:i.concat(l).concat(o).concat(s),chartArea:Z(t,"chartArea"),vertical:r.concat(i).concat(l),horizontal:a.concat(o).concat(s)}}(e.boxes),c=l.vertical,u=l.horizontal;r.each(e.boxes,(e=>{"function"==typeof e.beforeLayout&&e.beforeLayout()}));const d=c.reduce(((e,t)=>t.box.options&&!1===t.box.options.display?e:e+1),0)||1,f=Object.freeze({outerWidth:t,outerHeight:n,padding:a,availableWidth:o,availableHeight:s,vBoxMaxWidth:o/2/d,hBoxMaxHeight:s/2}),h=Object.assign({},a);J(h,r.toPadding(i));const p=Object.assign({maxPadding:h,w:o,h:s,x:a.left,y:a.top},a),g=function(e,t){const n=function(e){const t={};for(const n of e){const{stack:e,pos:r,stackWeight:i}=n;if(!e||!Q.includes(r))continue;const a=t[e]||(t[e]={count:0,placed:0,weight:0,size:0});a.count++,a.weight+=i}return t}(e),{vBoxMaxWidth:r,hBoxMaxHeight:i}=t;let a,o,s;for(a=0,o=e.length;a<o;++a){s=e[a];const{fullSize:o}=s.box,l=n[s.stack],c=l&&s.stackWeight/l.weight;s.horizontal?(s.width=c?c*r:o&&t.availableWidth,s.height=i):(s.width=r,s.height=c?c*i:o&&t.availableHeight)}return n}(c.concat(u),f);ne(l.fullSize,p,f,g),ne(c,p,f,g),ne(u,p,f,g)&&ne(c,p,f,g),function(e){const t=e.maxPadding;function n(n){const r=Math.max(t[n]-e[n],0);return e[n]+=r,r}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(p),ie(l.leftAndTop,p,f,g),p.x+=p.w,p.y+=p.h,ie(l.rightAndBottom,p,f,g),e.chartArea={left:p.left,top:p.top,right:p.left+p.w,bottom:p.top+p.h,height:p.h,width:p.w},r.each(l.chartArea,(t=>{const n=t.box;Object.assign(n,e.chartArea),n.update(p.w,p.h,{left:0,top:0,right:0,bottom:0})}))}};class oe{acquireContext(e,t){}releaseContext(e){return!1}addEventListener(e,t,n){}removeEventListener(e,t,n){}getDevicePixelRatio(){return 1}getMaximumSize(e,t,n,r){return t=Math.max(0,t||e.width),n=n||e.height,{width:t,height:Math.max(0,r?Math.floor(t/r):n)}}isAttached(e){return!0}updateConfig(e){}}class se extends oe{acquireContext(e){return e&&e.getContext&&e.getContext("2d")||null}updateConfig(e){e.options.animation=!1}}const le="$chartjs",ce={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},ue=e=>null===e||""===e,de=!!r.supportsEventListenerOptions&&{passive:!0};function fe(e,t,n){e&&e.canvas&&e.canvas.removeEventListener(t,n,de)}function he(e,t){for(const n of e)if(n===t||n.contains(t))return!0}function pe(e,t,n){const r=e.canvas,i=new MutationObserver((e=>{let t=!1;for(const n of e)t=t||he(n.addedNodes,r),t=t&&!he(n.removedNodes,r);t&&n()}));return i.observe(document,{childList:!0,subtree:!0}),i}function ge(e,t,n){const r=e.canvas,i=new MutationObserver((e=>{let t=!1;for(const n of e)t=t||he(n.removedNodes,r),t=t&&!he(n.addedNodes,r);t&&n()}));return i.observe(document,{childList:!0,subtree:!0}),i}const me=new Map;let be=0;function ye(){const e=window.devicePixelRatio;e!==be&&(be=e,me.forEach(((t,n)=>{n.currentDevicePixelRatio!==e&&t()})))}function ve(e,t,n){const i=e.canvas,a=i&&r._getParentNode(i);if(!a)return;const o=r.throttled(((e,t)=>{const r=a.clientWidth;n(e,t),r<a.clientWidth&&n()}),window),s=new ResizeObserver((e=>{const t=e[0],n=t.contentRect.width,r=t.contentRect.height;0===n&&0===r||o(n,r)}));return s.observe(a),function(e,t){me.size||window.addEventListener("resize",ye),me.set(e,t)}(e,o),s}function xe(e,t,n){n&&n.disconnect(),"resize"===t&&function(e){me.delete(e),me.size||window.removeEventListener("resize",ye)}(e)}function we(e,t,n){const i=e.canvas,a=r.throttled((t=>{null!==e.ctx&&n(function(e,t){const n=ce[e.type]||e.type,{x:i,y:a}=r.getRelativePosition(e,t);return{type:n,chart:t,native:e,x:void 0!==i?i:null,y:void 0!==a?a:null}}(t,e))}),e);return function(e,t,n){e&&e.addEventListener(t,n,de)}(i,t,a),a}class Ae extends oe{acquireContext(e,t){const n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(function(e,t){const n=e.style,i=e.getAttribute("height"),a=e.getAttribute("width");if(e[le]={initial:{height:i,width:a,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",ue(a)){const t=r.readUsedSize(e,"width");void 0!==t&&(e.width=t)}if(ue(i))if(""===e.style.height)e.height=e.width/(t||2);else{const t=r.readUsedSize(e,"height");void 0!==t&&(e.height=t)}}(e,t),n):null}releaseContext(e){const t=e.canvas;if(!t[le])return!1;const n=t[le].initial;["height","width"].forEach((e=>{const i=n[e];r.isNullOrUndef(i)?t.removeAttribute(e):t.setAttribute(e,i)}));const i=n.style||{};return Object.keys(i).forEach((e=>{t.style[e]=i[e]})),t.width=t.width,delete t[le],!0}addEventListener(e,t,n){this.removeEventListener(e,t);const r=e.$proxies||(e.$proxies={}),i={attach:pe,detach:ge,resize:ve}[t]||we;r[t]=i(e,t,n)}removeEventListener(e,t){const n=e.$proxies||(e.$proxies={}),r=n[t];r&&(({attach:xe,detach:xe,resize:xe}[t]||fe)(e,t,r),n[t]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(e,t,n,i){return r.getMaximumSize(e,t,n,i)}isAttached(e){const t=e&&r._getParentNode(e);return!(!t||!t.isConnected)}}function _e(e){return!r._isDomSupported()||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas?se:Ae}class ke{static defaults={};static defaultRoutes=void 0;x;y;active=!1;options;$animations;tooltipPosition(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}hasValue(){return r.isNumber(this.x)&&r.isNumber(this.y)}getProps(e,t){const n=this.$animations;if(!t||!n)return this;const r={};return e.forEach((e=>{r[e]=n[e]&&n[e].active()?n[e]._to:this[e]})),r}}function Ee(e,t,n,i,a){const o=r.valueOrDefault(i,0),s=Math.min(r.valueOrDefault(a,e.length),e.length);let l,c,u,d=0;for(n=Math.ceil(n),a&&(l=a-i,n=l/Math.floor(l/n)),u=o;u<0;)d++,u=Math.round(o+d*n);for(c=Math.max(o,0);c<s;c++)c===u&&(t.push(e[c]),d++,u=Math.round(o+d*n))}const Me=(e,t,n)=>"top"===t||"left"===t?e[t]+n:e[t]-n,Oe=(e,t)=>Math.min(t||e,e);function Ce(e,t){const n=[],r=e.length/t,i=e.length;let a=0;for(;a<i;a+=r)n.push(e[Math.floor(a)]);return n}function Se(e,t,n){const r=e.ticks.length,i=Math.min(t,r-1),a=e._startPixel,o=e._endPixel,s=1e-6;let l,c=e.getPixelForTick(i);if(!(n&&(l=1===r?Math.max(c-a,o-c):0===t?(e.getPixelForTick(1)-c)/2:(c-e.getPixelForTick(i-1))/2,c+=i<t?l:-l,c<a-s||c>o+s)))return c}function Pe(e){return e.drawTicks?e.tickLength:0}function De(e,t){if(!e.display)return 0;const n=r.toFont(e.font,t),i=r.toPadding(e.padding);return(r.isArray(e.text)?e.text.length:1)*n.lineHeight+i.height}function je(e,t,n){let i=r._toLeftRightCenter(e);return(n&&"right"!==t||!n&&"right"===t)&&(i=(e=>"left"===e?"right":"right"===e?"left":e)(i)),i}class Te extends ke{constructor(e){super(),this.id=e.id,this.type=e.type,this.options=void 0,this.ctx=e.ctx,this.chart=e.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(e){this.options=e.setContext(this.getContext()),this.axis=e.axis,this._userMin=this.parse(e.min),this._userMax=this.parse(e.max),this._suggestedMin=this.parse(e.suggestedMin),this._suggestedMax=this.parse(e.suggestedMax)}parse(e,t){return e}getUserBounds(){let{_userMin:e,_userMax:t,_suggestedMin:n,_suggestedMax:i}=this;return e=r.finiteOrDefault(e,Number.POSITIVE_INFINITY),t=r.finiteOrDefault(t,Number.NEGATIVE_INFINITY),n=r.finiteOrDefault(n,Number.POSITIVE_INFINITY),i=r.finiteOrDefault(i,Number.NEGATIVE_INFINITY),{min:r.finiteOrDefault(e,n),max:r.finiteOrDefault(t,i),minDefined:r.isNumberFinite(e),maxDefined:r.isNumberFinite(t)}}getMinMax(e){let t,{min:n,max:i,minDefined:a,maxDefined:o}=this.getUserBounds();if(a&&o)return{min:n,max:i};const s=this.getMatchingVisibleMetas();for(let r=0,l=s.length;r<l;++r)t=s[r].controller.getMinMax(this,e),a||(n=Math.min(n,t.min)),o||(i=Math.max(i,t.max));return n=o&&n>i?i:n,i=a&&n>i?n:i,{min:r.finiteOrDefault(n,r.finiteOrDefault(i,n)),max:r.finiteOrDefault(i,r.finiteOrDefault(n,i))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]}getLabelItems(e=this.chart.chartArea){return this._labelItems||(this._labelItems=this._computeLabelItems(e))}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){r.callback(this.options.beforeUpdate,[this])}update(e,t,n){const{beginAtZero:i,grace:a,ticks:o}=this.options,s=o.sampleSize;this.beforeUpdate(),this.maxWidth=e,this.maxHeight=t,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=r._addGrace(this,a,i),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=s<this.ticks.length;this._convertTicksToLabels(l?Ce(this.ticks,s):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),o.display&&(o.autoSkip||"auto"===o.source)&&(this.ticks=function(e,t){const n=e.options.ticks,i=function(e){const t=e.options.offset,n=e._tickSize(),r=e._length/n+(t?0:1),i=e._maxLength/n;return Math.floor(Math.min(r,i))}(e),a=Math.min(n.maxTicksLimit||i,i),o=n.major.enabled?function(e){const t=[];let n,r;for(n=0,r=e.length;n<r;n++)e[n].major&&t.push(n);return t}(t):[],s=o.length,l=o[0],c=o[s-1],u=[];if(s>a)return function(e,t,n,r){let i,a=0,o=n[0];for(r=Math.ceil(r),i=0;i<e.length;i++)i===o&&(t.push(e[i]),a++,o=n[a*r])}(t,u,o,s/a),u;const d=function(e,t,n){const i=function(e){const t=e.length;let n,r;if(t<2)return!1;for(r=e[0],n=1;n<t;++n)if(e[n]-e[n-1]!==r)return!1;return r}(e),a=t.length/n;if(!i)return Math.max(a,1);const o=r._factorize(i);for(let e=0,t=o.length-1;e<t;e++){const t=o[e];if(t>a)return t}return Math.max(a,1)}(o,t,a);if(s>0){let e,n;const i=s>1?Math.round((c-l)/(s-1)):null;for(Ee(t,u,d,r.isNullOrUndef(i)?0:l-i,l),e=0,n=s-1;e<n;e++)Ee(t,u,d,o[e],o[e+1]);return Ee(t,u,d,c,r.isNullOrUndef(i)?t.length:c+i),u}return Ee(t,u,d),u}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let e,t,n=this.options.reverse;this.isHorizontal()?(e=this.left,t=this.right):(e=this.top,t=this.bottom,n=!n),this._startPixel=e,this._endPixel=t,this._reversePixels=n,this._length=t-e,this._alignToPixels=this.options.alignToPixels}afterUpdate(){r.callback(this.options.afterUpdate,[this])}beforeSetDimensions(){r.callback(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){r.callback(this.options.afterSetDimensions,[this])}_callHooks(e){this.chart.notifyPlugins(e,this.getContext()),r.callback(this.options[e],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){r.callback(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(e){const t=this.options.ticks;let n,i,a;for(n=0,i=e.length;n<i;n++)a=e[n],a.label=r.callback(t.callback,[a.value,n,e],this)}afterTickToLabelConversion(){r.callback(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){r.callback(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const e=this.options,t=e.ticks,n=Oe(this.ticks.length,e.ticks.maxTicksLimit),i=t.minRotation||0,a=t.maxRotation;let o,s,l,c=i;if(!this._isVisible()||!t.display||i>=a||n<=1||!this.isHorizontal())return void(this.labelRotation=i);const u=this._getLabelSizes(),d=u.widest.width,f=u.highest.height,h=r._limitValue(this.chart.width-d,0,this.maxWidth);o=e.offset?this.maxWidth/n:h/(n-1),d+6>o&&(o=h/(n-(e.offset?.5:1)),s=this.maxHeight-Pe(e.grid)-t.padding-De(e.title,this.chart.options.font),l=Math.sqrt(d*d+f*f),c=r.toDegrees(Math.min(Math.asin(r._limitValue((u.highest.height+6)/o,-1,1)),Math.asin(r._limitValue(s/l,-1,1))-Math.asin(r._limitValue(f/l,-1,1)))),c=Math.max(i,Math.min(a,c))),this.labelRotation=c}afterCalculateLabelRotation(){r.callback(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){r.callback(this.options.beforeFit,[this])}fit(){const e={width:0,height:0},{chart:t,options:{ticks:n,title:i,grid:a}}=this,o=this._isVisible(),s=this.isHorizontal();if(o){const o=De(i,t.options.font);if(s?(e.width=this.maxWidth,e.height=Pe(a)+o):(e.height=this.maxHeight,e.width=Pe(a)+o),n.display&&this.ticks.length){const{first:t,last:i,widest:a,highest:o}=this._getLabelSizes(),l=2*n.padding,c=r.toRadians(this.labelRotation),u=Math.cos(c),d=Math.sin(c);if(s){const t=n.mirror?0:d*a.width+u*o.height;e.height=Math.min(this.maxHeight,e.height+t+l)}else{const t=n.mirror?0:u*a.width+d*o.height;e.width=Math.min(this.maxWidth,e.width+t+l)}this._calculatePadding(t,i,d,u)}}this._handleMargins(),s?(this.width=this._length=t.width-this._margins.left-this._margins.right,this.height=e.height):(this.width=e.width,this.height=this._length=t.height-this._margins.top-this._margins.bottom)}_calculatePadding(e,t,n,r){const{ticks:{align:i,padding:a},position:o}=this.options,s=0!==this.labelRotation,l="top"!==o&&"x"===this.axis;if(this.isHorizontal()){const o=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let u=0,d=0;s?l?(u=r*e.width,d=n*t.height):(u=n*e.height,d=r*t.width):"start"===i?d=t.width:"end"===i?u=e.width:"inner"!==i&&(u=e.width/2,d=t.width/2),this.paddingLeft=Math.max((u-o+a)*this.width/(this.width-o),0),this.paddingRight=Math.max((d-c+a)*this.width/(this.width-c),0)}else{let n=t.height/2,r=e.height/2;"start"===i?(n=0,r=e.height):"end"===i&&(n=t.height,r=0),this.paddingTop=n+a,this.paddingBottom=r+a}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){r.callback(this.options.afterFit,[this])}isHorizontal(){const{axis:e,position:t}=this.options;return"top"===t||"bottom"===t||"x"===e}isFullSize(){return this.options.fullSize}_convertTicksToLabels(e){let t,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(e),t=0,n=e.length;t<n;t++)r.isNullOrUndef(e[t].label)&&(e.splice(t,1),n--,t--);this.afterTickToLabelConversion()}_getLabelSizes(){let e=this._labelSizes;if(!e){const t=this.options.ticks.sampleSize;let n=this.ticks;t<n.length&&(n=Ce(n,t)),this._labelSizes=e=this._computeLabelSizes(n,n.length,this.options.ticks.maxTicksLimit)}return e}_computeLabelSizes(e,t,n){const{ctx:i,_longestTextCache:a}=this,o=[],s=[],l=Math.floor(t/Oe(t,n));let c,u,d,f,h,p,g,m,b,y,v,x=0,w=0;for(c=0;c<t;c+=l){if(f=e[c].label,h=this._resolveTickFontOptions(c),i.font=p=h.string,g=a[p]=a[p]||{data:{},gc:[]},m=h.lineHeight,b=y=0,r.isNullOrUndef(f)||r.isArray(f)){if(r.isArray(f))for(u=0,d=f.length;u<d;++u)v=f[u],r.isNullOrUndef(v)||r.isArray(v)||(b=r._measureText(i,g.data,g.gc,b,v),y+=m)}else b=r._measureText(i,g.data,g.gc,b,f),y=m;o.push(b),s.push(y),x=Math.max(b,x),w=Math.max(y,w)}!function(e,t){r.each(e,(e=>{const n=e.gc,r=n.length/2;let i;if(r>t){for(i=0;i<r;++i)delete e.data[n[i]];n.splice(0,r)}}))}(a,t);const A=o.indexOf(x),_=s.indexOf(w),k=e=>({width:o[e]||0,height:s[e]||0});return{first:k(0),last:k(t-1),widest:k(A),highest:k(_),widths:o,heights:s}}getLabelForValue(e){return e}getPixelForValue(e,t){return NaN}getValueForPixel(e){}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getPixelForDecimal(e){this._reversePixels&&(e=1-e);const t=this._startPixel+e*this._length;return r._int16Range(this._alignToPixels?r._alignPixel(this.chart,t,0):t)}getDecimalForPixel(e){const t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:e,max:t}=this;return e<0&&t<0?t:e>0&&t>0?e:0}getContext(e){const t=this.ticks||[];if(e>=0&&e<t.length){const n=t[e];return n.$context||(n.$context=function(e,t,n){return r.createContext(e,{tick:n,index:t,type:"tick"})}(this.getContext(),e,n))}return this.$context||(this.$context=(n=this.chart.getContext(),r.createContext(n,{scale:this,type:"scale"})));var n}_tickSize(){const e=this.options.ticks,t=r.toRadians(this.labelRotation),n=Math.abs(Math.cos(t)),i=Math.abs(Math.sin(t)),a=this._getLabelSizes(),o=e.autoSkipPadding||0,s=a?a.widest.width+o:0,l=a?a.highest.height+o:0;return this.isHorizontal()?l*n>s*i?s/n:l/i:l*i<s*n?l/n:s/i}_isVisible(){const e=this.options.display;return"auto"!==e?!!e:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(e){const t=this.axis,n=this.chart,i=this.options,{grid:a,position:o,border:s}=i,l=a.offset,c=this.isHorizontal(),u=this.ticks.length+(l?1:0),d=Pe(a),f=[],h=s.setContext(this.getContext()),p=h.display?h.width:0,g=p/2,m=function(e){return r._alignPixel(n,e,p)};let b,y,v,x,w,A,_,k,E,M,O,C;if("top"===o)b=m(this.bottom),A=this.bottom-d,k=b-g,M=m(e.top)+g,C=e.bottom;else if("bottom"===o)b=m(this.top),M=e.top,C=m(e.bottom)-g,A=b+g,k=this.top+d;else if("left"===o)b=m(this.right),w=this.right-d,_=b-g,E=m(e.left)+g,O=e.right;else if("right"===o)b=m(this.left),E=e.left,O=m(e.right)-g,w=b+g,_=this.left+d;else if("x"===t){if("center"===o)b=m((e.top+e.bottom)/2+.5);else if(r.isObject(o)){const e=Object.keys(o)[0],t=o[e];b=m(this.chart.scales[e].getPixelForValue(t))}M=e.top,C=e.bottom,A=b+g,k=A+d}else if("y"===t){if("center"===o)b=m((e.left+e.right)/2);else if(r.isObject(o)){const e=Object.keys(o)[0],t=o[e];b=m(this.chart.scales[e].getPixelForValue(t))}w=b-g,_=w-d,E=e.left,O=e.right}const S=r.valueOrDefault(i.ticks.maxTicksLimit,u),P=Math.max(1,Math.ceil(u/S));for(y=0;y<u;y+=P){const e=this.getContext(y),t=a.setContext(e),i=s.setContext(e),o=t.lineWidth,u=t.color,d=i.dash||[],h=i.dashOffset,p=t.tickWidth,g=t.tickColor,m=t.tickBorderDash||[],b=t.tickBorderDashOffset;v=Se(this,y,l),void 0!==v&&(x=r._alignPixel(n,v,o),c?w=_=E=O=x:A=k=M=C=x,f.push({tx1:w,ty1:A,tx2:_,ty2:k,x1:E,y1:M,x2:O,y2:C,width:o,color:u,borderDash:d,borderDashOffset:h,tickWidth:p,tickColor:g,tickBorderDash:m,tickBorderDashOffset:b}))}return this._ticksLength=u,this._borderValue=b,f}_computeLabelItems(e){const t=this.axis,n=this.options,{position:i,ticks:a}=n,o=this.isHorizontal(),s=this.ticks,{align:l,crossAlign:c,padding:u,mirror:d}=a,f=Pe(n.grid),h=f+u,p=d?-u:h,g=-r.toRadians(this.labelRotation),m=[];let b,y,v,x,w,A,_,k,E,M,O,C,S="middle";if("top"===i)A=this.bottom-p,_=this._getXAxisLabelAlignment();else if("bottom"===i)A=this.top+p,_=this._getXAxisLabelAlignment();else if("left"===i){const e=this._getYAxisLabelAlignment(f);_=e.textAlign,w=e.x}else if("right"===i){const e=this._getYAxisLabelAlignment(f);_=e.textAlign,w=e.x}else if("x"===t){if("center"===i)A=(e.top+e.bottom)/2+h;else if(r.isObject(i)){const e=Object.keys(i)[0],t=i[e];A=this.chart.scales[e].getPixelForValue(t)+h}_=this._getXAxisLabelAlignment()}else if("y"===t){if("center"===i)w=(e.left+e.right)/2-h;else if(r.isObject(i)){const e=Object.keys(i)[0],t=i[e];w=this.chart.scales[e].getPixelForValue(t)}_=this._getYAxisLabelAlignment(f).textAlign}"y"===t&&("start"===l?S="top":"end"===l&&(S="bottom"));const P=this._getLabelSizes();for(b=0,y=s.length;b<y;++b){v=s[b],x=v.label;const e=a.setContext(this.getContext(b));k=this.getPixelForTick(b)+a.labelOffset,E=this._resolveTickFontOptions(b),M=E.lineHeight,O=r.isArray(x)?x.length:1;const t=O/2,n=e.color,l=e.textStrokeColor,u=e.textStrokeWidth;let f,h=_;if(o?(w=k,"inner"===_&&(h=b===y-1?this.options.reverse?"left":"right":0===b?this.options.reverse?"right":"left":"center"),C="top"===i?"near"===c||0!==g?-O*M+M/2:"center"===c?-P.highest.height/2-t*M+M:-P.highest.height+M/2:"near"===c||0!==g?M/2:"center"===c?P.highest.height/2-t*M:P.highest.height-O*M,d&&(C*=-1),0===g||e.showLabelBackdrop||(w+=M/2*Math.sin(g))):(A=k,C=(1-O)*M/2),e.showLabelBackdrop){const t=r.toPadding(e.backdropPadding),n=P.heights[b],i=P.widths[b];let a=C-t.top,o=0-t.left;switch(S){case"middle":a-=n/2;break;case"bottom":a-=n}switch(_){case"center":o-=i/2;break;case"right":o-=i;break;case"inner":b===y-1?o-=i:b>0&&(o-=i/2)}f={left:o,top:a,width:i+t.width,height:n+t.height,color:e.backdropColor}}m.push({label:x,font:E,textOffset:C,options:{rotation:g,color:n,strokeColor:l,strokeWidth:u,textAlign:h,textBaseline:S,translation:[w,A],backdrop:f}})}return m}_getXAxisLabelAlignment(){const{position:e,ticks:t}=this.options;if(-r.toRadians(this.labelRotation))return"top"===e?"left":"right";let n="center";return"start"===t.align?n="left":"end"===t.align?n="right":"inner"===t.align&&(n="inner"),n}_getYAxisLabelAlignment(e){const{position:t,ticks:{crossAlign:n,mirror:r,padding:i}}=this.options,a=e+i,o=this._getLabelSizes().widest.width;let s,l;return"left"===t?r?(l=this.right+i,"near"===n?s="left":"center"===n?(s="center",l+=o/2):(s="right",l+=o)):(l=this.right-a,"near"===n?s="right":"center"===n?(s="center",l-=o/2):(s="left",l=this.left)):"right"===t?r?(l=this.left+i,"near"===n?s="right":"center"===n?(s="center",l-=o/2):(s="left",l-=o)):(l=this.left+a,"near"===n?s="left":"center"===n?(s="center",l+=o/2):(s="right",l=this.right)):s="right",{textAlign:s,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const e=this.chart,t=this.options.position;return"left"===t||"right"===t?{top:0,left:this.left,bottom:e.height,right:this.right}:"top"===t||"bottom"===t?{top:this.top,left:0,bottom:this.bottom,right:e.width}:void 0}drawBackground(){const{ctx:e,options:{backgroundColor:t},left:n,top:r,width:i,height:a}=this;t&&(e.save(),e.fillStyle=t,e.fillRect(n,r,i,a),e.restore())}getLineWidthForValue(e){const t=this.options.grid;if(!this._isVisible()||!t.display)return 0;const n=this.ticks.findIndex((t=>t.value===e));return n>=0?t.setContext(this.getContext(n)).lineWidth:0}drawGrid(e){const t=this.options.grid,n=this.ctx,r=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(e));let i,a;const o=(e,t,r)=>{r.width&&r.color&&(n.save(),n.lineWidth=r.width,n.strokeStyle=r.color,n.setLineDash(r.borderDash||[]),n.lineDashOffset=r.borderDashOffset,n.beginPath(),n.moveTo(e.x,e.y),n.lineTo(t.x,t.y),n.stroke(),n.restore())};if(t.display)for(i=0,a=r.length;i<a;++i){const e=r[i];t.drawOnChartArea&&o({x:e.x1,y:e.y1},{x:e.x2,y:e.y2},e),t.drawTicks&&o({x:e.tx1,y:e.ty1},{x:e.tx2,y:e.ty2},{color:e.tickColor,width:e.tickWidth,borderDash:e.tickBorderDash,borderDashOffset:e.tickBorderDashOffset})}}drawBorder(){const{chart:e,ctx:t,options:{border:n,grid:i}}=this,a=n.setContext(this.getContext()),o=n.display?a.width:0;if(!o)return;const s=i.setContext(this.getContext(0)).lineWidth,l=this._borderValue;let c,u,d,f;this.isHorizontal()?(c=r._alignPixel(e,this.left,o)-o/2,u=r._alignPixel(e,this.right,s)+s/2,d=f=l):(d=r._alignPixel(e,this.top,o)-o/2,f=r._alignPixel(e,this.bottom,s)+s/2,c=u=l),t.save(),t.lineWidth=a.width,t.strokeStyle=a.color,t.beginPath(),t.moveTo(c,d),t.lineTo(u,f),t.stroke(),t.restore()}drawLabels(e){if(!this.options.ticks.display)return;const t=this.ctx,n=this._computeLabelArea();n&&r.clipArea(t,n);const i=this.getLabelItems(e);for(const e of i){const n=e.options,i=e.font,a=e.label,o=e.textOffset;r.renderText(t,a,0,o,i,n)}n&&r.unclipArea(t)}drawTitle(){const{ctx:e,options:{position:t,title:n,reverse:i}}=this;if(!n.display)return;const a=r.toFont(n.font),o=r.toPadding(n.padding),s=n.align;let l=a.lineHeight/2;"bottom"===t||"center"===t||r.isObject(t)?(l+=o.bottom,r.isArray(n.text)&&(l+=a.lineHeight*(n.text.length-1))):l+=o.top;const{titleX:c,titleY:u,maxWidth:d,rotation:f}=function(e,t,n,i){const{top:a,left:o,bottom:s,right:l,chart:c}=e,{chartArea:u,scales:d}=c;let f,h,p,g=0;const m=s-a,b=l-o;if(e.isHorizontal()){if(h=r._alignStartEnd(i,o,l),r.isObject(n)){const e=Object.keys(n)[0],r=n[e];p=d[e].getPixelForValue(r)+m-t}else p="center"===n?(u.bottom+u.top)/2+m-t:Me(e,n,t);f=l-o}else{if(r.isObject(n)){const e=Object.keys(n)[0],r=n[e];h=d[e].getPixelForValue(r)-b+t}else h="center"===n?(u.left+u.right)/2-b+t:Me(e,n,t);p=r._alignStartEnd(i,s,a),g="left"===n?-r.HALF_PI:r.HALF_PI}return{titleX:h,titleY:p,maxWidth:f,rotation:g}}(this,l,t,s);r.renderText(e,n.text,0,0,a,{color:n.color,maxWidth:d,rotation:f,textAlign:je(s,t,i),textBaseline:"middle",translation:[c,u]})}draw(e){this._isVisible()&&(this.drawBackground(),this.drawGrid(e),this.drawBorder(),this.drawTitle(),this.drawLabels(e))}_layers(){const e=this.options,t=e.ticks&&e.ticks.z||0,n=r.valueOrDefault(e.grid&&e.grid.z,-1),i=r.valueOrDefault(e.border&&e.border.z,0);return this._isVisible()&&this.draw===Te.prototype.draw?[{z:n,draw:e=>{this.drawBackground(),this.drawGrid(e),this.drawTitle()}},{z:i,draw:()=>{this.drawBorder()}},{z:t,draw:e=>{this.drawLabels(e)}}]:[{z:t,draw:e=>{this.draw(e)}}]}getMatchingVisibleMetas(e){const t=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",r=[];let i,a;for(i=0,a=t.length;i<a;++i){const a=t[i];a[n]!==this.id||e&&a.type!==e||r.push(a)}return r}_resolveTickFontOptions(e){const t=this.options.ticks.setContext(this.getContext(e));return r.toFont(t.font)}_maxDigits(){const e=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/e}}class Be{constructor(e,t,n){this.type=e,this.scope=t,this.override=n,this.items=Object.create(null)}isForType(e){return Object.prototype.isPrototypeOf.call(this.type.prototype,e.prototype)}register(e){const t=Object.getPrototypeOf(e);let n;(function(e){return"id"in e&&"defaults"in e})(t)&&(n=this.register(t));const i=this.items,a=e.id,o=this.scope+"."+a;if(!a)throw new Error("class does not have id: "+e);return a in i||(i[a]=e,function(e,t,n){const i=r.merge(Object.create(null),[n?r.defaults.get(n):{},r.defaults.get(t),e.defaults]);r.defaults.set(t,i),e.defaultRoutes&&function(e,t){Object.keys(t).forEach((n=>{const i=n.split("."),a=i.pop(),o=[e].concat(i).join("."),s=t[n].split("."),l=s.pop(),c=s.join(".");r.defaults.route(o,a,c,l)}))}(t,e.defaultRoutes),e.descriptors&&r.defaults.describe(t,e.descriptors)}(e,o,n),this.override&&r.defaults.override(e.id,e.overrides)),o}get(e){return this.items[e]}unregister(e){const t=this.items,n=e.id,i=this.scope;n in t&&delete t[n],i&&n in r.defaults[i]&&(delete r.defaults[i][n],this.override&&delete r.overrides[n])}}class Ne{constructor(){this.controllers=new Be(w,"datasets",!0),this.elements=new Be(ke,"elements"),this.plugins=new Be(Object,"plugins"),this.scales=new Be(Te,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...e){this._each("register",e)}remove(...e){this._each("unregister",e)}addControllers(...e){this._each("register",e,this.controllers)}addElements(...e){this._each("register",e,this.elements)}addPlugins(...e){this._each("register",e,this.plugins)}addScales(...e){this._each("register",e,this.scales)}getController(e){return this._get(e,this.controllers,"controller")}getElement(e){return this._get(e,this.elements,"element")}getPlugin(e){return this._get(e,this.plugins,"plugin")}getScale(e){return this._get(e,this.scales,"scale")}removeControllers(...e){this._each("unregister",e,this.controllers)}removeElements(...e){this._each("unregister",e,this.elements)}removePlugins(...e){this._each("unregister",e,this.plugins)}removeScales(...e){this._each("unregister",e,this.scales)}_each(e,t,n){[...t].forEach((t=>{const i=n||this._getRegistryForType(t);n||i.isForType(t)||i===this.plugins&&t.id?this._exec(e,i,t):r.each(t,(t=>{const r=n||this._getRegistryForType(t);this._exec(e,r,t)}))}))}_exec(e,t,n){const i=r._capitalize(e);r.callback(n["before"+i],[],n),t[e](n),r.callback(n["after"+i],[],n)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){const n=this._typedRegistries[t];if(n.isForType(e))return n}return this.plugins}_get(e,t,n){const r=t.get(e);if(void 0===r)throw new Error('"'+e+'" is not a registered '+n+".");return r}}var Ie=new Ne;class Le{constructor(){this._init=[]}notify(e,t,n,r){"beforeInit"===t&&(this._init=this._createDescriptors(e,!0),this._notify(this._init,e,"install"));const i=r?this._descriptors(e).filter(r):this._descriptors(e),a=this._notify(i,e,t,n);return"afterDestroy"===t&&(this._notify(i,e,"stop"),this._notify(this._init,e,"uninstall")),a}_notify(e,t,n,i){i=i||{};for(const a of e){const e=a.plugin,o=e[n],s=[t,i,a.options];if(!1===r.callback(o,s,e)&&i.cancelable)return!1}return!0}invalidate(){r.isNullOrUndef(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(e){if(this._cache)return this._cache;const t=this._cache=this._createDescriptors(e);return this._notifyStateChanges(e),t}_createDescriptors(e,t){const n=e&&e.config,i=r.valueOrDefault(n.options&&n.options.plugins,{}),a=function(e){const t={},n=[],r=Object.keys(Ie.plugins.items);for(let e=0;e<r.length;e++)n.push(Ie.getPlugin(r[e]));const i=e.plugins||[];for(let e=0;e<i.length;e++){const r=i[e];-1===n.indexOf(r)&&(n.push(r),t[r.id]=!0)}return{plugins:n,localIds:t}}(n);return!1!==i||t?function(e,{plugins:t,localIds:n},r,i){const a=[],o=e.getContext();for(const s of t){const t=s.id,l=ze(r[t],i);null!==l&&a.push({plugin:s,options:Fe(e.config,{plugin:s,local:n[t]},l,o)})}return a}(e,a,i,t):[]}_notifyStateChanges(e){const t=this._oldCache||[],n=this._cache,r=(e,t)=>e.filter((e=>!t.some((t=>e.plugin.id===t.plugin.id))));this._notify(r(t,n),e,"stop"),this._notify(r(n,t),e,"start")}}function ze(e,t){return t||!1!==e?!0===e?{}:e:null}function Fe(e,{plugin:t,local:n},r,i){const a=e.pluginScopeKeys(t),o=e.getOptionScopes(r,a);return n&&t.defaults&&o.push(t.defaults),e.createResolver(o,i,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Re(e,t){const n=r.defaults.datasets[e]||{};return((t.datasets||{})[e]||{}).indexAxis||t.indexAxis||n.indexAxis||"x"}function We(e){if("x"===e||"y"===e||"r"===e)return e}function He(e,...t){if(We(e))return e;for(const r of t){const t=r.axis||("top"===(n=r.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||e.length>1&&We(e[0].toLowerCase());if(t)return t}var n;throw new Error(`Cannot determine type of '${e}' axis. Please provide 'axis' or 'position' option.`)}function Ye(e,t,n){if(n[t+"AxisID"]===e)return{axis:t}}function Ve(e){const t=e.options||(e.options={});t.plugins=r.valueOrDefault(t.plugins,{}),t.scales=function(e,t){const n=r.overrides[e.type]||{scales:{}},i=t.scales||{},a=Re(e.type,t),o=Object.create(null);return Object.keys(i).forEach((t=>{const s=i[t];if(!r.isObject(s))return console.error(`Invalid scale configuration for scale: ${t}`);if(s._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${t}`);const l=He(t,s,function(e,t){if(t.data&&t.data.datasets){const n=t.data.datasets.filter((t=>t.xAxisID===e||t.yAxisID===e));if(n.length)return Ye(e,"x",n[0])||Ye(e,"y",n[0])}return{}}(t,e),r.defaults.scales[s.type]),c=function(e,t){return e===t?"_index_":"_value_"}(l,a),u=n.scales||{};o[t]=r.mergeIf(Object.create(null),[{axis:l},s,u[l],u[c]])})),e.data.datasets.forEach((n=>{const a=n.type||e.type,s=n.indexAxis||Re(a,t),l=(r.overrides[a]||{}).scales||{};Object.keys(l).forEach((e=>{const t=function(e,t){let n=e;return"_index_"===e?n=t:"_value_"===e&&(n="x"===t?"y":"x"),n}(e,s),a=n[t+"AxisID"]||t;o[a]=o[a]||Object.create(null),r.mergeIf(o[a],[{axis:t},i[a],l[e]])}))})),Object.keys(o).forEach((e=>{const t=o[e];r.mergeIf(t,[r.defaults.scales[t.type],r.defaults.scale])})),o}(e,t)}function Ue(e){return(e=e||{}).datasets=e.datasets||[],e.labels=e.labels||[],e}const $e=new Map,qe=new Set;function Qe(e,t){let n=$e.get(e);return n||(n=t(),$e.set(e,n),qe.add(n)),n}const Ze=(e,t,n)=>{const i=r.resolveObjectKey(t,n);void 0!==i&&e.add(i)};class Xe{constructor(e){this._config=function(e){return(e=e||{}).data=Ue(e.data),Ve(e),e}(e),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(e){this._config.type=e}get data(){return this._config.data}set data(e){this._config.data=Ue(e)}get options(){return this._config.options}set options(e){this._config.options=e}get plugins(){return this._config.plugins}update(){const e=this._config;this.clearCache(),Ve(e)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(e){return Qe(e,(()=>[[`datasets.${e}`,""]]))}datasetAnimationScopeKeys(e,t){return Qe(`${e}.transition.${t}`,(()=>[[`datasets.${e}.transitions.${t}`,`transitions.${t}`],[`datasets.${e}`,""]]))}datasetElementScopeKeys(e,t){return Qe(`${e}-${t}`,(()=>[[`datasets.${e}.elements.${t}`,`datasets.${e}`,`elements.${t}`,""]]))}pluginScopeKeys(e){const t=e.id;return Qe(`${this.type}-plugin-${t}`,(()=>[[`plugins.${t}`,...e.additionalOptionScopes||[]]]))}_cachedScopes(e,t){const n=this._scopeCache;let r=n.get(e);return r&&!t||(r=new Map,n.set(e,r)),r}getOptionScopes(e,t,n){const{options:i,type:a}=this,o=this._cachedScopes(e,n),s=o.get(t);if(s)return s;const l=new Set;t.forEach((t=>{e&&(l.add(e),t.forEach((t=>Ze(l,e,t)))),t.forEach((e=>Ze(l,i,e))),t.forEach((e=>Ze(l,r.overrides[a]||{},e))),t.forEach((e=>Ze(l,r.defaults,e))),t.forEach((e=>Ze(l,r.descriptors,e)))}));const c=Array.from(l);return 0===c.length&&c.push(Object.create(null)),qe.has(t)&&o.set(t,c),c}chartOptionScopes(){const{options:e,type:t}=this;return[e,r.overrides[t]||{},r.defaults.datasets[t]||{},{type:t},r.defaults,r.descriptors]}resolveNamedOptions(e,t,n,i=[""]){const a={$shared:!0},{resolver:o,subPrefixes:s}=Ge(this._resolverCache,e,i);let l=o;if(function(e,t){const{isScriptable:n,isIndexable:i}=r._descriptors(e);for(const a of t){const t=n(a),o=i(a),s=(o||t)&&e[a];if(t&&(r.isFunction(s)||Ke(s))||o&&r.isArray(s))return!0}return!1}(o,t)){a.$shared=!1,n=r.isFunction(n)?n():n;const t=this.createResolver(e,n,s);l=r._attachContext(o,n,t)}for(const e of t)a[e]=l[e];return a}createResolver(e,t,n=[""],i){const{resolver:a}=Ge(this._resolverCache,e,n);return r.isObject(t)?r._attachContext(a,t,void 0,i):a}}function Ge(e,t,n){let i=e.get(t);i||(i=new Map,e.set(t,i));const a=n.join();let o=i.get(a);return o||(o={resolver:r._createResolver(t,n),subPrefixes:n.filter((e=>!e.toLowerCase().includes("hover")))},i.set(a,o)),o}const Ke=e=>r.isObject(e)&&Object.getOwnPropertyNames(e).some((t=>r.isFunction(e[t]))),Je=["top","bottom","left","right","chartArea"];function et(e,t){return"top"===e||"bottom"===e||-1===Je.indexOf(e)&&"x"===t}function tt(e,t){return function(n,r){return n[e]===r[e]?n[t]-r[t]:n[e]-r[e]}}function nt(e){const t=e.chart,n=t.options.animation;t.notifyPlugins("afterRender"),r.callback(n&&n.onComplete,[e],t)}function rt(e){const t=e.chart,n=t.options.animation;r.callback(n&&n.onProgress,[e],t)}function it(e){return r._isDomSupported()&&"string"==typeof e?e=document.getElementById(e):e&&e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas),e}const at={},ot=e=>{const t=it(e);return Object.values(at).filter((e=>e.canvas===t)).pop()};function st(e,t,n){const r=Object.keys(e);for(const i of r){const r=+i;if(r>=t){const a=e[i];delete e[i],(n>0||r>t)&&(e[r+n]=a)}}}function lt(e,t,n){return e.options.clip?e[n]:t[n]}class ct{static defaults=r.defaults;static instances=at;static overrides=r.overrides;static registry=Ie;static version="4.4.6";static getChart=ot;static register(...e){Ie.add(...e),ut()}static unregister(...e){Ie.remove(...e),ut()}constructor(e,t){const n=this.config=new Xe(t),i=it(e),o=ot(i);if(o)throw new Error("Canvas is already in use. Chart with ID '"+o.id+"' must be destroyed before the canvas with ID '"+o.canvas.id+"' can be reused.");const s=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||_e(i)),this.platform.updateConfig(n);const l=this.platform.acquireContext(i,s.aspectRatio),c=l&&l.canvas,u=c&&c.height,d=c&&c.width;this.id=r.uid(),this.ctx=l,this.canvas=c,this.width=d,this.height=u,this._options=s,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new Le,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=r.debounce((e=>this.update(e)),s.resizeDelay||0),this._dataChanges=[],at[this.id]=this,l&&c?(a.listen(this,"complete",nt),a.listen(this,"progress",rt),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:e,maintainAspectRatio:t},width:n,height:i,_aspectRatio:a}=this;return r.isNullOrUndef(e)?t&&a?a:i?n/i:null:e}get data(){return this.config.data}set data(e){this.config.data=e}get options(){return this._options}set options(e){this.config.options=e}get registry(){return Ie}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():r.retinaScale(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return r.clearCanvas(this.canvas,this.ctx),this}stop(){return a.stop(this),this}resize(e,t){a.running(this)?this._resizeBeforeDraw={width:e,height:t}:this._resize(e,t)}_resize(e,t){const n=this.options,i=this.canvas,a=n.maintainAspectRatio&&this.aspectRatio,o=this.platform.getMaximumSize(i,e,t,a),s=n.devicePixelRatio||this.platform.getDevicePixelRatio(),l=this.width?"resize":"attach";this.width=o.width,this.height=o.height,this._aspectRatio=this.aspectRatio,r.retinaScale(this,s,!0)&&(this.notifyPlugins("resize",{size:o}),r.callback(n.onResize,[this,o],this),this.attached&&this._doResize(l)&&this.render())}ensureScalesHaveIDs(){const e=this.options.scales||{};r.each(e,((e,t)=>{e.id=t}))}buildOrUpdateScales(){const e=this.options,t=e.scales,n=this.scales,i=Object.keys(n).reduce(((e,t)=>(e[t]=!1,e)),{});let a=[];t&&(a=a.concat(Object.keys(t).map((e=>{const n=t[e],r=He(e,n),i="r"===r,a="x"===r;return{options:n,dposition:i?"chartArea":a?"bottom":"left",dtype:i?"radialLinear":a?"category":"linear"}})))),r.each(a,(t=>{const a=t.options,o=a.id,s=He(o,a),l=r.valueOrDefault(a.type,t.dtype);void 0!==a.position&&et(a.position,s)===et(t.dposition)||(a.position=t.dposition),i[o]=!0;let c=null;o in n&&n[o].type===l?c=n[o]:(c=new(Ie.getScale(l))({id:o,type:l,ctx:this.ctx,chart:this}),n[c.id]=c),c.init(a,e)})),r.each(i,((e,t)=>{e||delete n[t]})),r.each(n,(e=>{ae.configure(this,e,e.options),ae.addBox(this,e)}))}_updateMetasets(){const e=this._metasets,t=this.data.datasets.length,n=e.length;if(e.sort(((e,t)=>e.index-t.index)),n>t){for(let e=t;e<n;++e)this._destroyDatasetMeta(e);e.splice(t,n-t)}this._sortedMetasets=e.slice(0).sort(tt("order","index"))}_removeUnreferencedMetasets(){const{_metasets:e,data:{datasets:t}}=this;e.length>t.length&&delete this._stacks,e.forEach(((e,n)=>{0===t.filter((t=>t===e._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const e=[],t=this.data.datasets;let n,i;for(this._removeUnreferencedMetasets(),n=0,i=t.length;n<i;n++){const i=t[n];let a=this.getDatasetMeta(n);const o=i.type||this.config.type;if(a.type&&a.type!==o&&(this._destroyDatasetMeta(n),a=this.getDatasetMeta(n)),a.type=o,a.indexAxis=i.indexAxis||Re(o,this.options),a.order=i.order||0,a.index=n,a.label=""+i.label,a.visible=this.isDatasetVisible(n),a.controller)a.controller.updateIndex(n),a.controller.linkScales();else{const t=Ie.getController(o),{datasetElementType:i,dataElementType:s}=r.defaults.datasets[o];Object.assign(t,{dataElementType:Ie.getElement(s),datasetElementType:i&&Ie.getElement(i)}),a.controller=new t(this,n),e.push(a.controller)}}return this._updateMetasets(),e}_resetElements(){r.each(this.data.datasets,((e,t)=>{this.getDatasetMeta(t).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(e){const t=this.config;t.update();const n=this._options=t.createResolver(t.chartOptionScopes(),this.getContext()),i=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:e,cancelable:!0}))return;const a=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let o=0;for(let e=0,t=this.data.datasets.length;e<t;e++){const{controller:t}=this.getDatasetMeta(e),n=!i&&-1===a.indexOf(t);t.buildOrUpdateElements(n),o=Math.max(+t.getMaxOverflow(),o)}o=this._minPadding=n.layout.autoPadding?o:0,this._updateLayout(o),i||r.each(a,(e=>{e.reset()})),this._updateDatasets(e),this.notifyPlugins("afterUpdate",{mode:e}),this._layers.sort(tt("z","_idx"));const{_active:s,_lastEvent:l}=this;l?this._eventHandler(l,!0):s.length&&this._updateHoverStyles(s,s,!0),this.render()}_updateScales(){r.each(this.scales,(e=>{ae.removeBox(this,e)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const e=this.options,t=new Set(Object.keys(this._listeners)),n=new Set(e.events);r.setsEqual(t,n)&&!!this._responsiveListeners===e.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:e}=this,t=this._getUniformDataChanges()||[];for(const{method:n,start:r,count:i}of t)st(e,r,"_removeElements"===n?-i:i)}_getUniformDataChanges(){const e=this._dataChanges;if(!e||!e.length)return;this._dataChanges=[];const t=this.data.datasets.length,n=t=>new Set(e.filter((e=>e[0]===t)).map(((e,t)=>t+","+e.splice(1).join(",")))),i=n(0);for(let e=1;e<t;e++)if(!r.setsEqual(i,n(e)))return;return Array.from(i).map((e=>e.split(","))).map((e=>({method:e[1],start:+e[2],count:+e[3]})))}_updateLayout(e){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;ae.update(this,this.width,this.height,e);const t=this.chartArea,n=t.width<=0||t.height<=0;this._layers=[],r.each(this.boxes,(e=>{n&&"chartArea"===e.position||(e.configure&&e.configure(),this._layers.push(...e._layers()))}),this),this._layers.forEach(((e,t)=>{e._idx=t})),this.notifyPlugins("afterLayout")}_updateDatasets(e){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:e,cancelable:!0})){for(let e=0,t=this.data.datasets.length;e<t;++e)this.getDatasetMeta(e).controller.configure();for(let t=0,n=this.data.datasets.length;t<n;++t)this._updateDataset(t,r.isFunction(e)?e({datasetIndex:t}):e);this.notifyPlugins("afterDatasetsUpdate",{mode:e})}}_updateDataset(e,t){const n=this.getDatasetMeta(e),r={meta:n,index:e,mode:t,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",r)&&(n.controller._update(t),r.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",r))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(a.has(this)?this.attached&&!a.running(this)&&a.start(this):(this.draw(),nt({chart:this})))}draw(){let e;if(this._resizeBeforeDraw){const{width:e,height:t}=this._resizeBeforeDraw;this._resizeBeforeDraw=null,this._resize(e,t)}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const t=this._layers;for(e=0;e<t.length&&t[e].z<=0;++e)t[e].draw(this.chartArea);for(this._drawDatasets();e<t.length;++e)t[e].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(e){const t=this._sortedMetasets,n=[];let r,i;for(r=0,i=t.length;r<i;++r){const i=t[r];e&&!i.visible||n.push(i)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const e=this.getSortedVisibleDatasetMetas();for(let t=e.length-1;t>=0;--t)this._drawDataset(e[t]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(e){const t=this.ctx,n=e._clip,i=!n.disabled,a=function(e,t){const{xScale:n,yScale:r}=e;return n&&r?{left:lt(n,t,"left"),right:lt(n,t,"right"),top:lt(r,t,"top"),bottom:lt(r,t,"bottom")}:t}(e,this.chartArea),o={meta:e,index:e.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",o)&&(i&&r.clipArea(t,{left:!1===n.left?0:a.left-n.left,right:!1===n.right?this.width:a.right+n.right,top:!1===n.top?0:a.top-n.top,bottom:!1===n.bottom?this.height:a.bottom+n.bottom}),e.controller.draw(),i&&r.unclipArea(t),o.cancelable=!1,this.notifyPlugins("afterDatasetDraw",o))}isPointInArea(e){return r._isPointInArea(e,this.chartArea,this._minPadding)}getElementsAtEventForMode(e,t,n,r){const i=q.modes[t];return"function"==typeof i?i(this,e,n,r):[]}getDatasetMeta(e){const t=this.data.datasets[e],n=this._metasets;let r=n.filter((e=>e&&e._dataset===t)).pop();return r||(r={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t&&t.order||0,index:e,_dataset:t,_parsed:[],_sorted:!1},n.push(r)),r}getContext(){return this.$context||(this.$context=r.createContext(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(e){const t=this.data.datasets[e];if(!t)return!1;const n=this.getDatasetMeta(e);return"boolean"==typeof n.hidden?!n.hidden:!t.hidden}setDatasetVisibility(e,t){this.getDatasetMeta(e).hidden=!t}toggleDataVisibility(e){this._hiddenIndices[e]=!this._hiddenIndices[e]}getDataVisibility(e){return!this._hiddenIndices[e]}_updateVisibility(e,t,n){const i=n?"show":"hide",a=this.getDatasetMeta(e),o=a.controller._resolveAnimations(void 0,i);r.defined(t)?(a.data[t].hidden=!n,this.update()):(this.setDatasetVisibility(e,n),o.update(a,{visible:n}),this.update((t=>t.datasetIndex===e?i:void 0)))}hide(e,t){this._updateVisibility(e,t,!1)}show(e,t){this._updateVisibility(e,t,!0)}_destroyDatasetMeta(e){const t=this._metasets[e];t&&t.controller&&t.controller._destroy(),delete this._metasets[e]}_stop(){let e,t;for(this.stop(),a.remove(this),e=0,t=this.data.datasets.length;e<t;++e)this._destroyDatasetMeta(e)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:e,ctx:t}=this;this._stop(),this.config.clearCache(),e&&(this.unbindEvents(),r.clearCanvas(e,t),this.platform.releaseContext(t),this.canvas=null,this.ctx=null),delete at[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...e){return this.canvas.toDataURL(...e)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const e=this._listeners,t=this.platform,n=(n,r)=>{t.addEventListener(this,n,r),e[n]=r},i=(e,t,n)=>{e.offsetX=t,e.offsetY=n,this._eventHandler(e)};r.each(this.options.events,(e=>n(e,i)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const e=this._responsiveListeners,t=this.platform,n=(n,r)=>{t.addEventListener(this,n,r),e[n]=r},r=(n,r)=>{e[n]&&(t.removeEventListener(this,n,r),delete e[n])},i=(e,t)=>{this.canvas&&this.resize(e,t)};let a;const o=()=>{r("attach",o),this.attached=!0,this.resize(),n("resize",i),n("detach",a)};a=()=>{this.attached=!1,r("resize",i),this._stop(),this._resize(0,0),n("attach",o)},t.isAttached(this.canvas)?o():a()}unbindEvents(){r.each(this._listeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._listeners={},r.each(this._responsiveListeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._responsiveListeners=void 0}updateHoverStyle(e,t,n){const r=n?"set":"remove";let i,a,o,s;for("dataset"===t&&(i=this.getDatasetMeta(e[0].datasetIndex),i.controller["_"+r+"DatasetHoverStyle"]()),o=0,s=e.length;o<s;++o){a=e[o];const t=a&&this.getDatasetMeta(a.datasetIndex).controller;t&&t[r+"HoverStyle"](a.element,a.datasetIndex,a.index)}}getActiveElements(){return this._active||[]}setActiveElements(e){const t=this._active||[],n=e.map((({datasetIndex:e,index:t})=>{const n=this.getDatasetMeta(e);if(!n)throw new Error("No dataset found at index "+e);return{datasetIndex:e,element:n.data[t],index:t}}));!r._elementsEqual(n,t)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,t))}notifyPlugins(e,t,n){return this._plugins.notify(this,e,t,n)}isPluginEnabled(e){return 1===this._plugins._cache.filter((t=>t.plugin.id===e)).length}_updateHoverStyles(e,t,n){const r=this.options.hover,i=(e,t)=>e.filter((e=>!t.some((t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)))),a=i(t,e),o=n?e:i(e,t);a.length&&this.updateHoverStyle(a,r.mode,!1),o.length&&r.mode&&this.updateHoverStyle(o,r.mode,!0)}_eventHandler(e,t){const n={event:e,replay:t,cancelable:!0,inChartArea:this.isPointInArea(e)},r=t=>(t.options.events||this.options.events).includes(e.native.type);if(!1===this.notifyPlugins("beforeEvent",n,r))return;const i=this._handleEvent(e,t,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,r),(i||n.changed)&&this.render(),this}_handleEvent(e,t,n){const{_active:i=[],options:a}=this,o=t,s=this._getActiveElements(e,i,n,o),l=r._isClickEvent(e),c=function(e,t,n,r){return n&&"mouseout"!==e.type?r?t:e:null}(e,this._lastEvent,n,l);n&&(this._lastEvent=null,r.callback(a.onHover,[e,s,this],this),l&&r.callback(a.onClick,[e,s,this],this));const u=!r._elementsEqual(s,i);return(u||t)&&(this._active=s,this._updateHoverStyles(s,i,t)),this._lastEvent=c,u}_getActiveElements(e,t,n,r){if("mouseout"===e.type)return[];if(!n)return t;const i=this.options.hover;return this.getElementsAtEventForMode(e,i.mode,i,r)}}function ut(){return r.each(ct.instances,(e=>e._plugins.invalidate()))}function dt(e,t,n,r){return{x:n+e*Math.cos(t),y:r+e*Math.sin(t)}}function ft(e,t,n,i,a,o){const{x:s,y:l,startAngle:c,pixelMargin:u,innerRadius:d}=t,f=Math.max(t.outerRadius+i+n-u,0),h=d>0?d+i+n+u:0;let p=0;const g=a-c;if(i){const e=((d>0?d-i:0)+(f>0?f-i:0))/2;p=(g-(0!==e?g*e/(e+i):g))/2}const m=(g-Math.max(.001,g*f-n/r.PI)/f)/2,b=c+m+p,y=a-m-p,{outerStart:v,outerEnd:x,innerStart:w,innerEnd:A}=function(e,t,n,i){const a=(o=e.options.borderRadius,r._readValueToProps(o,["outerStart","outerEnd","innerStart","innerEnd"]));var o;const s=(n-t)/2,l=Math.min(s,i*t/2),c=e=>{const t=(n-Math.min(s,e))*i/2;return r._limitValue(e,0,Math.min(s,t))};return{outerStart:c(a.outerStart),outerEnd:c(a.outerEnd),innerStart:r._limitValue(a.innerStart,0,l),innerEnd:r._limitValue(a.innerEnd,0,l)}}(t,h,f,y-b),_=f-v,k=f-x,E=b+v/_,M=y-x/k,O=h+w,C=h+A,S=b+w/O,P=y-A/C;if(e.beginPath(),o){const t=(E+M)/2;if(e.arc(s,l,f,E,t),e.arc(s,l,f,t,M),x>0){const t=dt(k,M,s,l);e.arc(t.x,t.y,x,M,y+r.HALF_PI)}const n=dt(C,y,s,l);if(e.lineTo(n.x,n.y),A>0){const t=dt(C,P,s,l);e.arc(t.x,t.y,A,y+r.HALF_PI,P+Math.PI)}const i=(y-A/h+(b+w/h))/2;if(e.arc(s,l,h,y-A/h,i,!0),e.arc(s,l,h,i,b+w/h,!0),w>0){const t=dt(O,S,s,l);e.arc(t.x,t.y,w,S+Math.PI,b-r.HALF_PI)}const a=dt(_,b,s,l);if(e.lineTo(a.x,a.y),v>0){const t=dt(_,E,s,l);e.arc(t.x,t.y,v,b-r.HALF_PI,E)}}else{e.moveTo(s,l);const t=Math.cos(E)*f+s,n=Math.sin(E)*f+l;e.lineTo(t,n);const r=Math.cos(M)*f+s,i=Math.sin(M)*f+l;e.lineTo(r,i)}e.closePath()}class ht extends ke{static id="arc";static defaults={borderAlign:"center",borderColor:"#fff",borderDash:[],borderDashOffset:0,borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0};static defaultRoutes={backgroundColor:"backgroundColor"};static descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e};circumference;endAngle;fullCircles;innerRadius;outerRadius;pixelMargin;startAngle;constructor(e){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,e&&Object.assign(this,e)}inRange(e,t,n){const i=this.getProps(["x","y"],n),{angle:a,distance:o}=r.getAngleFromPoint(i,{x:e,y:t}),{startAngle:s,endAngle:l,innerRadius:c,outerRadius:u,circumference:d}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),f=(this.options.spacing+this.options.borderWidth)/2,h=r.valueOrDefault(d,l-s),p=r._angleBetween(a,s,l)&&s!==l,g=h>=r.TAU||p,m=r._isBetween(o,c+f,u+f);return g&&m}getCenterPoint(e){const{x:t,y:n,startAngle:r,endAngle:i,innerRadius:a,outerRadius:o}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius"],e),{offset:s,spacing:l}=this.options,c=(r+i)/2,u=(a+o+l+s)/2;return{x:t+Math.cos(c)*u,y:n+Math.sin(c)*u}}tooltipPosition(e){return this.getCenterPoint(e)}draw(e){const{options:t,circumference:n}=this,i=(t.offset||0)/4,a=(t.spacing||0)/2,o=t.circular;if(this.pixelMargin="inner"===t.borderAlign?.33:0,this.fullCircles=n>r.TAU?Math.floor(n/r.TAU):0,0===n||this.innerRadius<0||this.outerRadius<0)return;e.save();const s=(this.startAngle+this.endAngle)/2;e.translate(Math.cos(s)*i,Math.sin(s)*i);const l=i*(1-Math.sin(Math.min(r.PI,n||0)));e.fillStyle=t.backgroundColor,e.strokeStyle=t.borderColor,function(e,t,n,i,a){const{fullCircles:o,startAngle:s,circumference:l}=t;let c=t.endAngle;if(o){ft(e,t,n,i,c,a);for(let t=0;t<o;++t)e.fill();isNaN(l)||(c=s+(l%r.TAU||r.TAU))}ft(e,t,n,i,c,a),e.fill()}(e,this,l,a,o),function(e,t,n,i,a){const{fullCircles:o,startAngle:s,circumference:l,options:c}=t,{borderWidth:u,borderJoinStyle:d,borderDash:f,borderDashOffset:h}=c,p="inner"===c.borderAlign;if(!u)return;e.setLineDash(f||[]),e.lineDashOffset=h,p?(e.lineWidth=2*u,e.lineJoin=d||"round"):(e.lineWidth=u,e.lineJoin=d||"bevel");let g=t.endAngle;if(o){ft(e,t,n,i,g,a);for(let t=0;t<o;++t)e.stroke();isNaN(l)||(g=s+(l%r.TAU||r.TAU))}p&&function(e,t,n){const{startAngle:i,pixelMargin:a,x:o,y:s,outerRadius:l,innerRadius:c}=t;let u=a/l;e.beginPath(),e.arc(o,s,l,i-u,n+u),c>a?(u=a/c,e.arc(o,s,c,n+u,i-u,!0)):e.arc(o,s,a,n+r.HALF_PI,i-r.HALF_PI),e.closePath(),e.clip()}(e,t,g),o||(ft(e,t,n,i,g,a),e.stroke())}(e,this,l,a,o),e.restore()}}function pt(e,t,n=t){e.lineCap=r.valueOrDefault(n.borderCapStyle,t.borderCapStyle),e.setLineDash(r.valueOrDefault(n.borderDash,t.borderDash)),e.lineDashOffset=r.valueOrDefault(n.borderDashOffset,t.borderDashOffset),e.lineJoin=r.valueOrDefault(n.borderJoinStyle,t.borderJoinStyle),e.lineWidth=r.valueOrDefault(n.borderWidth,t.borderWidth),e.strokeStyle=r.valueOrDefault(n.borderColor,t.borderColor)}function gt(e,t,n){e.lineTo(n.x,n.y)}function mt(e,t,n={}){const r=e.length,{start:i=0,end:a=r-1}=n,{start:o,end:s}=t,l=Math.max(i,o),c=Math.min(a,s),u=i<o&&a<o||i>s&&a>s;return{count:r,start:l,loop:t.loop,ilen:c<l&&!u?r+c-l:c-l}}function bt(e,t,n,i){const{points:a,options:o}=t,{count:s,start:l,loop:c,ilen:u}=mt(a,n,i),d=function(e){return e.stepped?r._steppedLineTo:e.tension||"monotone"===e.cubicInterpolationMode?r._bezierCurveTo:gt}(o);let f,h,p,{move:g=!0,reverse:m}=i||{};for(f=0;f<=u;++f)h=a[(l+(m?u-f:f))%s],h.skip||(g?(e.moveTo(h.x,h.y),g=!1):d(e,p,h,m,o.stepped),p=h);return c&&(h=a[(l+(m?u:0))%s],d(e,p,h,m,o.stepped)),!!c}function yt(e,t,n,r){const i=t.points,{count:a,start:o,ilen:s}=mt(i,n,r),{move:l=!0,reverse:c}=r||{};let u,d,f,h,p,g,m=0,b=0;const y=e=>(o+(c?s-e:e))%a,v=()=>{h!==p&&(e.lineTo(m,p),e.lineTo(m,h),e.lineTo(m,g))};for(l&&(d=i[y(0)],e.moveTo(d.x,d.y)),u=0;u<=s;++u){if(d=i[y(u)],d.skip)continue;const t=d.x,n=d.y,r=0|t;r===f?(n<h?h=n:n>p&&(p=n),m=(b*m+t)/++b):(v(),e.lineTo(t,n),f=r,b=0,h=p=n),g=n}v()}function vt(e){const t=e.options,n=t.borderDash&&t.borderDash.length;return e._decimated||e._loop||t.tension||"monotone"===t.cubicInterpolationMode||t.stepped||n?bt:yt}const xt="function"==typeof Path2D;class wt extends ke{static id="line";static defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};static descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e&&"fill"!==e};constructor(e){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,e&&Object.assign(this,e)}updateControlPoints(e,t){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const i=n.spanGaps?this._loop:this._fullLoop;r._updateBezierControlPoints(this._points,n,e,i,t),this._pointsUpdated=!0}}set points(e){this._points=e,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=r._computeSegments(this,this.options.segment))}first(){const e=this.segments,t=this.points;return e.length&&t[e[0].start]}last(){const e=this.segments,t=this.points,n=e.length;return n&&t[e[n-1].end]}interpolate(e,t){const n=this.options,i=e[t],a=this.points,o=r._boundSegments(this,{property:t,start:i,end:i});if(!o.length)return;const s=[],l=function(e){return e.stepped?r._steppedInterpolation:e.tension||"monotone"===e.cubicInterpolationMode?r._bezierInterpolation:r._pointInLine}(n);let c,u;for(c=0,u=o.length;c<u;++c){const{start:r,end:u}=o[c],d=a[r],f=a[u];if(d===f){s.push(d);continue}const h=l(d,f,Math.abs((i-d[t])/(f[t]-d[t])),n.stepped);h[t]=e[t],s.push(h)}return 1===s.length?s[0]:s}pathSegment(e,t,n){return vt(this)(e,this,t,n)}path(e,t,n){const r=this.segments,i=vt(this);let a=this._loop;t=t||0,n=n||this.points.length-t;for(const o of r)a&=i(e,this,o,{start:t,end:t+n-1});return!!a}draw(e,t,n,r){const i=this.options||{};(this.points||[]).length&&i.borderWidth&&(e.save(),function(e,t,n,r){xt&&!t.options.segment?function(e,t,n,r){let i=t._path;i||(i=t._path=new Path2D,t.path(i,n,r)&&i.closePath()),pt(e,t.options),e.stroke(i)}(e,t,n,r):function(e,t,n,r){const{segments:i,options:a}=t,o=vt(t);for(const s of i)pt(e,a,s.style),e.beginPath(),o(e,t,s,{start:n,end:n+r-1})&&e.closePath(),e.stroke()}(e,t,n,r)}(e,this,n,r),e.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function At(e,t,n,r){const i=e.options,{[n]:a}=e.getProps([n],r);return Math.abs(t-a)<i.radius+i.hitRadius}class _t extends ke{static id="point";parsed;skip;stop;static defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(e){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,e&&Object.assign(this,e)}inRange(e,t,n){const r=this.options,{x:i,y:a}=this.getProps(["x","y"],n);return Math.pow(e-i,2)+Math.pow(t-a,2)<Math.pow(r.hitRadius+r.radius,2)}inXRange(e,t){return At(this,e,"x",t)}inYRange(e,t){return At(this,e,"y",t)}getCenterPoint(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}size(e){let t=(e=e||this.options||{}).radius||0;return t=Math.max(t,t&&e.hoverRadius||0),2*(t+(t&&e.borderWidth||0))}draw(e,t){const n=this.options;this.skip||n.radius<.1||!r._isPointInArea(this,t,this.size(n)/2)||(e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.fillStyle=n.backgroundColor,r.drawPoint(e,n,this.x,this.y))}getRange(){const e=this.options||{};return e.radius+e.hitRadius}}function kt(e,t){const{x:n,y:r,base:i,width:a,height:o}=e.getProps(["x","y","base","width","height"],t);let s,l,c,u,d;return e.horizontal?(d=o/2,s=Math.min(n,i),l=Math.max(n,i),c=r-d,u=r+d):(d=a/2,s=n-d,l=n+d,c=Math.min(r,i),u=Math.max(r,i)),{left:s,top:c,right:l,bottom:u}}function Et(e,t,n,i){return e?0:r._limitValue(t,n,i)}function Mt(e,t,n,i){const a=null===t,o=null===n,s=e&&!(a&&o)&&kt(e,i);return s&&(a||r._isBetween(t,s.left,s.right))&&(o||r._isBetween(n,s.top,s.bottom))}function Ot(e,t){e.rect(t.x,t.y,t.w,t.h)}function Ct(e,t,n={}){const r=e.x!==n.x?-t:0,i=e.y!==n.y?-t:0,a=(e.x+e.w!==n.x+n.w?t:0)-r,o=(e.y+e.h!==n.y+n.h?t:0)-i;return{x:e.x+r,y:e.y+i,w:e.w+a,h:e.h+o,radius:e.radius}}class St extends ke{static id="bar";static defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0};static defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};constructor(e){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,e&&Object.assign(this,e)}draw(e){const{inflateAmount:t,options:{borderColor:n,backgroundColor:i}}=this,{inner:a,outer:o}=function(e){const t=kt(e),n=t.right-t.left,i=t.bottom-t.top,a=function(e,t,n){const i=e.options.borderWidth,a=e.borderSkipped,o=r.toTRBL(i);return{t:Et(a.top,o.top,0,n),r:Et(a.right,o.right,0,t),b:Et(a.bottom,o.bottom,0,n),l:Et(a.left,o.left,0,t)}}(e,n/2,i/2),o=function(e,t,n){const{enableBorderRadius:i}=e.getProps(["enableBorderRadius"]),a=e.options.borderRadius,o=r.toTRBLCorners(a),s=Math.min(t,n),l=e.borderSkipped,c=i||r.isObject(a);return{topLeft:Et(!c||l.top||l.left,o.topLeft,0,s),topRight:Et(!c||l.top||l.right,o.topRight,0,s),bottomLeft:Et(!c||l.bottom||l.left,o.bottomLeft,0,s),bottomRight:Et(!c||l.bottom||l.right,o.bottomRight,0,s)}}(e,n/2,i/2);return{outer:{x:t.left,y:t.top,w:n,h:i,radius:o},inner:{x:t.left+a.l,y:t.top+a.t,w:n-a.l-a.r,h:i-a.t-a.b,radius:{topLeft:Math.max(0,o.topLeft-Math.max(a.t,a.l)),topRight:Math.max(0,o.topRight-Math.max(a.t,a.r)),bottomLeft:Math.max(0,o.bottomLeft-Math.max(a.b,a.l)),bottomRight:Math.max(0,o.bottomRight-Math.max(a.b,a.r))}}}}(this),s=(l=o.radius).topLeft||l.topRight||l.bottomLeft||l.bottomRight?r.addRoundedRectPath:Ot;var l;e.save(),o.w===a.w&&o.h===a.h||(e.beginPath(),s(e,Ct(o,t,a)),e.clip(),s(e,Ct(a,-t,o)),e.fillStyle=n,e.fill("evenodd")),e.beginPath(),s(e,Ct(a,t)),e.fillStyle=i,e.fill(),e.restore()}inRange(e,t,n){return Mt(this,e,t,n)}inXRange(e,t){return Mt(this,e,null,t)}inYRange(e,t){return Mt(this,null,e,t)}getCenterPoint(e){const{x:t,y:n,base:r,horizontal:i}=this.getProps(["x","y","base","horizontal"],e);return{x:i?(t+r)/2:t,y:i?n:(n+r)/2}}getRange(e){return"x"===e?this.width/2:this.height/2}}var Pt=Object.freeze({__proto__:null,ArcElement:ht,BarElement:St,LineElement:wt,PointElement:_t});const Dt=["rgb(54, 162, 235)","rgb(255, 99, 132)","rgb(255, 159, 64)","rgb(255, 205, 86)","rgb(75, 192, 192)","rgb(153, 102, 255)","rgb(201, 203, 207)"],jt=Dt.map((e=>e.replace("rgb(","rgba(").replace(")",", 0.5)")));function Tt(e){return Dt[e%Dt.length]}function Bt(e){return jt[e%jt.length]}function Nt(e){let t;for(t in e)if(e[t].borderColor||e[t].backgroundColor)return!0;return!1}var It={id:"colors",defaults:{enabled:!0,forceOverride:!1},beforeLayout(e,t,n){if(!n.enabled)return;const{data:{datasets:i},options:a}=e.config,{elements:o}=a,s=Nt(i)||(l=a)&&(l.borderColor||l.backgroundColor)||o&&Nt(o)||"rgba(0,0,0,0.1)"!==r.defaults.borderColor||"rgba(0,0,0,0.1)"!==r.defaults.backgroundColor;var l;if(!n.forceOverride&&s)return;const c=function(e){let t=0;return(n,r)=>{const i=e.getDatasetMeta(r).controller;i instanceof j?t=function(e,t){return e.backgroundColor=e.data.map((()=>Tt(t++))),t}(n,t):i instanceof B?t=function(e,t){return e.backgroundColor=e.data.map((()=>Bt(t++))),t}(n,t):i&&(t=function(e,t){return e.borderColor=Tt(t),e.backgroundColor=Bt(t),++t}(n,t))}}(e);i.forEach(c)}};function Lt(e){if(e._decimated){const t=e._data;delete e._decimated,delete e._data,Object.defineProperty(e,"data",{configurable:!0,enumerable:!0,writable:!0,value:t})}}function zt(e){e.data.datasets.forEach((e=>{Lt(e)}))}var Ft={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(e,t,n)=>{if(!n.enabled)return void zt(e);const i=e.width;e.data.datasets.forEach(((t,a)=>{const{_data:o,indexAxis:s}=t,l=e.getDatasetMeta(a),c=o||t.data;if("y"===r.resolve([s,e.options.indexAxis]))return;if(!l.controller.supportsDecimation)return;const u=e.scales[l.xAxisID];if("linear"!==u.type&&"time"!==u.type)return;if(e.options.parsing)return;let d,{start:f,count:h}=function(e,t){const n=t.length;let i,a=0;const{iScale:o}=e,{min:s,max:l,minDefined:c,maxDefined:u}=o.getUserBounds();return c&&(a=r._limitValue(r._lookupByKey(t,o.axis,s).lo,0,n-1)),i=u?r._limitValue(r._lookupByKey(t,o.axis,l).hi+1,a,n)-a:n-a,{start:a,count:i}}(l,c);if(h<=(n.threshold||4*i))Lt(t);else{switch(r.isNullOrUndef(o)&&(t._data=c,delete t.data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(e){this._data=e}})),n.algorithm){case"lttb":d=function(e,t,n,r,i){const a=i.samples||r;if(a>=n)return e.slice(t,t+n);const o=[],s=(n-2)/(a-2);let l=0;const c=t+n-1;let u,d,f,h,p,g=t;for(o[l++]=e[g],u=0;u<a-2;u++){let r,i=0,a=0;const c=Math.floor((u+1)*s)+1+t,m=Math.min(Math.floor((u+2)*s)+1,n)+t,b=m-c;for(r=c;r<m;r++)i+=e[r].x,a+=e[r].y;i/=b,a/=b;const y=Math.floor(u*s)+1+t,v=Math.min(Math.floor((u+1)*s)+1,n)+t,{x,y:w}=e[g];for(f=h=-1,r=y;r<v;r++)h=.5*Math.abs((x-i)*(e[r].y-w)-(x-e[r].x)*(a-w)),h>f&&(f=h,d=e[r],p=r);o[l++]=d,g=p}return o[l++]=e[c],o}(c,f,h,i,n);break;case"min-max":d=function(e,t,n,i){let a,o,s,l,c,u,d,f,h,p,g=0,m=0;const b=[],y=t+n-1,v=e[t].x,x=e[y].x-v;for(a=t;a<t+n;++a){o=e[a],s=(o.x-v)/x*i,l=o.y;const t=0|s;if(t===c)l<h?(h=l,u=a):l>p&&(p=l,d=a),g=(m*g+o.x)/++m;else{const n=a-1;if(!r.isNullOrUndef(u)&&!r.isNullOrUndef(d)){const t=Math.min(u,d),r=Math.max(u,d);t!==f&&t!==n&&b.push({...e[t],x:g}),r!==f&&r!==n&&b.push({...e[r],x:g})}a>0&&n!==f&&b.push(e[n]),b.push(o),c=t,m=0,h=p=l,u=d=f=a}}return b}(c,f,h,i);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}t._decimated=d}}))},destroy(e){zt(e)}};function Rt(e,t,n,i){if(i)return;let a=t[e],o=n[e];return"angle"===e&&(a=r._normalizeAngle(a),o=r._normalizeAngle(o)),{property:e,start:a,end:o}}function Wt(e,t,n){for(;t>e;t--){const e=n[t];if(!isNaN(e.x)&&!isNaN(e.y))break}return t}function Ht(e,t,n,r){return e&&t?r(e[n],t[n]):e?e[n]:t?t[n]:0}function Yt(e,t){let n=[],i=!1;return r.isArray(e)?(i=!0,n=e):n=function(e,t){const{x:n=null,y:r=null}=e||{},i=t.points,a=[];return t.segments.forEach((({start:e,end:t})=>{t=Wt(e,t,i);const o=i[e],s=i[t];null!==r?(a.push({x:o.x,y:r}),a.push({x:s.x,y:r})):null!==n&&(a.push({x:n,y:o.y}),a.push({x:n,y:s.y}))})),a}(e,t),n.length?new wt({points:n,options:{tension:0},_loop:i,_fullLoop:i}):null}function Vt(e){return e&&!1!==e.fill}function Ut(e,t,n){let i=e[t].fill;const a=[t];let o;if(!n)return i;for(;!1!==i&&-1===a.indexOf(i);){if(!r.isNumberFinite(i))return i;if(o=e[i],!o)return!1;if(o.visible)return i;a.push(i),i=o.fill}return!1}function $t(e,t,n){const i=function(e){const t=e.options,n=t.fill;let i=r.valueOrDefault(n&&n.target,n);return void 0===i&&(i=!!t.backgroundColor),!1!==i&&null!==i&&(!0===i?"origin":i)}(e);if(r.isObject(i))return!isNaN(i.value)&&i;let a=parseFloat(i);return r.isNumberFinite(a)&&Math.floor(a)===a?function(e,t,n,r){return"-"!==e&&"+"!==e||(n=t+n),!(n===t||n<0||n>=r)&&n}(i[0],t,a,n):["origin","start","end","stack","shape"].indexOf(i)>=0&&i}function qt(e,t,n){const r=[];for(let i=0;i<n.length;i++){const a=n[i],{first:o,last:s,point:l}=Qt(a,t,"x");if(!(!l||o&&s))if(o)r.unshift(l);else if(e.push(l),!s)break}e.push(...r)}function Qt(e,t,n){const i=e.interpolate(t,n);if(!i)return{};const a=i[n],o=e.segments,s=e.points;let l=!1,c=!1;for(let e=0;e<o.length;e++){const t=o[e],i=s[t.start][n],u=s[t.end][n];if(r._isBetween(a,i,u)){l=a===i,c=a===u;break}}return{first:l,last:c,point:i}}class Zt{constructor(e){this.x=e.x,this.y=e.y,this.radius=e.radius}pathSegment(e,t,n){const{x:i,y:a,radius:o}=this;return t=t||{start:0,end:r.TAU},e.arc(i,a,o,t.end,t.start,!0),!n.bounds}interpolate(e){const{x:t,y:n,radius:r}=this,i=e.angle;return{x:t+Math.cos(i)*r,y:n+Math.sin(i)*r,angle:i}}}function Xt(e,t,n){const i=function(e){const{chart:t,fill:n,line:i}=e;if(r.isNumberFinite(n))return function(e,t){const n=e.getDatasetMeta(t);return n&&e.isDatasetVisible(t)?n.dataset:null}(t,n);if("stack"===n)return function(e){const{scale:t,index:n,line:r}=e,i=[],a=r.segments,o=r.points,s=function(e,t){const n=[],r=e.getMatchingVisibleMetas("line");for(let e=0;e<r.length;e++){const i=r[e];if(i.index===t)break;i.hidden||n.unshift(i.dataset)}return n}(t,n);s.push(Yt({x:null,y:t.bottom},r));for(let e=0;e<a.length;e++){const t=a[e];for(let e=t.start;e<=t.end;e++)qt(i,o[e],s)}return new wt({points:i,options:{}})}(e);if("shape"===n)return!0;const a=function(e){return(e.scale||{}).getPointPositionForValue?function(e){const{scale:t,fill:n}=e,i=t.options,a=t.getLabels().length,o=i.reverse?t.max:t.min,s=function(e,t,n){let i;return i="start"===e?n:"end"===e?t.options.reverse?t.min:t.max:r.isObject(e)?e.value:t.getBaseValue(),i}(n,t,o),l=[];if(i.grid.circular){const e=t.getPointPositionForValue(0,o);return new Zt({x:e.x,y:e.y,radius:t.getDistanceFromCenterForValue(s)})}for(let e=0;e<a;++e)l.push(t.getPointPositionForValue(e,s));return l}(e):function(e){const{scale:t={},fill:n}=e,i=function(e,t){let n=null;return"start"===e?n=t.bottom:"end"===e?n=t.top:r.isObject(e)?n=t.getPixelForValue(e.value):t.getBasePixel&&(n=t.getBasePixel()),n}(n,t);if(r.isNumberFinite(i)){const e=t.isHorizontal();return{x:e?i:null,y:e?null:i}}return null}(e)}(e);return a instanceof Zt?a:Yt(a,i)}(t),{line:a,scale:o,axis:s}=t,l=a.options,c=l.fill,u=l.backgroundColor,{above:d=u,below:f=u}=c||{};i&&a.points.length&&(r.clipArea(e,n),function(e,t){const{line:n,target:r,above:i,below:a,area:o,scale:s}=t,l=n._loop?"angle":t.axis;e.save(),"x"===l&&a!==i&&(Gt(e,r,o.top),Kt(e,{line:n,target:r,color:i,scale:s,property:l}),e.restore(),e.save(),Gt(e,r,o.bottom)),Kt(e,{line:n,target:r,color:a,scale:s,property:l}),e.restore()}(e,{line:a,target:i,above:d,below:f,area:n,scale:o,axis:s}),r.unclipArea(e))}function Gt(e,t,n){const{segments:r,points:i}=t;let a=!0,o=!1;e.beginPath();for(const s of r){const{start:r,end:l}=s,c=i[r],u=i[Wt(r,l,i)];a?(e.moveTo(c.x,c.y),a=!1):(e.lineTo(c.x,n),e.lineTo(c.x,c.y)),o=!!t.pathSegment(e,s,{move:o}),o?e.closePath():e.lineTo(u.x,n)}e.lineTo(t.first().x,n),e.closePath(),e.clip()}function Kt(e,t){const{line:n,target:i,property:a,color:o,scale:s}=t,l=function(e,t,n){const i=e.segments,a=e.points,o=t.points,s=[];for(const e of i){let{start:i,end:l}=e;l=Wt(i,l,a);const c=Rt(n,a[i],a[l],e.loop);if(!t.segments){s.push({source:e,target:c,start:a[i],end:a[l]});continue}const u=r._boundSegments(t,c);for(const t of u){const i=Rt(n,o[t.start],o[t.end],t.loop),l=r._boundSegment(e,a,i);for(const e of l)s.push({source:e,target:t,start:{[n]:Ht(c,i,"start",Math.max)},end:{[n]:Ht(c,i,"end",Math.min)}})}}return s}(n,i,a);for(const{source:t,target:r,start:c,end:u}of l){const{style:{backgroundColor:l=o}={}}=t,d=!0!==i;e.save(),e.fillStyle=l,Jt(e,s,d&&Rt(a,c,u)),e.beginPath();const f=!!n.pathSegment(e,t);let h;if(d){f?e.closePath():en(e,i,u,a);const t=!!i.pathSegment(e,r,{move:f,reverse:!0});h=f&&t,h||en(e,i,c,a)}e.closePath(),e.fill(h?"evenodd":"nonzero"),e.restore()}}function Jt(e,t,n){const{top:r,bottom:i}=t.chart.chartArea,{property:a,start:o,end:s}=n||{};"x"===a&&(e.beginPath(),e.rect(o,r,s-o,i-r),e.clip())}function en(e,t,n,r){const i=t.interpolate(n,r);i&&e.lineTo(i.x,i.y)}var tn={id:"filler",afterDatasetsUpdate(e,t,n){const r=(e.data.datasets||[]).length,i=[];let a,o,s,l;for(o=0;o<r;++o)a=e.getDatasetMeta(o),s=a.dataset,l=null,s&&s.options&&s instanceof wt&&(l={visible:e.isDatasetVisible(o),index:o,fill:$t(s,o,r),chart:e,axis:a.controller.options.indexAxis,scale:a.vScale,line:s}),a.$filler=l,i.push(l);for(o=0;o<r;++o)l=i[o],l&&!1!==l.fill&&(l.fill=Ut(i,o,n.propagate))},beforeDraw(e,t,n){const r="beforeDraw"===n.drawTime,i=e.getSortedVisibleDatasetMetas(),a=e.chartArea;for(let t=i.length-1;t>=0;--t){const n=i[t].$filler;n&&(n.line.updateControlPoints(a,n.axis),r&&n.fill&&Xt(e.ctx,n,a))}},beforeDatasetsDraw(e,t,n){if("beforeDatasetsDraw"!==n.drawTime)return;const r=e.getSortedVisibleDatasetMetas();for(let t=r.length-1;t>=0;--t){const n=r[t].$filler;Vt(n)&&Xt(e.ctx,n,e.chartArea)}},beforeDatasetDraw(e,t,n){const r=t.meta.$filler;Vt(r)&&"beforeDatasetDraw"===n.drawTime&&Xt(e.ctx,r,e.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const nn=(e,t)=>{let{boxHeight:n=t,boxWidth:r=t}=e;return e.usePointStyle&&(n=Math.min(n,t),r=e.pointStyleWidth||Math.min(r,t)),{boxWidth:r,boxHeight:n,itemHeight:Math.max(t,n)}};class rn extends ke{constructor(e){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t,n){this.maxWidth=e,this.maxHeight=t,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const e=this.options.labels||{};let t=r.callback(e.generateLabels,[this.chart],this)||[];e.filter&&(t=t.filter((t=>e.filter(t,this.chart.data)))),e.sort&&(t=t.sort(((t,n)=>e.sort(t,n,this.chart.data)))),this.options.reverse&&t.reverse(),this.legendItems=t}fit(){const{options:e,ctx:t}=this;if(!e.display)return void(this.width=this.height=0);const n=e.labels,i=r.toFont(n.font),a=i.size,o=this._computeTitleHeight(),{boxWidth:s,itemHeight:l}=nn(n,a);let c,u;t.font=i.string,this.isHorizontal()?(c=this.maxWidth,u=this._fitRows(o,a,s,l)+10):(u=this.maxHeight,c=this._fitCols(o,i,s,l)+10),this.width=Math.min(c,e.maxWidth||this.maxWidth),this.height=Math.min(u,e.maxHeight||this.maxHeight)}_fitRows(e,t,n,r){const{ctx:i,maxWidth:a,options:{labels:{padding:o}}}=this,s=this.legendHitBoxes=[],l=this.lineWidths=[0],c=r+o;let u=e;i.textAlign="left",i.textBaseline="middle";let d=-1,f=-c;return this.legendItems.forEach(((e,h)=>{const p=n+t/2+i.measureText(e.text).width;(0===h||l[l.length-1]+p+2*o>a)&&(u+=c,l[l.length-(h>0?0:1)]=0,f+=c,d++),s[h]={left:0,top:f,row:d,width:p,height:r},l[l.length-1]+=p+o})),u}_fitCols(e,t,n,r){const{ctx:i,maxHeight:a,options:{labels:{padding:o}}}=this,s=this.legendHitBoxes=[],l=this.columnSizes=[],c=a-e;let u=o,d=0,f=0,h=0,p=0;return this.legendItems.forEach(((e,a)=>{const{itemWidth:g,itemHeight:m}=function(e,t,n,r,i){const a=function(e,t,n,r){let i=e.text;return i&&"string"!=typeof i&&(i=i.reduce(((e,t)=>e.length>t.length?e:t))),t+n.size/2+r.measureText(i).width}(r,e,t,n),o=function(e,t,n){let r=e;return"string"!=typeof t.text&&(r=an(t,n)),r}(i,r,t.lineHeight);return{itemWidth:a,itemHeight:o}}(n,t,i,e,r);a>0&&f+m+2*o>c&&(u+=d+o,l.push({width:d,height:f}),h+=d+o,p++,d=f=0),s[a]={left:h,top:f,col:p,width:g,height:m},d=Math.max(d,g),f+=m+o})),u+=d,l.push({width:d,height:f}),u}adjustHitBoxes(){if(!this.options.display)return;const e=this._computeTitleHeight(),{legendHitBoxes:t,options:{align:n,labels:{padding:i},rtl:a}}=this,o=r.getRtlAdapter(a,this.left,this.width);if(this.isHorizontal()){let a=0,s=r._alignStartEnd(n,this.left+i,this.right-this.lineWidths[a]);for(const l of t)a!==l.row&&(a=l.row,s=r._alignStartEnd(n,this.left+i,this.right-this.lineWidths[a])),l.top+=this.top+e+i,l.left=o.leftForLtr(o.x(s),l.width),s+=l.width+i}else{let a=0,s=r._alignStartEnd(n,this.top+e+i,this.bottom-this.columnSizes[a].height);for(const l of t)l.col!==a&&(a=l.col,s=r._alignStartEnd(n,this.top+e+i,this.bottom-this.columnSizes[a].height)),l.top=s,l.left+=this.left+i,l.left=o.leftForLtr(o.x(l.left),l.width),s+=l.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const e=this.ctx;r.clipArea(e,this),this._draw(),r.unclipArea(e)}}_draw(){const{options:e,columnSizes:t,lineWidths:n,ctx:i}=this,{align:a,labels:o}=e,s=r.defaults.color,l=r.getRtlAdapter(e.rtl,this.left,this.width),c=r.toFont(o.font),{padding:u}=o,d=c.size,f=d/2;let h;this.drawTitle(),i.textAlign=l.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=c.string;const{boxWidth:p,boxHeight:g,itemHeight:m}=nn(o,d),b=this.isHorizontal(),y=this._computeTitleHeight();h=b?{x:r._alignStartEnd(a,this.left+u,this.right-n[0]),y:this.top+u+y,line:0}:{x:this.left+u,y:r._alignStartEnd(a,this.top+y+u,this.bottom-t[0].height),line:0},r.overrideTextDirection(this.ctx,e.textDirection);const v=m+u;this.legendItems.forEach(((x,w)=>{i.strokeStyle=x.fontColor,i.fillStyle=x.fontColor;const A=i.measureText(x.text).width,_=l.textAlign(x.textAlign||(x.textAlign=o.textAlign)),k=p+f+A;let E=h.x,M=h.y;if(l.setWidth(this.width),b?w>0&&E+k+u>this.right&&(M=h.y+=v,h.line++,E=h.x=r._alignStartEnd(a,this.left+u,this.right-n[h.line])):w>0&&M+v>this.bottom&&(E=h.x=E+t[h.line].width+u,h.line++,M=h.y=r._alignStartEnd(a,this.top+y+u,this.bottom-t[h.line].height)),function(e,t,n){if(isNaN(p)||p<=0||isNaN(g)||g<0)return;i.save();const a=r.valueOrDefault(n.lineWidth,1);if(i.fillStyle=r.valueOrDefault(n.fillStyle,s),i.lineCap=r.valueOrDefault(n.lineCap,"butt"),i.lineDashOffset=r.valueOrDefault(n.lineDashOffset,0),i.lineJoin=r.valueOrDefault(n.lineJoin,"miter"),i.lineWidth=a,i.strokeStyle=r.valueOrDefault(n.strokeStyle,s),i.setLineDash(r.valueOrDefault(n.lineDash,[])),o.usePointStyle){const s={radius:g*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:a},c=l.xPlus(e,p/2),u=t+f;r.drawPointLegend(i,s,c,u,o.pointStyleWidth&&p)}else{const o=t+Math.max((d-g)/2,0),s=l.leftForLtr(e,p),c=r.toTRBLCorners(n.borderRadius);i.beginPath(),Object.values(c).some((e=>0!==e))?r.addRoundedRectPath(i,{x:s,y:o,w:p,h:g,radius:c}):i.rect(s,o,p,g),i.fill(),0!==a&&i.stroke()}i.restore()}(l.x(E),M,x),E=r._textX(_,E+p+f,b?E+k:this.right,e.rtl),function(e,t,n){r.renderText(i,n.text,e,t+m/2,c,{strikethrough:n.hidden,textAlign:l.textAlign(n.textAlign)})}(l.x(E),M,x),b)h.x+=k+u;else if("string"!=typeof x.text){const e=c.lineHeight;h.y+=an(x,e)+u}else h.y+=v})),r.restoreTextDirection(this.ctx,e.textDirection)}drawTitle(){const e=this.options,t=e.title,n=r.toFont(t.font),i=r.toPadding(t.padding);if(!t.display)return;const a=r.getRtlAdapter(e.rtl,this.left,this.width),o=this.ctx,s=t.position,l=n.size/2,c=i.top+l;let u,d=this.left,f=this.width;if(this.isHorizontal())f=Math.max(...this.lineWidths),u=this.top+c,d=r._alignStartEnd(e.align,d,this.right-f);else{const t=this.columnSizes.reduce(((e,t)=>Math.max(e,t.height)),0);u=c+r._alignStartEnd(e.align,this.top,this.bottom-t-e.labels.padding-this._computeTitleHeight())}const h=r._alignStartEnd(s,d,d+f);o.textAlign=a.textAlign(r._toLeftRightCenter(s)),o.textBaseline="middle",o.strokeStyle=t.color,o.fillStyle=t.color,o.font=n.string,r.renderText(o,t.text,h,u,n)}_computeTitleHeight(){const e=this.options.title,t=r.toFont(e.font),n=r.toPadding(e.padding);return e.display?t.lineHeight+n.height:0}_getLegendItemAt(e,t){let n,i,a;if(r._isBetween(e,this.left,this.right)&&r._isBetween(t,this.top,this.bottom))for(a=this.legendHitBoxes,n=0;n<a.length;++n)if(i=a[n],r._isBetween(e,i.left,i.left+i.width)&&r._isBetween(t,i.top,i.top+i.height))return this.legendItems[n];return null}handleEvent(e){const t=this.options;if(!function(e,t){return!("mousemove"!==e&&"mouseout"!==e||!t.onHover&&!t.onLeave)||!(!t.onClick||"click"!==e&&"mouseup"!==e)}(e.type,t))return;const n=this._getLegendItemAt(e.x,e.y);if("mousemove"===e.type||"mouseout"===e.type){const o=this._hoveredItem,s=(a=n,null!==(i=o)&&null!==a&&i.datasetIndex===a.datasetIndex&&i.index===a.index);o&&!s&&r.callback(t.onLeave,[e,o,this],this),this._hoveredItem=n,n&&!s&&r.callback(t.onHover,[e,n,this],this)}else n&&r.callback(t.onClick,[e,n,this],this);var i,a}}function an(e,t){return t*(e.text?e.text.length:0)}var on={id:"legend",_element:rn,start(e,t,n){const r=e.legend=new rn({ctx:e.ctx,options:n,chart:e});ae.configure(e,r,n),ae.addBox(e,r)},stop(e){ae.removeBox(e,e.legend),delete e.legend},beforeUpdate(e,t,n){const r=e.legend;ae.configure(e,r,n),r.options=n},afterUpdate(e){const t=e.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(e,t){t.replay||e.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(e,t,n){const r=t.datasetIndex,i=n.chart;i.isDatasetVisible(r)?(i.hide(r),t.hidden=!0):(i.show(r),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:e=>e.chart.options.color,boxWidth:40,padding:10,generateLabels(e){const t=e.data.datasets,{labels:{usePointStyle:n,pointStyle:i,textAlign:a,color:o,useBorderRadius:s,borderRadius:l}}=e.legend.options;return e._getSortedDatasetMetas().map((e=>{const c=e.controller.getStyle(n?0:void 0),u=r.toPadding(c.borderWidth);return{text:t[e.index].label,fillStyle:c.backgroundColor,fontColor:o,hidden:!e.visible,lineCap:c.borderCapStyle,lineDash:c.borderDash,lineDashOffset:c.borderDashOffset,lineJoin:c.borderJoinStyle,lineWidth:(u.width+u.height)/4,strokeStyle:c.borderColor,pointStyle:i||c.pointStyle,rotation:c.rotation,textAlign:a||c.textAlign,borderRadius:s&&(l||c.borderRadius),datasetIndex:e.index}}),this)}},title:{color:e=>e.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:e=>!e.startsWith("on"),labels:{_scriptable:e=>!["generateLabels","filter","sort"].includes(e)}}};class sn extends ke{constructor(e){super(),this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=e,this.height=this.bottom=t;const i=r.isArray(n.text)?n.text.length:1;this._padding=r.toPadding(n.padding);const a=i*r.toFont(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=a:this.width=a}isHorizontal(){const e=this.options.position;return"top"===e||"bottom"===e}_drawArgs(e){const{top:t,left:n,bottom:i,right:a,options:o}=this,s=o.align;let l,c,u,d=0;return this.isHorizontal()?(c=r._alignStartEnd(s,n,a),u=t+e,l=a-n):("left"===o.position?(c=n+e,u=r._alignStartEnd(s,i,t),d=-.5*r.PI):(c=a-e,u=r._alignStartEnd(s,t,i),d=.5*r.PI),l=i-t),{titleX:c,titleY:u,maxWidth:l,rotation:d}}draw(){const e=this.ctx,t=this.options;if(!t.display)return;const n=r.toFont(t.font),i=n.lineHeight/2+this._padding.top,{titleX:a,titleY:o,maxWidth:s,rotation:l}=this._drawArgs(i);r.renderText(e,t.text,0,0,n,{color:t.color,maxWidth:s,rotation:l,textAlign:r._toLeftRightCenter(t.align),textBaseline:"middle",translation:[a,o]})}}var ln={id:"title",_element:sn,start(e,t,n){!function(e,t){const n=new sn({ctx:e.ctx,options:t,chart:e});ae.configure(e,n,t),ae.addBox(e,n),e.titleBlock=n}(e,n)},stop(e){const t=e.titleBlock;ae.removeBox(e,t),delete e.titleBlock},beforeUpdate(e,t,n){const r=e.titleBlock;ae.configure(e,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const cn=new WeakMap;var un={id:"subtitle",start(e,t,n){const r=new sn({ctx:e.ctx,options:n,chart:e});ae.configure(e,r,n),ae.addBox(e,r),cn.set(e,r)},stop(e){ae.removeBox(e,cn.get(e)),cn.delete(e)},beforeUpdate(e,t,n){const r=cn.get(e);ae.configure(e,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const dn={average(e){if(!e.length)return!1;let t,n,r=new Set,i=0,a=0;for(t=0,n=e.length;t<n;++t){const n=e[t].element;if(n&&n.hasValue()){const e=n.tooltipPosition();r.add(e.x),i+=e.y,++a}}return 0!==a&&0!==r.size&&{x:[...r].reduce(((e,t)=>e+t))/r.size,y:i/a}},nearest(e,t){if(!e.length)return!1;let n,i,a,o=t.x,s=t.y,l=Number.POSITIVE_INFINITY;for(n=0,i=e.length;n<i;++n){const i=e[n].element;if(i&&i.hasValue()){const e=i.getCenterPoint(),n=r.distanceBetweenPoints(t,e);n<l&&(l=n,a=i)}}if(a){const e=a.tooltipPosition();o=e.x,s=e.y}return{x:o,y:s}}};function fn(e,t){return t&&(r.isArray(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function hn(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function pn(e,t){const{element:n,datasetIndex:r,index:i}=t,a=e.getDatasetMeta(r).controller,{label:o,value:s}=a.getLabelAndValue(i);return{chart:e,label:o,parsed:a.getParsed(i),raw:e.data.datasets[r].data[i],formattedValue:s,dataset:a.getDataset(),dataIndex:i,datasetIndex:r,element:n}}function gn(e,t){const n=e.chart.ctx,{body:i,footer:a,title:o}=e,{boxWidth:s,boxHeight:l}=t,c=r.toFont(t.bodyFont),u=r.toFont(t.titleFont),d=r.toFont(t.footerFont),f=o.length,h=a.length,p=i.length,g=r.toPadding(t.padding);let m=g.height,b=0,y=i.reduce(((e,t)=>e+t.before.length+t.lines.length+t.after.length),0);y+=e.beforeBody.length+e.afterBody.length,f&&(m+=f*u.lineHeight+(f-1)*t.titleSpacing+t.titleMarginBottom),y&&(m+=p*(t.displayColors?Math.max(l,c.lineHeight):c.lineHeight)+(y-p)*c.lineHeight+(y-1)*t.bodySpacing),h&&(m+=t.footerMarginTop+h*d.lineHeight+(h-1)*t.footerSpacing);let v=0;const x=function(e){b=Math.max(b,n.measureText(e).width+v)};return n.save(),n.font=u.string,r.each(e.title,x),n.font=c.string,r.each(e.beforeBody.concat(e.afterBody),x),v=t.displayColors?s+2+t.boxPadding:0,r.each(i,(e=>{r.each(e.before,x),r.each(e.lines,x),r.each(e.after,x)})),v=0,n.font=d.string,r.each(e.footer,x),n.restore(),b+=g.width,{width:b,height:m}}function mn(e,t,n,r){const{x:i,width:a}=n,{width:o,chartArea:{left:s,right:l}}=e;let c="center";return"center"===r?c=i<=(s+l)/2?"left":"right":i<=a/2?c="left":i>=o-a/2&&(c="right"),function(e,t,n,r){const{x:i,width:a}=r,o=n.caretSize+n.caretPadding;return"left"===e&&i+a+o>t.width||"right"===e&&i-a-o<0||void 0}(c,e,t,n)&&(c="center"),c}function bn(e,t,n){const r=n.yAlign||t.yAlign||function(e,t){const{y:n,height:r}=t;return n<r/2?"top":n>e.height-r/2?"bottom":"center"}(e,n);return{xAlign:n.xAlign||t.xAlign||mn(e,t,n,r),yAlign:r}}function yn(e,t,n,i){const{caretSize:a,caretPadding:o,cornerRadius:s}=e,{xAlign:l,yAlign:c}=n,u=a+o,{topLeft:d,topRight:f,bottomLeft:h,bottomRight:p}=r.toTRBLCorners(s);let g=function(e,t){let{x:n,width:r}=e;return"right"===t?n-=r:"center"===t&&(n-=r/2),n}(t,l);const m=function(e,t,n){let{y:r,height:i}=e;return"top"===t?r+=n:r-="bottom"===t?i+n:i/2,r}(t,c,u);return"center"===c?"left"===l?g+=u:"right"===l&&(g-=u):"left"===l?g-=Math.max(d,h)+a:"right"===l&&(g+=Math.max(f,p)+a),{x:r._limitValue(g,0,i.width-t.width),y:r._limitValue(m,0,i.height-t.height)}}function vn(e,t,n){const i=r.toPadding(n.padding);return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-i.right:e.x+i.left}function xn(e){return fn([],hn(e))}function wn(e,t){const n=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return n?e.override(n):e}const An={beforeTitle:r.noop,title(e){if(e.length>0){const t=e[0],n=t.chart.data.labels,r=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return t.dataset.label||"";if(t.label)return t.label;if(r>0&&t.dataIndex<r)return n[t.dataIndex]}return""},afterTitle:r.noop,beforeBody:r.noop,beforeLabel:r.noop,label(e){if(this&&this.options&&"dataset"===this.options.mode)return e.label+": "+e.formattedValue||e.formattedValue;let t=e.dataset.label||"";t&&(t+=": ");const n=e.formattedValue;return r.isNullOrUndef(n)||(t+=n),t},labelColor(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:r.noop,afterBody:r.noop,beforeFooter:r.noop,footer:r.noop,afterFooter:r.noop};function _n(e,t,n,r){const i=e[t].call(n,r);return void 0===i?An[t].call(n,r):i}class kn extends ke{static positioners=dn;constructor(e){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=e.chart,this.options=e.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(e){this.options=e,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const e=this._cachedAnimations;if(e)return e;const t=this.chart,n=this.options.setContext(this.getContext()),r=n.enabled&&t.options.animation&&n.animations,i=new c(this.chart,r);return r._cacheable&&(this._cachedAnimations=Object.freeze(i)),i}getContext(){return this.$context||(this.$context=(e=this.chart.getContext(),t=this._tooltipItems,r.createContext(e,{tooltip:this,tooltipItems:t,type:"tooltip"})));var e,t}getTitle(e,t){const{callbacks:n}=t,r=_n(n,"beforeTitle",this,e),i=_n(n,"title",this,e),a=_n(n,"afterTitle",this,e);let o=[];return o=fn(o,hn(r)),o=fn(o,hn(i)),o=fn(o,hn(a)),o}getBeforeBody(e,t){return xn(_n(t.callbacks,"beforeBody",this,e))}getBody(e,t){const{callbacks:n}=t,i=[];return r.each(e,(e=>{const t={before:[],lines:[],after:[]},r=wn(n,e);fn(t.before,hn(_n(r,"beforeLabel",this,e))),fn(t.lines,_n(r,"label",this,e)),fn(t.after,hn(_n(r,"afterLabel",this,e))),i.push(t)})),i}getAfterBody(e,t){return xn(_n(t.callbacks,"afterBody",this,e))}getFooter(e,t){const{callbacks:n}=t,r=_n(n,"beforeFooter",this,e),i=_n(n,"footer",this,e),a=_n(n,"afterFooter",this,e);let o=[];return o=fn(o,hn(r)),o=fn(o,hn(i)),o=fn(o,hn(a)),o}_createItems(e){const t=this._active,n=this.chart.data,i=[],a=[],o=[];let s,l,c=[];for(s=0,l=t.length;s<l;++s)c.push(pn(this.chart,t[s]));return e.filter&&(c=c.filter(((t,r,i)=>e.filter(t,r,i,n)))),e.itemSort&&(c=c.sort(((t,r)=>e.itemSort(t,r,n)))),r.each(c,(t=>{const n=wn(e.callbacks,t);i.push(_n(n,"labelColor",this,t)),a.push(_n(n,"labelPointStyle",this,t)),o.push(_n(n,"labelTextColor",this,t))})),this.labelColors=i,this.labelPointStyles=a,this.labelTextColors=o,this.dataPoints=c,c}update(e,t){const n=this.options.setContext(this.getContext()),r=this._active;let i,a=[];if(r.length){const e=dn[n.position].call(this,r,this._eventPosition);a=this._createItems(n),this.title=this.getTitle(a,n),this.beforeBody=this.getBeforeBody(a,n),this.body=this.getBody(a,n),this.afterBody=this.getAfterBody(a,n),this.footer=this.getFooter(a,n);const t=this._size=gn(this,n),o=Object.assign({},e,t),s=bn(this.chart,n,o),l=yn(n,o,s,this.chart);this.xAlign=s.xAlign,this.yAlign=s.yAlign,i={opacity:1,x:l.x,y:l.y,width:t.width,height:t.height,caretX:e.x,caretY:e.y}}else 0!==this.opacity&&(i={opacity:0});this._tooltipItems=a,this.$context=void 0,i&&this._resolveAnimations().update(this,i),e&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:t})}drawCaret(e,t,n,r){const i=this.getCaretPosition(e,n,r);t.lineTo(i.x1,i.y1),t.lineTo(i.x2,i.y2),t.lineTo(i.x3,i.y3)}getCaretPosition(e,t,n){const{xAlign:i,yAlign:a}=this,{caretSize:o,cornerRadius:s}=n,{topLeft:l,topRight:c,bottomLeft:u,bottomRight:d}=r.toTRBLCorners(s),{x:f,y:h}=e,{width:p,height:g}=t;let m,b,y,v,x,w;return"center"===a?(x=h+g/2,"left"===i?(m=f,b=m-o,v=x+o,w=x-o):(m=f+p,b=m+o,v=x-o,w=x+o),y=m):(b="left"===i?f+Math.max(l,u)+o:"right"===i?f+p-Math.max(c,d)-o:this.caretX,"top"===a?(v=h,x=v-o,m=b-o,y=b+o):(v=h+g,x=v+o,m=b+o,y=b-o),w=v),{x1:m,x2:b,x3:y,y1:v,y2:x,y3:w}}drawTitle(e,t,n){const i=this.title,a=i.length;let o,s,l;if(a){const c=r.getRtlAdapter(n.rtl,this.x,this.width);for(e.x=vn(this,n.titleAlign,n),t.textAlign=c.textAlign(n.titleAlign),t.textBaseline="middle",o=r.toFont(n.titleFont),s=n.titleSpacing,t.fillStyle=n.titleColor,t.font=o.string,l=0;l<a;++l)t.fillText(i[l],c.x(e.x),e.y+o.lineHeight/2),e.y+=o.lineHeight+s,l+1===a&&(e.y+=n.titleMarginBottom-s)}}_drawColorBox(e,t,n,i,a){const o=this.labelColors[n],s=this.labelPointStyles[n],{boxHeight:l,boxWidth:c}=a,u=r.toFont(a.bodyFont),d=vn(this,"left",a),f=i.x(d),h=l<u.lineHeight?(u.lineHeight-l)/2:0,p=t.y+h;if(a.usePointStyle){const t={radius:Math.min(c,l)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},n=i.leftForLtr(f,c)+c/2,u=p+l/2;e.strokeStyle=a.multiKeyBackground,e.fillStyle=a.multiKeyBackground,r.drawPoint(e,t,n,u),e.strokeStyle=o.borderColor,e.fillStyle=o.backgroundColor,r.drawPoint(e,t,n,u)}else{e.lineWidth=r.isObject(o.borderWidth)?Math.max(...Object.values(o.borderWidth)):o.borderWidth||1,e.strokeStyle=o.borderColor,e.setLineDash(o.borderDash||[]),e.lineDashOffset=o.borderDashOffset||0;const t=i.leftForLtr(f,c),n=i.leftForLtr(i.xPlus(f,1),c-2),s=r.toTRBLCorners(o.borderRadius);Object.values(s).some((e=>0!==e))?(e.beginPath(),e.fillStyle=a.multiKeyBackground,r.addRoundedRectPath(e,{x:t,y:p,w:c,h:l,radius:s}),e.fill(),e.stroke(),e.fillStyle=o.backgroundColor,e.beginPath(),r.addRoundedRectPath(e,{x:n,y:p+1,w:c-2,h:l-2,radius:s}),e.fill()):(e.fillStyle=a.multiKeyBackground,e.fillRect(t,p,c,l),e.strokeRect(t,p,c,l),e.fillStyle=o.backgroundColor,e.fillRect(n,p+1,c-2,l-2))}e.fillStyle=this.labelTextColors[n]}drawBody(e,t,n){const{body:i}=this,{bodySpacing:a,bodyAlign:o,displayColors:s,boxHeight:l,boxWidth:c,boxPadding:u}=n,d=r.toFont(n.bodyFont);let f=d.lineHeight,h=0;const p=r.getRtlAdapter(n.rtl,this.x,this.width),g=function(n){t.fillText(n,p.x(e.x+h),e.y+f/2),e.y+=f+a},m=p.textAlign(o);let b,y,v,x,w,A,_;for(t.textAlign=o,t.textBaseline="middle",t.font=d.string,e.x=vn(this,m,n),t.fillStyle=n.bodyColor,r.each(this.beforeBody,g),h=s&&"right"!==m?"center"===o?c/2+u:c+2+u:0,x=0,A=i.length;x<A;++x){for(b=i[x],y=this.labelTextColors[x],t.fillStyle=y,r.each(b.before,g),v=b.lines,s&&v.length&&(this._drawColorBox(t,e,x,p,n),f=Math.max(d.lineHeight,l)),w=0,_=v.length;w<_;++w)g(v[w]),f=d.lineHeight;r.each(b.after,g)}h=0,f=d.lineHeight,r.each(this.afterBody,g),e.y-=a}drawFooter(e,t,n){const i=this.footer,a=i.length;let o,s;if(a){const l=r.getRtlAdapter(n.rtl,this.x,this.width);for(e.x=vn(this,n.footerAlign,n),e.y+=n.footerMarginTop,t.textAlign=l.textAlign(n.footerAlign),t.textBaseline="middle",o=r.toFont(n.footerFont),t.fillStyle=n.footerColor,t.font=o.string,s=0;s<a;++s)t.fillText(i[s],l.x(e.x),e.y+o.lineHeight/2),e.y+=o.lineHeight+n.footerSpacing}}drawBackground(e,t,n,i){const{xAlign:a,yAlign:o}=this,{x:s,y:l}=e,{width:c,height:u}=n,{topLeft:d,topRight:f,bottomLeft:h,bottomRight:p}=r.toTRBLCorners(i.cornerRadius);t.fillStyle=i.backgroundColor,t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.beginPath(),t.moveTo(s+d,l),"top"===o&&this.drawCaret(e,t,n,i),t.lineTo(s+c-f,l),t.quadraticCurveTo(s+c,l,s+c,l+f),"center"===o&&"right"===a&&this.drawCaret(e,t,n,i),t.lineTo(s+c,l+u-p),t.quadraticCurveTo(s+c,l+u,s+c-p,l+u),"bottom"===o&&this.drawCaret(e,t,n,i),t.lineTo(s+h,l+u),t.quadraticCurveTo(s,l+u,s,l+u-h),"center"===o&&"left"===a&&this.drawCaret(e,t,n,i),t.lineTo(s,l+d),t.quadraticCurveTo(s,l,s+d,l),t.closePath(),t.fill(),i.borderWidth>0&&t.stroke()}_updateAnimationTarget(e){const t=this.chart,n=this.$animations,r=n&&n.x,i=n&&n.y;if(r||i){const n=dn[e.position].call(this,this._active,this._eventPosition);if(!n)return;const a=this._size=gn(this,e),o=Object.assign({},n,this._size),s=bn(t,e,o),l=yn(e,o,s,t);r._to===l.x&&i._to===l.y||(this.xAlign=s.xAlign,this.yAlign=s.yAlign,this.width=a.width,this.height=a.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(e){const t=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(t);const i={width:this.width,height:this.height},a={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const o=r.toPadding(t.padding),s=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;t.enabled&&s&&(e.save(),e.globalAlpha=n,this.drawBackground(a,e,i,t),r.overrideTextDirection(e,t.textDirection),a.y+=o.top,this.drawTitle(a,e,t),this.drawBody(a,e,t),this.drawFooter(a,e,t),r.restoreTextDirection(e,t.textDirection),e.restore())}getActiveElements(){return this._active||[]}setActiveElements(e,t){const n=this._active,i=e.map((({datasetIndex:e,index:t})=>{const n=this.chart.getDatasetMeta(e);if(!n)throw new Error("Cannot find a dataset at index "+e);return{datasetIndex:e,element:n.data[t],index:t}})),a=!r._elementsEqual(n,i),o=this._positionChanged(i,t);(a||o)&&(this._active=i,this._eventPosition=t,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(e,t,n=!0){if(t&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const i=this.options,a=this._active||[],o=this._getActiveElements(e,a,t,n),s=this._positionChanged(o,e),l=t||!r._elementsEqual(o,a)||s;return l&&(this._active=o,(i.enabled||i.external)&&(this._eventPosition={x:e.x,y:e.y},this.update(!0,t))),l}_getActiveElements(e,t,n,r){const i=this.options;if("mouseout"===e.type)return[];if(!r)return t.filter((e=>this.chart.data.datasets[e.datasetIndex]&&void 0!==this.chart.getDatasetMeta(e.datasetIndex).controller.getParsed(e.index)));const a=this.chart.getElementsAtEventForMode(e,i.mode,i,n);return i.reverse&&a.reverse(),a}_positionChanged(e,t){const{caretX:n,caretY:r,options:i}=this,a=dn[i.position].call(this,e,t);return!1!==a&&(n!==a.x||r!==a.y)}}var En={id:"tooltip",_element:kn,positioners:dn,afterInit(e,t,n){n&&(e.tooltip=new kn({chart:e,options:n}))},beforeUpdate(e,t,n){e.tooltip&&e.tooltip.initialize(n)},reset(e,t,n){e.tooltip&&e.tooltip.initialize(n)},afterDraw(e){const t=e.tooltip;if(t&&t._willRender()){const n={tooltip:t};if(!1===e.notifyPlugins("beforeTooltipDraw",{...n,cancelable:!0}))return;t.draw(e.ctx),e.notifyPlugins("afterTooltipDraw",n)}},afterEvent(e,t){if(e.tooltip){const n=t.replay;e.tooltip.handleEvent(t.event,n,t.inChartArea)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(e,t)=>t.bodyFont.size,boxWidth:(e,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:An},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:e=>"filter"!==e&&"itemSort"!==e&&"external"!==e,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},Mn=Object.freeze({__proto__:null,Colors:It,Decimation:Ft,Filler:tn,Legend:on,SubTitle:un,Title:ln,Tooltip:En});function On(e){const t=this.getLabels();return e>=0&&e<t.length?t[e]:e}class Cn extends Te{static id="category";static defaults={ticks:{callback:On}};constructor(e){super(e),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(e){const t=this._addedLabels;if(t.length){const e=this.getLabels();for(const{index:n,label:r}of t)e[n]===r&&e.splice(n,1);this._addedLabels=[]}super.init(e)}parse(e,t){if(r.isNullOrUndef(e))return null;const n=this.getLabels();return((e,t)=>null===e?null:r._limitValue(Math.round(e),0,t))(t=isFinite(t)&&n[t]===e?t:function(e,t,n,r){const i=e.indexOf(t);return-1===i?((e,t,n,r)=>("string"==typeof t?(n=e.push(t)-1,r.unshift({index:n,label:t})):isNaN(t)&&(n=null),n))(e,t,n,r):i!==e.lastIndexOf(t)?n:i}(n,e,r.valueOrDefault(t,e),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let{min:n,max:r}=this.getMinMax(!0);"ticks"===this.options.bounds&&(e||(n=0),t||(r=this.getLabels().length-1)),this.min=n,this.max=r}buildTicks(){const e=this.min,t=this.max,n=this.options.offset,r=[];let i=this.getLabels();i=0===e&&t===i.length-1?i:i.slice(e,t+1),this._valueRange=Math.max(i.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=e;n<=t;n++)r.push({value:n});return r}getLabelForValue(e){return On.call(this,e)}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(e){return"number"!=typeof e&&(e=this.parse(e)),null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getValueForPixel(e){return Math.round(this._startValue+this.getDecimalForPixel(e)*this._valueRange)}getBasePixel(){return this.bottom}}function Sn(e,t,{horizontal:n,minRotation:i}){const a=r.toRadians(i),o=(n?Math.sin(a):Math.cos(a))||.001,s=.75*t*(""+e).length;return Math.min(t/o,s)}class Pn extends Te{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(e,t){return r.isNullOrUndef(e)||("number"==typeof e||e instanceof Number)&&!isFinite(+e)?null:+e}handleTickRangeOptions(){const{beginAtZero:e}=this.options,{minDefined:t,maxDefined:n}=this.getUserBounds();let{min:i,max:a}=this;const o=e=>i=t?i:e,s=e=>a=n?a:e;if(e){const e=r.sign(i),t=r.sign(a);e<0&&t<0?s(0):e>0&&t>0&&o(0)}if(i===a){let t=0===a?1:Math.abs(.05*a);s(a+t),e||o(i-t)}this.min=i,this.max=a}getTickLimit(){const e=this.options.ticks;let t,{maxTicksLimit:n,stepSize:r}=e;return r?(t=Math.ceil(this.max/r)-Math.floor(this.min/r)+1,t>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${r} would result generating up to ${t} ticks. Limiting to 1000.`),t=1e3)):(t=this.computeTickLimit(),n=n||11),n&&(t=Math.min(n,t)),t}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const e=this.options,t=e.ticks;let n=this.getTickLimit();n=Math.max(2,n);const i=function(e,t){const n=[],{bounds:i,step:a,min:o,max:s,precision:l,count:c,maxTicks:u,maxDigits:d,includeBounds:f}=e,h=a||1,p=u-1,{min:g,max:m}=t,b=!r.isNullOrUndef(o),y=!r.isNullOrUndef(s),v=!r.isNullOrUndef(c),x=(m-g)/(d+1);let w,A,_,k,E=r.niceNum((m-g)/p/h)*h;if(E<1e-14&&!b&&!y)return[{value:g},{value:m}];k=Math.ceil(m/E)-Math.floor(g/E),k>p&&(E=r.niceNum(k*E/p/h)*h),r.isNullOrUndef(l)||(w=Math.pow(10,l),E=Math.ceil(E*w)/w),"ticks"===i?(A=Math.floor(g/E)*E,_=Math.ceil(m/E)*E):(A=g,_=m),b&&y&&a&&r.almostWhole((s-o)/a,E/1e3)?(k=Math.round(Math.min((s-o)/E,u)),E=(s-o)/k,A=o,_=s):v?(A=b?o:A,_=y?s:_,k=c-1,E=(_-A)/k):(k=(_-A)/E,k=r.almostEquals(k,Math.round(k),E/1e3)?Math.round(k):Math.ceil(k));const M=Math.max(r._decimalPlaces(E),r._decimalPlaces(A));w=Math.pow(10,r.isNullOrUndef(l)?M:l),A=Math.round(A*w)/w,_=Math.round(_*w)/w;let O=0;for(b&&(f&&A!==o?(n.push({value:o}),A<o&&O++,r.almostEquals(Math.round((A+O*E)*w)/w,o,Sn(o,x,e))&&O++):A<o&&O++);O<k;++O){const e=Math.round((A+O*E)*w)/w;if(y&&e>s)break;n.push({value:e})}return y&&f&&_!==s?n.length&&r.almostEquals(n[n.length-1].value,s,Sn(s,x,e))?n[n.length-1].value=s:n.push({value:s}):y&&_!==s||n.push({value:_}),n}({maxTicks:n,bounds:e.bounds,min:e.min,max:e.max,precision:t.precision,step:t.stepSize,count:t.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:t.minRotation||0,includeBounds:!1!==t.includeBounds},this._range||this);return"ticks"===e.bounds&&r._setMinAndMaxByKey(i,this,"value"),e.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}configure(){const e=this.ticks;let t=this.min,n=this.max;if(super.configure(),this.options.offset&&e.length){const r=(n-t)/Math.max(e.length-1,1)/2;t-=r,n+=r}this._startValue=t,this._endValue=n,this._valueRange=n-t}getLabelForValue(e){return r.formatNumber(e,this.chart.options.locale,this.options.ticks.format)}}class Dn extends Pn{static id="linear";static defaults={ticks:{callback:r.Ticks.formatters.numeric}};determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=r.isNumberFinite(e)?e:0,this.max=r.isNumberFinite(t)?t:1,this.handleTickRangeOptions()}computeTickLimit(){const e=this.isHorizontal(),t=e?this.width:this.height,n=r.toRadians(this.options.ticks.minRotation),i=(e?Math.sin(n):Math.cos(n))||.001,a=this._resolveTickFontOptions(0);return Math.ceil(t/Math.min(40,a.lineHeight/i))}getPixelForValue(e){return null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getValueForPixel(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange}}const jn=e=>Math.floor(r.log10(e)),Tn=(e,t)=>Math.pow(10,jn(e)+t);function Bn(e){return 1==e/Math.pow(10,jn(e))}function Nn(e,t,n){const r=Math.pow(10,n),i=Math.floor(e/r);return Math.ceil(t/r)-i}class In extends Te{static id="logarithmic";static defaults={ticks:{callback:r.Ticks.formatters.logarithmic,major:{enabled:!0}}};constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(e,t){const n=Pn.prototype.parse.apply(this,[e,t]);if(0!==n)return r.isNumberFinite(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=r.isNumberFinite(e)?Math.max(0,e):null,this.max=r.isNumberFinite(t)?Math.max(0,t):null,this.options.beginAtZero&&(this._zero=!0),this._zero&&this.min!==this._suggestedMin&&!r.isNumberFinite(this._userMin)&&(this.min=e===Tn(this.min,0)?Tn(this.min,-1):Tn(this.min,0)),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let n=this.min,r=this.max;const i=t=>n=e?n:t,a=e=>r=t?r:e;n===r&&(n<=0?(i(1),a(10)):(i(Tn(n,-1)),a(Tn(r,1)))),n<=0&&i(Tn(r,-1)),r<=0&&a(Tn(n,1)),this.min=n,this.max=r}buildTicks(){const e=this.options,t=function(e,{min:t,max:n}){t=r.finiteOrDefault(e.min,t);const i=[],a=jn(t);let o=function(e,t){let n=jn(t-e);for(;Nn(e,t,n)>10;)n++;for(;Nn(e,t,n)<10;)n--;return Math.min(n,jn(e))}(t,n),s=o<0?Math.pow(10,Math.abs(o)):1;const l=Math.pow(10,o),c=a>o?Math.pow(10,a):0,u=Math.round((t-c)*s)/s,d=Math.floor((t-c)/l/10)*l*10;let f=Math.floor((u-d)/Math.pow(10,o)),h=r.finiteOrDefault(e.min,Math.round((c+d+f*Math.pow(10,o))*s)/s);for(;h<n;)i.push({value:h,major:Bn(h),significand:f}),f>=10?f=f<15?15:20:f++,f>=20&&(o++,f=2,s=o>=0?1:s),h=Math.round((c+d+f*Math.pow(10,o))*s)/s;const p=r.finiteOrDefault(e.max,h);return i.push({value:p,major:Bn(p),significand:f}),i}({min:this._userMin,max:this._userMax},this);return"ticks"===e.bounds&&r._setMinAndMaxByKey(t,this,"value"),e.reverse?(t.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),t}getLabelForValue(e){return void 0===e?"0":r.formatNumber(e,this.chart.options.locale,this.options.ticks.format)}configure(){const e=this.min;super.configure(),this._startValue=r.log10(e),this._valueRange=r.log10(this.max)-r.log10(e)}getPixelForValue(e){return void 0!==e&&0!==e||(e=this.min),null===e||isNaN(e)?NaN:this.getPixelForDecimal(e===this.min?0:(r.log10(e)-this._startValue)/this._valueRange)}getValueForPixel(e){const t=this.getDecimalForPixel(e);return Math.pow(10,this._startValue+t*this._valueRange)}}function Ln(e){const t=e.ticks;if(t.display&&e.display){const e=r.toPadding(t.backdropPadding);return r.valueOrDefault(t.font&&t.font.size,r.defaults.font.size)+e.height}return 0}function zn(e,t,n,r,i){return e===r||e===i?{start:t-n/2,end:t+n/2}:e<r||e>i?{start:t-n,end:t}:{start:t,end:t+n}}function Fn(e,t,n,r,i){const a=Math.abs(Math.sin(n)),o=Math.abs(Math.cos(n));let s=0,l=0;r.start<t.l?(s=(t.l-r.start)/a,e.l=Math.min(e.l,t.l-s)):r.end>t.r&&(s=(r.end-t.r)/a,e.r=Math.max(e.r,t.r+s)),i.start<t.t?(l=(t.t-i.start)/o,e.t=Math.min(e.t,t.t-l)):i.end>t.b&&(l=(i.end-t.b)/o,e.b=Math.max(e.b,t.b+l))}function Rn(e,t,n){const i=e.drawingArea,{extra:a,additionalAngle:o,padding:s,size:l}=n,c=e.getPointPosition(t,i+a+s,o),u=Math.round(r.toDegrees(r._normalizeAngle(c.angle+r.HALF_PI))),d=function(e,t,n){return 90===n||270===n?e-=t/2:(n>270||n<90)&&(e-=t),e}(c.y,l.h,u),f=function(e){return 0===e||180===e?"center":e<180?"left":"right"}(u),h=(p=c.x,g=l.w,"right"===(m=f)?p-=g:"center"===m&&(p-=g/2),p);var p,g,m;return{visible:!0,x:c.x,y:d,textAlign:f,left:h,top:d,right:h+l.w,bottom:d+l.h}}function Wn(e,t){if(!t)return!0;const{left:n,top:i,right:a,bottom:o}=e;return!(r._isPointInArea({x:n,y:i},t)||r._isPointInArea({x:n,y:o},t)||r._isPointInArea({x:a,y:i},t)||r._isPointInArea({x:a,y:o},t))}function Hn(e,t,n){const{left:i,top:a,right:o,bottom:s}=n,{backdropColor:l}=t;if(!r.isNullOrUndef(l)){const n=r.toTRBLCorners(t.borderRadius),c=r.toPadding(t.backdropPadding);e.fillStyle=l;const u=i-c.left,d=a-c.top,f=o-i+c.width,h=s-a+c.height;Object.values(n).some((e=>0!==e))?(e.beginPath(),r.addRoundedRectPath(e,{x:u,y:d,w:f,h,radius:n}),e.fill()):e.fillRect(u,d,f,h)}}function Yn(e,t,n,i){const{ctx:a}=e;if(n)a.arc(e.xCenter,e.yCenter,t,0,r.TAU);else{let n=e.getPointPosition(0,t);a.moveTo(n.x,n.y);for(let r=1;r<i;r++)n=e.getPointPosition(r,t),a.lineTo(n.x,n.y)}}class Vn extends Pn{static id="radialLinear";static defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:r.Ticks.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:e=>e,padding:5,centerPointLabels:!1}};static defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"};static descriptors={angleLines:{_fallback:"grid"}};constructor(e){super(e),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const e=this._padding=r.toPadding(Ln(this.options)/2),t=this.width=this.maxWidth-e.width,n=this.height=this.maxHeight-e.height;this.xCenter=Math.floor(this.left+t/2+e.left),this.yCenter=Math.floor(this.top+n/2+e.top),this.drawingArea=Math.floor(Math.min(t,n)/2)}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!1);this.min=r.isNumberFinite(e)&&!isNaN(e)?e:0,this.max=r.isNumberFinite(t)&&!isNaN(t)?t:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/Ln(this.options))}generateTickLabels(e){Pn.prototype.generateTickLabels.call(this,e),this._pointLabels=this.getLabels().map(((e,t)=>{const n=r.callback(this.options.pointLabels.callback,[e,t],this);return n||0===n?n:""})).filter(((e,t)=>this.chart.getDataVisibility(t)))}fit(){const e=this.options;e.display&&e.pointLabels.display?function(e){const t={l:e.left+e._padding.left,r:e.right-e._padding.right,t:e.top+e._padding.top,b:e.bottom-e._padding.bottom},n=Object.assign({},t),i=[],a=[],o=e._pointLabels.length,s=e.options.pointLabels,l=s.centerPointLabels?r.PI/o:0;for(let f=0;f<o;f++){const o=s.setContext(e.getPointLabelContext(f));a[f]=o.padding;const h=e.getPointPosition(f,e.drawingArea+a[f],l),p=r.toFont(o.font),g=(c=e.ctx,u=p,d=e._pointLabels[f],d=r.isArray(d)?d:[d],{w:r._longestText(c,u.string,d),h:d.length*u.lineHeight});i[f]=g;const m=r._normalizeAngle(e.getIndexAngle(f)+l),b=Math.round(r.toDegrees(m));Fn(n,t,m,zn(b,h.x,g.w,0,180),zn(b,h.y,g.h,90,270))}var c,u,d;e.setCenterPoint(t.l-n.l,n.r-t.r,t.t-n.t,n.b-t.b),e._pointLabelItems=function(e,t,n){const i=[],a=e._pointLabels.length,o=e.options,{centerPointLabels:s,display:l}=o.pointLabels,c={extra:Ln(o)/2,additionalAngle:s?r.PI/a:0};let u;for(let r=0;r<a;r++){c.padding=n[r],c.size=t[r];const a=Rn(e,r,c);i.push(a),"auto"===l&&(a.visible=Wn(a,u),a.visible&&(u=a))}return i}(e,i,a)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(e,t,n,r){this.xCenter+=Math.floor((e-t)/2),this.yCenter+=Math.floor((n-r)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(e,t,n,r))}getIndexAngle(e){const t=r.TAU/(this._pointLabels.length||1),n=this.options.startAngle||0;return r._normalizeAngle(e*t+r.toRadians(n))}getDistanceFromCenterForValue(e){if(r.isNullOrUndef(e))return NaN;const t=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-e)*t:(e-this.min)*t}getValueForDistanceFromCenter(e){if(r.isNullOrUndef(e))return NaN;const t=e/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-t:this.min+t}getPointLabelContext(e){const t=this._pointLabels||[];if(e>=0&&e<t.length){const n=t[e];return function(e,t,n){return r.createContext(e,{label:n,index:t,type:"pointLabel"})}(this.getContext(),e,n)}}getPointPosition(e,t,n=0){const i=this.getIndexAngle(e)-r.HALF_PI+n;return{x:Math.cos(i)*t+this.xCenter,y:Math.sin(i)*t+this.yCenter,angle:i}}getPointPositionForValue(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))}getBasePosition(e){return this.getPointPositionForValue(e||0,this.getBaseValue())}getPointLabelPosition(e){const{left:t,top:n,right:r,bottom:i}=this._pointLabelItems[e];return{left:t,top:n,right:r,bottom:i}}drawBackground(){const{backgroundColor:e,grid:{circular:t}}=this.options;if(e){const n=this.ctx;n.save(),n.beginPath(),Yn(this,this.getDistanceFromCenterForValue(this._endValue),t,this._pointLabels.length),n.closePath(),n.fillStyle=e,n.fill(),n.restore()}}drawGrid(){const e=this.ctx,t=this.options,{angleLines:n,grid:i,border:a}=t,o=this._pointLabels.length;let s,l,c;if(t.pointLabels.display&&function(e,t){const{ctx:n,options:{pointLabels:i}}=e;for(let a=t-1;a>=0;a--){const t=e._pointLabelItems[a];if(!t.visible)continue;const o=i.setContext(e.getPointLabelContext(a));Hn(n,o,t);const s=r.toFont(o.font),{x:l,y:c,textAlign:u}=t;r.renderText(n,e._pointLabels[a],l,c+s.lineHeight/2,s,{color:o.color,textAlign:u,textBaseline:"middle"})}}(this,o),i.display&&this.ticks.forEach(((e,t)=>{if(0!==t||0===t&&this.min<0){l=this.getDistanceFromCenterForValue(e.value);const n=this.getContext(t),r=i.setContext(n),s=a.setContext(n);!function(e,t,n,r,i){const a=e.ctx,o=t.circular,{color:s,lineWidth:l}=t;!o&&!r||!s||!l||n<0||(a.save(),a.strokeStyle=s,a.lineWidth=l,a.setLineDash(i.dash||[]),a.lineDashOffset=i.dashOffset,a.beginPath(),Yn(e,n,o,r),a.closePath(),a.stroke(),a.restore())}(this,r,l,o,s)}})),n.display){for(e.save(),s=o-1;s>=0;s--){const r=n.setContext(this.getPointLabelContext(s)),{color:i,lineWidth:a}=r;a&&i&&(e.lineWidth=a,e.strokeStyle=i,e.setLineDash(r.borderDash),e.lineDashOffset=r.borderDashOffset,l=this.getDistanceFromCenterForValue(t.reverse?this.min:this.max),c=this.getPointPosition(s,l),e.beginPath(),e.moveTo(this.xCenter,this.yCenter),e.lineTo(c.x,c.y),e.stroke())}e.restore()}}drawBorder(){}drawLabels(){const e=this.ctx,t=this.options,n=t.ticks;if(!n.display)return;const i=this.getIndexAngle(0);let a,o;e.save(),e.translate(this.xCenter,this.yCenter),e.rotate(i),e.textAlign="center",e.textBaseline="middle",this.ticks.forEach(((i,s)=>{if(0===s&&this.min>=0&&!t.reverse)return;const l=n.setContext(this.getContext(s)),c=r.toFont(l.font);if(a=this.getDistanceFromCenterForValue(this.ticks[s].value),l.showLabelBackdrop){e.font=c.string,o=e.measureText(i.label).width,e.fillStyle=l.backdropColor;const t=r.toPadding(l.backdropPadding);e.fillRect(-o/2-t.left,-a-c.size/2-t.top,o+t.width,c.size+t.height)}r.renderText(e,i.label,0,-a,c,{color:l.color,strokeColor:l.textStrokeColor,strokeWidth:l.textStrokeWidth})})),e.restore()}drawTitle(){}}const Un={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},$n=Object.keys(Un);function qn(e,t){return e-t}function Qn(e,t){if(r.isNullOrUndef(t))return null;const n=e._adapter,{parser:i,round:a,isoWeekday:o}=e._parseOpts;let s=t;return"function"==typeof i&&(s=i(s)),r.isNumberFinite(s)||(s="string"==typeof i?n.parse(s,i):n.parse(s)),null===s?null:(a&&(s="week"!==a||!r.isNumber(o)&&!0!==o?n.startOf(s,a):n.startOf(s,"isoWeek",o)),+s)}function Zn(e,t,n,r){const i=$n.length;for(let a=$n.indexOf(e);a<i-1;++a){const e=Un[$n[a]],i=e.steps?e.steps:Number.MAX_SAFE_INTEGER;if(e.common&&Math.ceil((n-t)/(i*e.size))<=r)return $n[a]}return $n[i-1]}function Xn(e,t,n){if(n){if(n.length){const{lo:i,hi:a}=r._lookup(n,t);e[n[i]>=t?n[i]:n[a]]=!0}}else e[t]=!0}function Gn(e,t,n){const r=[],i={},a=t.length;let o,s;for(o=0;o<a;++o)s=t[o],i[s]=o,r.push({value:s,major:!1});return 0!==a&&n?function(e,t,n,r){const i=e._adapter,a=+i.startOf(t[0].value,r),o=t[t.length-1].value;let s,l;for(s=a;s<=o;s=+i.add(s,1,r))l=n[s],l>=0&&(t[l].major=!0);return t}(e,r,i,n):r}class Kn extends Te{static id="time";static defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",callback:!1,major:{enabled:!1}}};constructor(e){super(e),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(e,t={}){const n=e.time||(e.time={}),i=this._adapter=new W._date(e.adapters.date);i.init(t),r.mergeIf(n.displayFormats,i.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(e),this._normalized=t.normalized}parse(e,t){return void 0===e?null:Qn(this,e)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const e=this.options,t=this._adapter,n=e.time.unit||"day";let{min:i,max:a,minDefined:o,maxDefined:s}=this.getUserBounds();function l(e){o||isNaN(e.min)||(i=Math.min(i,e.min)),s||isNaN(e.max)||(a=Math.max(a,e.max))}o&&s||(l(this._getLabelBounds()),"ticks"===e.bounds&&"labels"===e.ticks.source||l(this.getMinMax(!1))),i=r.isNumberFinite(i)&&!isNaN(i)?i:+t.startOf(Date.now(),n),a=r.isNumberFinite(a)&&!isNaN(a)?a:+t.endOf(Date.now(),n)+1,this.min=Math.min(i,a-1),this.max=Math.max(i+1,a)}_getLabelBounds(){const e=this.getLabelTimestamps();let t=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return e.length&&(t=e[0],n=e[e.length-1]),{min:t,max:n}}buildTicks(){const e=this.options,t=e.time,n=e.ticks,i="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===e.bounds&&i.length&&(this.min=this._userMin||i[0],this.max=this._userMax||i[i.length-1]);const a=this.min,o=this.max,s=r._filterBetween(i,a,o);return this._unit=t.unit||(n.autoSkip?Zn(t.minUnit,this.min,this.max,this._getLabelCapacity(a)):function(e,t,n,r,i){for(let a=$n.length-1;a>=$n.indexOf(n);a--){const n=$n[a];if(Un[n].common&&e._adapter.diff(i,r,n)>=t-1)return n}return $n[n?$n.indexOf(n):0]}(this,s.length,t.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(e){for(let t=$n.indexOf(e)+1,n=$n.length;t<n;++t)if(Un[$n[t]].common)return $n[t]}(this._unit):void 0,this.initOffsets(i),e.reverse&&s.reverse(),Gn(this,s,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((e=>+e.value)))}initOffsets(e=[]){let t,n,i=0,a=0;this.options.offset&&e.length&&(t=this.getDecimalForValue(e[0]),i=1===e.length?1-t:(this.getDecimalForValue(e[1])-t)/2,n=this.getDecimalForValue(e[e.length-1]),a=1===e.length?n:(n-this.getDecimalForValue(e[e.length-2]))/2);const o=e.length<3?.5:.25;i=r._limitValue(i,0,o),a=r._limitValue(a,0,o),this._offsets={start:i,end:a,factor:1/(i+1+a)}}_generate(){const e=this._adapter,t=this.min,n=this.max,i=this.options,a=i.time,o=a.unit||Zn(a.minUnit,t,n,this._getLabelCapacity(t)),s=r.valueOrDefault(i.ticks.stepSize,1),l="week"===o&&a.isoWeekday,c=r.isNumber(l)||!0===l,u={};let d,f,h=t;if(c&&(h=+e.startOf(h,"isoWeek",l)),h=+e.startOf(h,c?"day":o),e.diff(n,t,o)>1e5*s)throw new Error(t+" and "+n+" are too far apart with stepSize of "+s+" "+o);const p="data"===i.ticks.source&&this.getDataTimestamps();for(d=h,f=0;d<n;d=+e.add(d,s,o),f++)Xn(u,d,p);return d!==n&&"ticks"!==i.bounds&&1!==f||Xn(u,d,p),Object.keys(u).sort(qn).map((e=>+e))}getLabelForValue(e){const t=this._adapter,n=this.options.time;return n.tooltipFormat?t.format(e,n.tooltipFormat):t.format(e,n.displayFormats.datetime)}format(e,t){const n=this.options.time.displayFormats,r=this._unit,i=t||n[r];return this._adapter.format(e,i)}_tickFormatFunction(e,t,n,i){const a=this.options,o=a.ticks.callback;if(o)return r.callback(o,[e,t,n],this);const s=a.time.displayFormats,l=this._unit,c=this._majorUnit,u=l&&s[l],d=c&&s[c],f=n[t],h=c&&d&&f&&f.major;return this._adapter.format(e,i||(h?d:u))}generateTickLabels(e){let t,n,r;for(t=0,n=e.length;t<n;++t)r=e[t],r.label=this._tickFormatFunction(r.value,t,e)}getDecimalForValue(e){return null===e?NaN:(e-this.min)/(this.max-this.min)}getPixelForValue(e){const t=this._offsets,n=this.getDecimalForValue(e);return this.getPixelForDecimal((t.start+n)*t.factor)}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return this.min+n*(this.max-this.min)}_getLabelSize(e){const t=this.options.ticks,n=this.ctx.measureText(e).width,i=r.toRadians(this.isHorizontal()?t.maxRotation:t.minRotation),a=Math.cos(i),o=Math.sin(i),s=this._resolveTickFontOptions(0).size;return{w:n*a+s*o,h:n*o+s*a}}_getLabelCapacity(e){const t=this.options.time,n=t.displayFormats,r=n[t.unit]||n.millisecond,i=this._tickFormatFunction(e,0,Gn(this,[e],this._majorUnit),r),a=this._getLabelSize(i),o=Math.floor(this.isHorizontal()?this.width/a.w:this.height/a.h)-1;return o>0?o:1}getDataTimestamps(){let e,t,n=this._cache.data||[];if(n.length)return n;const r=this.getMatchingVisibleMetas();if(this._normalized&&r.length)return this._cache.data=r[0].controller.getAllParsedValues(this);for(e=0,t=r.length;e<t;++e)n=n.concat(r[e].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const e=this._cache.labels||[];let t,n;if(e.length)return e;const r=this.getLabels();for(t=0,n=r.length;t<n;++t)e.push(Qn(this,r[t]));return this._cache.labels=this._normalized?e:this.normalize(e)}normalize(e){return r._arrayUnique(e.sort(qn))}}function Jn(e,t,n){let i,a,o,s,l=0,c=e.length-1;n?(t>=e[l].pos&&t<=e[c].pos&&({lo:l,hi:c}=r._lookupByKey(e,"pos",t)),({pos:i,time:o}=e[l]),({pos:a,time:s}=e[c])):(t>=e[l].time&&t<=e[c].time&&({lo:l,hi:c}=r._lookupByKey(e,"time",t)),({time:i,pos:o}=e[l]),({time:a,pos:s}=e[c]));const u=a-i;return u?o+(s-o)*(t-i)/u:o}class er extends Kn{static id="timeseries";static defaults=Kn.defaults;constructor(e){super(e),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const e=this._getTimestampsForTable(),t=this._table=this.buildLookupTable(e);this._minPos=Jn(t,this.min),this._tableRange=Jn(t,this.max)-this._minPos,super.initOffsets(e)}buildLookupTable(e){const{min:t,max:n}=this,r=[],i=[];let a,o,s,l,c;for(a=0,o=e.length;a<o;++a)l=e[a],l>=t&&l<=n&&r.push(l);if(r.length<2)return[{time:t,pos:0},{time:n,pos:1}];for(a=0,o=r.length;a<o;++a)c=r[a+1],s=r[a-1],l=r[a],Math.round((c+s)/2)!==l&&i.push({time:l,pos:a/(o-1)});return i}_generate(){const e=this.min,t=this.max;let n=super.getDataTimestamps();return n.includes(e)&&n.length||n.splice(0,0,e),n.includes(t)&&1!==n.length||n.push(t),n.sort(((e,t)=>e-t))}_getTimestampsForTable(){let e=this._cache.all||[];if(e.length)return e;const t=this.getDataTimestamps(),n=this.getLabelTimestamps();return e=t.length&&n.length?this.normalize(t.concat(n)):t.length?t:n,e=this._cache.all=e,e}getDecimalForValue(e){return(Jn(this._table,e)-this._minPos)/this._tableRange}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return Jn(this._table,n*this._tableRange+this._minPos,!0)}}var tr=Object.freeze({__proto__:null,CategoryScale:Cn,LinearScale:Dn,LogarithmicScale:In,RadialLinearScale:Vn,TimeScale:Kn,TimeSeriesScale:er});const nr=[z,Pt,Mn,tr];t.Ticks=r.Ticks,t.defaults=r.defaults,t.Animation=l,t.Animations=c,t.ArcElement=ht,t.BarController=P,t.BarElement=St,t.BasePlatform=oe,t.BasicPlatform=se,t.BubbleController=D,t.CategoryScale=Cn,t.Chart=ct,t.Colors=It,t.DatasetController=w,t.Decimation=Ft,t.DomPlatform=Ae,t.DoughnutController=j,t.Element=ke,t.Filler=tn,t.Interaction=q,t.Legend=on,t.LineController=T,t.LineElement=wt,t.LinearScale=Dn,t.LogarithmicScale=In,t.PieController=N,t.PointElement=_t,t.PolarAreaController=B,t.RadarController=I,t.RadialLinearScale=Vn,t.Scale=Te,t.ScatterController=L,t.SubTitle=un,t.TimeScale=Kn,t.TimeSeriesScale=er,t.Title=ln,t.Tooltip=En,t._adapters=W,t._detectPlatform=_e,t.animator=a,t.controllers=z,t.elements=Pt,t.layouts=ae,t.plugins=Mn,t.registerables=nr,t.registry=Ie,t.scales=tr},9878:(e,t,n)=>{"use strict";var r=n(4001);const i=(()=>{let e=0;return()=>e++})();function a(e){return null==e}function o(e){if(Array.isArray&&Array.isArray(e))return!0;const t=Object.prototype.toString.call(e);return"[object"===t.slice(0,7)&&"Array]"===t.slice(-6)}function s(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}function l(e){return("number"==typeof e||e instanceof Number)&&isFinite(+e)}function c(e,t){return void 0===e?t:e}const u=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100*t:+e;function d(e){if(o(e))return e.map(d);if(s(e)){const t=Object.create(null),n=Object.keys(e),r=n.length;let i=0;for(;i<r;++i)t[n[i]]=d(e[n[i]]);return t}return e}function f(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}function h(e,t,n,r){if(!f(e))return;const i=t[e],a=n[e];s(i)&&s(a)?p(i,a,r):t[e]=d(a)}function p(e,t,n){const r=o(t)?t:[t],i=r.length;if(!s(e))return e;const a=(n=n||{}).merger||h;let l;for(let t=0;t<i;++t){if(l=r[t],!s(l))continue;const i=Object.keys(l);for(let t=0,r=i.length;t<r;++t)a(i[t],e,l,n)}return e}function g(e,t){return p(e,t,{merger:m})}function m(e,t,n){if(!f(e))return;const r=t[e],i=n[e];s(r)&&s(i)?g(r,i):Object.prototype.hasOwnProperty.call(t,e)||(t[e]=d(i))}const b={"":e=>e,x:e=>e.x,y:e=>e.y};function y(e){const t=e.split("."),n=[];let r="";for(const e of t)r+=e,r.endsWith("\\")?r=r.slice(0,-1)+".":(n.push(r),r="");return n}function v(e,t){const n=b[t]||(b[t]=function(e){const t=y(e);return e=>{for(const n of t){if(""===n)break;e=e&&e[n]}return e}}(t));return n(e)}function x(e){return e.charAt(0).toUpperCase()+e.slice(1)}const w=e=>"function"==typeof e,A=Math.PI,_=2*A,k=_+A,E=Number.POSITIVE_INFINITY,M=A/180,O=A/2,C=A/4,S=2*A/3,P=Math.log10,D=Math.sign;function j(e,t,n){return Math.abs(e-t)<n}function T(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function B(e,t){return(e-t+k)%_-A}function N(e){return(e%_+_)%_}function I(e,t,n,r){const i=N(e),a=N(t),o=N(n),s=N(a-i),l=N(o-i),c=N(i-a),u=N(i-o);return i===a||i===o||r&&a===o||s>l&&c<u}function L(e,t,n){return Math.max(t,Math.min(n,e))}function z(e,t,n,r=1e-6){return e>=Math.min(t,n)-r&&e<=Math.max(t,n)+r}function F(e,t,n){n=n||(n=>e[n]<t);let r,i=e.length-1,a=0;for(;i-a>1;)r=a+i>>1,n(r)?a=r:i=r;return{lo:a,hi:i}}const R=(e,t,n,r)=>F(e,n,r?r=>{const i=e[r][t];return i<n||i===n&&e[r+1][t]===n}:r=>e[r][t]<n),W=["push","pop","shift","splice","unshift"],H="undefined"==typeof window?function(e){return e()}:window.requestAnimationFrame,Y=e=>0===e||1===e,V=(e,t,n)=>-Math.pow(2,10*(e-=1))*Math.sin((e-t)*_/n),U=(e,t,n)=>Math.pow(2,-10*e)*Math.sin((e-t)*_/n)+1,$={linear:e=>e,easeInQuad:e=>e*e,easeOutQuad:e=>-e*(e-2),easeInOutQuad:e=>(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1),easeInCubic:e=>e*e*e,easeOutCubic:e=>(e-=1)*e*e+1,easeInOutCubic:e=>(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2),easeInQuart:e=>e*e*e*e,easeOutQuart:e=>-((e-=1)*e*e*e-1),easeInOutQuart:e=>(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2),easeInQuint:e=>e*e*e*e*e,easeOutQuint:e=>(e-=1)*e*e*e*e+1,easeInOutQuint:e=>(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2),easeInSine:e=>1-Math.cos(e*O),easeOutSine:e=>Math.sin(e*O),easeInOutSine:e=>-.5*(Math.cos(A*e)-1),easeInExpo:e=>0===e?0:Math.pow(2,10*(e-1)),easeOutExpo:e=>1===e?1:1-Math.pow(2,-10*e),easeInOutExpo:e=>Y(e)?e:e<.5?.5*Math.pow(2,10*(2*e-1)):.5*(2-Math.pow(2,-10*(2*e-1))),easeInCirc:e=>e>=1?e:-(Math.sqrt(1-e*e)-1),easeOutCirc:e=>Math.sqrt(1-(e-=1)*e),easeInOutCirc:e=>(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1),easeInElastic:e=>Y(e)?e:V(e,.075,.3),easeOutElastic:e=>Y(e)?e:U(e,.075,.3),easeInOutElastic(e){const t=.1125;return Y(e)?e:e<.5?.5*V(2*e,t,.45):.5+.5*U(2*e-1,t,.45)},easeInBack(e){const t=1.70158;return e*e*((t+1)*e-t)},easeOutBack(e){const t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack(e){let t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:e=>1-$.easeOutBounce(1-e),easeOutBounce(e){const t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},easeInOutBounce:e=>e<.5?.5*$.easeInBounce(2*e):.5*$.easeOutBounce(2*e-1)+.5};function q(e){if(e&&"object"==typeof e){const t=e.toString();return"[object CanvasPattern]"===t||"[object CanvasGradient]"===t}return!1}function Q(e){return q(e)?e:new r.Color(e).saturate(.5).darken(.1).hexString()}const Z=["x","y","borderWidth","radius","tension"],X=["color","borderColor","backgroundColor"],G=new Map;function K(e,t,n){return function(e,t){t=t||{};const n=e+JSON.stringify(t);let r=G.get(n);return r||(r=new Intl.NumberFormat(e,t),G.set(n,r)),r}(t,n).format(e)}const J={values:e=>o(e)?e:""+e,numeric(e,t,n){if(0===e)return"0";const r=this.chart.options.locale;let i,a=e;if(n.length>1){const t=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(t<1e-4||t>1e15)&&(i="scientific"),a=function(e,t){let n=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(n)>=1&&e!==Math.floor(e)&&(n=e-Math.floor(e)),n}(e,n)}const o=P(Math.abs(a)),s=isNaN(o)?1:Math.max(Math.min(-1*Math.floor(o),20),0),l={notation:i,minimumFractionDigits:s,maximumFractionDigits:s};return Object.assign(l,this.options.ticks.format),K(e,r,l)},logarithmic(e,t,n){if(0===e)return"0";const r=n[t].significand||e/Math.pow(10,Math.floor(P(e)));return[1,2,3,5,10,15].includes(r)||t>.8*n.length?J.numeric.call(this,e,t,n):""}};var ee={formatters:J};const te=Object.create(null),ne=Object.create(null);function re(e,t){if(!t)return e;const n=t.split(".");for(let t=0,r=n.length;t<r;++t){const r=n[t];e=e[r]||(e[r]=Object.create(null))}return e}function ie(e,t,n){return"string"==typeof t?p(re(e,t),n):p(re(e,""),t)}class ae{constructor(e,t){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=e=>e.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(e,t)=>Q(t.backgroundColor),this.hoverBorderColor=(e,t)=>Q(t.borderColor),this.hoverColor=(e,t)=>Q(t.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(e),this.apply(t)}set(e,t){return ie(this,e,t)}get(e){return re(this,e)}describe(e,t){return ie(ne,e,t)}override(e,t){return ie(te,e,t)}route(e,t,n,r){const i=re(this,e),a=re(this,n),o="_"+t;Object.defineProperties(i,{[o]:{value:i[t],writable:!0},[t]:{enumerable:!0,get(){const e=this[o],t=a[r];return s(e)?Object.assign({},t,e):c(e,t)},set(e){this[o]=e}}})}apply(e){e.forEach((e=>e(this)))}}var oe=new ae({_scriptable:e=>!e.startsWith("on"),_indexable:e=>"events"!==e,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}},[function(e){e.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0}),e.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:e=>"onProgress"!==e&&"onComplete"!==e&&"fn"!==e}),e.set("animations",{colors:{type:"color",properties:X},numbers:{type:"number",properties:Z}}),e.describe("animations",{_fallback:"animation"}),e.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:e=>0|e}}}})},function(e){e.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}})},function(e){e.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",clip:!0,grace:0,grid:{display:!0,lineWidth:1,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(e,t)=>t.lineWidth,tickColor:(e,t)=>t.color,offset:!1},border:{display:!0,dash:[],dashOffset:0,width:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:ee.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),e.route("scale.ticks","color","","color"),e.route("scale.grid","color","","borderColor"),e.route("scale.border","color","","borderColor"),e.route("scale.title","color","","color"),e.describe("scale",{_fallback:!1,_scriptable:e=>!e.startsWith("before")&&!e.startsWith("after")&&"callback"!==e&&"parser"!==e,_indexable:e=>"borderDash"!==e&&"tickBorderDash"!==e&&"dash"!==e}),e.describe("scales",{_fallback:"scale"}),e.describe("scale.ticks",{_scriptable:e=>"backdropPadding"!==e&&"callback"!==e,_indexable:e=>"backdropPadding"!==e})}]);function se(e){return!e||a(e.size)||a(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}function le(e,t,n,r,i){let a=t[i];return a||(a=t[i]=e.measureText(i).width,n.push(i)),a>r&&(r=a),r}function ce(e,t,n,r,i){let a,o,s,l,c,u,d,f;const h=t.pointStyle,p=t.rotation,g=t.radius;let m=(p||0)*M;if(h&&"object"==typeof h&&(a=h.toString(),"[object HTMLImageElement]"===a||"[object HTMLCanvasElement]"===a))return e.save(),e.translate(n,r),e.rotate(m),e.drawImage(h,-h.width/2,-h.height/2,h.width,h.height),void e.restore();if(!(isNaN(g)||g<=0)){switch(e.beginPath(),h){default:i?e.ellipse(n,r,i/2,g,0,0,_):e.arc(n,r,g,0,_),e.closePath();break;case"triangle":u=i?i/2:g,e.moveTo(n+Math.sin(m)*u,r-Math.cos(m)*g),m+=S,e.lineTo(n+Math.sin(m)*u,r-Math.cos(m)*g),m+=S,e.lineTo(n+Math.sin(m)*u,r-Math.cos(m)*g),e.closePath();break;case"rectRounded":c=.516*g,l=g-c,o=Math.cos(m+C)*l,d=Math.cos(m+C)*(i?i/2-c:l),s=Math.sin(m+C)*l,f=Math.sin(m+C)*(i?i/2-c:l),e.arc(n-d,r-s,c,m-A,m-O),e.arc(n+f,r-o,c,m-O,m),e.arc(n+d,r+s,c,m,m+O),e.arc(n-f,r+o,c,m+O,m+A),e.closePath();break;case"rect":if(!p){l=Math.SQRT1_2*g,u=i?i/2:l,e.rect(n-u,r-l,2*u,2*l);break}m+=C;case"rectRot":d=Math.cos(m)*(i?i/2:g),o=Math.cos(m)*g,s=Math.sin(m)*g,f=Math.sin(m)*(i?i/2:g),e.moveTo(n-d,r-s),e.lineTo(n+f,r-o),e.lineTo(n+d,r+s),e.lineTo(n-f,r+o),e.closePath();break;case"crossRot":m+=C;case"cross":d=Math.cos(m)*(i?i/2:g),o=Math.cos(m)*g,s=Math.sin(m)*g,f=Math.sin(m)*(i?i/2:g),e.moveTo(n-d,r-s),e.lineTo(n+d,r+s),e.moveTo(n+f,r-o),e.lineTo(n-f,r+o);break;case"star":d=Math.cos(m)*(i?i/2:g),o=Math.cos(m)*g,s=Math.sin(m)*g,f=Math.sin(m)*(i?i/2:g),e.moveTo(n-d,r-s),e.lineTo(n+d,r+s),e.moveTo(n+f,r-o),e.lineTo(n-f,r+o),m+=C,d=Math.cos(m)*(i?i/2:g),o=Math.cos(m)*g,s=Math.sin(m)*g,f=Math.sin(m)*(i?i/2:g),e.moveTo(n-d,r-s),e.lineTo(n+d,r+s),e.moveTo(n+f,r-o),e.lineTo(n-f,r+o);break;case"line":o=i?i/2:Math.cos(m)*g,s=Math.sin(m)*g,e.moveTo(n-o,r-s),e.lineTo(n+o,r+s);break;case"dash":e.moveTo(n,r),e.lineTo(n+Math.cos(m)*(i?i/2:g),r+Math.sin(m)*g);break;case!1:e.closePath()}e.fill(),t.borderWidth>0&&e.stroke()}}function ue(e,t,n){return n=n||.5,!t||e&&e.x>t.left-n&&e.x<t.right+n&&e.y>t.top-n&&e.y<t.bottom+n}function de(e,t,n,r,i){if(i.strikethrough||i.underline){const a=e.measureText(r),o=t-a.actualBoundingBoxLeft,s=t+a.actualBoundingBoxRight,l=n-a.actualBoundingBoxAscent,c=n+a.actualBoundingBoxDescent,u=i.strikethrough?(l+c)/2:c;e.strokeStyle=e.fillStyle,e.beginPath(),e.lineWidth=i.decorationWidth||2,e.moveTo(o,u),e.lineTo(s,u),e.stroke()}}function fe(e,t){const n=e.fillStyle;e.fillStyle=t.color,e.fillRect(t.left,t.top,t.width,t.height),e.fillStyle=n}const he=/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/,pe=/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;function ge(e,t){const n=(""+e).match(he);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e}function me(e,t){const n={},r=s(t),i=r?Object.keys(t):t,a=s(e)?r?n=>c(e[n],e[t[n]]):t=>e[t]:()=>e;for(const e of i)n[e]=+a(e)||0;return n}function be(e){return me(e,{top:"y",right:"x",bottom:"y",left:"x"})}function ye(e,t){return Object.assign(Object.create(e),t)}function ve(e,t=[""],n,r,i=()=>e[0]){const a=n||e;void 0===r&&(r=Se("_fallback",e));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:e,_rootScopes:a,_fallback:r,_getTarget:i,override:n=>ve([n,...e],t,a,r)};return new Proxy(o,{deleteProperty:(t,n)=>(delete t[n],delete t._keys,delete e[0][n],!0),get:(n,r)=>_e(n,r,(()=>function(e,t,n,r){let i;for(const a of t)if(i=Se(we(a,e),n),void 0!==i)return Ae(e,i)?Oe(n,r,e,i):i}(r,t,e,n))),getOwnPropertyDescriptor:(e,t)=>Reflect.getOwnPropertyDescriptor(e._scopes[0],t),getPrototypeOf:()=>Reflect.getPrototypeOf(e[0]),has:(e,t)=>Pe(e).includes(t),ownKeys:e=>Pe(e),set(e,t,n){const r=e._storage||(e._storage=i());return e[t]=r[t]=n,delete e._keys,!0}})}function xe(e,t={scriptable:!0,indexable:!0}){const{_scriptable:n=t.scriptable,_indexable:r=t.indexable,_allKeys:i=t.allKeys}=e;return{allKeys:i,scriptable:n,indexable:r,isScriptable:w(n)?n:()=>n,isIndexable:w(r)?r:()=>r}}const we=(e,t)=>e?e+x(t):t,Ae=(e,t)=>s(t)&&"adapters"!==e&&(null===Object.getPrototypeOf(t)||t.constructor===Object);function _e(e,t,n){if(Object.prototype.hasOwnProperty.call(e,t)||"constructor"===t)return e[t];const r=n();return e[t]=r,r}function ke(e,t,n){return w(e)?e(t,n):e}const Ee=(e,t)=>!0===e?t:"string"==typeof e?v(t,e):void 0;function Me(e,t,n,r,i){for(const a of t){const t=Ee(n,a);if(t){e.add(t);const a=ke(t._fallback,n,i);if(void 0!==a&&a!==n&&a!==r)return a}else if(!1===t&&void 0!==r&&n!==r)return null}return!1}function Oe(e,t,n,r){const i=t._rootScopes,a=ke(t._fallback,n,r),l=[...e,...i],c=new Set;c.add(r);let u=Ce(c,l,n,a||n,r);return null!==u&&(void 0===a||a===n||(u=Ce(c,l,a,u,r),null!==u))&&ve(Array.from(c),[""],i,a,(()=>function(e,t,n){const r=e._getTarget();t in r||(r[t]={});const i=r[t];return o(i)&&s(n)?n:i||{}}(t,n,r)))}function Ce(e,t,n,r,i){for(;n;)n=Me(e,t,n,r,i);return n}function Se(e,t){for(const n of t){if(!n)continue;const t=n[e];if(void 0!==t)return t}}function Pe(e){let t=e._keys;return t||(t=e._keys=function(e){const t=new Set;for(const n of e)for(const e of Object.keys(n).filter((e=>!e.startsWith("_"))))t.add(e);return Array.from(t)}(e._scopes)),t}const De=Number.EPSILON||1e-14,je=(e,t)=>t<e.length&&!e[t].skip&&e[t],Te=e=>"x"===e?"y":"x";function Be(e,t,n,r){const i=e.skip?t:e,a=t,o=n.skip?t:n,s=T(a,i),l=T(o,a);let c=s/(s+l),u=l/(s+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const d=r*c,f=r*u;return{previous:{x:a.x-d*(o.x-i.x),y:a.y-d*(o.y-i.y)},next:{x:a.x+f*(o.x-i.x),y:a.y+f*(o.y-i.y)}}}function Ne(e,t="x"){const n=Te(t),r=e.length,i=Array(r).fill(0),a=Array(r);let o,s,l,c=je(e,0);for(o=0;o<r;++o)if(s=l,l=c,c=je(e,o+1),l){if(c){const e=c[t]-l[t];i[o]=0!==e?(c[n]-l[n])/e:0}a[o]=s?c?D(i[o-1])!==D(i[o])?0:(i[o-1]+i[o])/2:i[o-1]:i[o]}!function(e,t,n){const r=e.length;let i,a,o,s,l,c=je(e,0);for(let u=0;u<r-1;++u)l=c,c=je(e,u+1),l&&c&&(j(t[u],0,De)?n[u]=n[u+1]=0:(i=n[u]/t[u],a=n[u+1]/t[u],s=Math.pow(i,2)+Math.pow(a,2),s<=9||(o=3/Math.sqrt(s),n[u]=i*o*t[u],n[u+1]=a*o*t[u])))}(e,i,a),function(e,t,n="x"){const r=Te(n),i=e.length;let a,o,s,l=je(e,0);for(let c=0;c<i;++c){if(o=s,s=l,l=je(e,c+1),!s)continue;const i=s[n],u=s[r];o&&(a=(i-o[n])/3,s[`cp1${n}`]=i-a,s[`cp1${r}`]=u-a*t[c]),l&&(a=(l[n]-i)/3,s[`cp2${n}`]=i+a,s[`cp2${r}`]=u+a*t[c])}}(e,a,t)}function Ie(e,t,n){return Math.max(Math.min(e,n),t)}function Le(){return"undefined"!=typeof window&&"undefined"!=typeof document}function ze(e){let t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t}function Fe(e,t,n){let r;return"string"==typeof e?(r=parseInt(e,10),-1!==e.indexOf("%")&&(r=r/100*t.parentNode[n])):r=e,r}const Re=e=>e.ownerDocument.defaultView.getComputedStyle(e,null);function We(e,t){return Re(e).getPropertyValue(t)}const He=["top","right","bottom","left"];function Ye(e,t,n){const r={};n=n?"-"+n:"";for(let i=0;i<4;i++){const a=He[i];r[a]=parseFloat(e[t+"-"+a+n])||0}return r.width=r.left+r.right,r.height=r.top+r.bottom,r}const Ve=e=>Math.round(10*e)/10,Ue=function(){let e=!1;try{const t={get passive(){return e=!0,!1}};Le()&&(window.addEventListener("test",null,t),window.removeEventListener("test",null,t))}catch(e){}return e}();function $e(e,t,n,r){return{x:e.x+n*(t.x-e.x),y:e.y+n*(t.y-e.y)}}function qe(e){return"angle"===e?{between:I,compare:B,normalize:N}:{between:z,compare:(e,t)=>e-t,normalize:e=>e}}function Qe({start:e,end:t,count:n,loop:r,style:i}){return{start:e%n,end:t%n,loop:r&&(t-e+1)%n==0,style:i}}function Ze(e,t,n){if(!n)return[e];const{property:r,start:i,end:a}=n,o=t.length,{compare:s,between:l,normalize:c}=qe(r),{start:u,end:d,loop:f,style:h}=function(e,t,n){const{property:r,start:i,end:a}=n,{between:o,normalize:s}=qe(r),l=t.length;let c,u,{start:d,end:f,loop:h}=e;if(h){for(d+=l,f+=l,c=0,u=l;c<u&&o(s(t[d%l][r]),i,a);++c)d--,f--;d%=l,f%=l}return f<d&&(f+=l),{start:d,end:f,loop:h,style:e.style}}(e,t,n),p=[];let g,m,b,y=!1,v=null;for(let e=u,n=u;e<=d;++e)m=t[e%o],m.skip||(g=c(m[r]),g!==b&&(y=l(g,i,a),null===v&&(y||l(i,b,g)&&0!==s(i,b))&&(v=0===s(g,i)?e:n),null!==v&&(!y||0===s(a,g)||l(a,b,g))&&(p.push(Qe({start:v,end:e,loop:f,count:o,style:h})),v=null),n=e,b=g));return null!==v&&p.push(Qe({start:v,end:d,loop:f,count:o,style:h})),p}function Xe(e){return{backgroundColor:e.backgroundColor,borderCapStyle:e.borderCapStyle,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderJoinStyle:e.borderJoinStyle,borderWidth:e.borderWidth,borderColor:e.borderColor}}function Ge(e,t){if(!t)return!1;const n=[],r=function(e,t){return q(t)?(n.includes(t)||n.push(t),n.indexOf(t)):t};return JSON.stringify(e,r)!==JSON.stringify(t,r)}t.HALF_PI=O,t.INFINITY=E,t.PI=A,t.PITAU=k,t.QUARTER_PI=C,t.RAD_PER_DEG=M,t.TAU=_,t.TWO_THIRDS_PI=S,t.Ticks=ee,t._addGrace=function(e,t,n){const{min:r,max:i}=e,a=u(t,(i-r)/2),o=(e,t)=>n&&0===e?0:e+t;return{min:o(r,-Math.abs(a)),max:o(i,a)}},t._alignPixel=function(e,t,n){const r=e.currentDevicePixelRatio,i=0!==n?Math.max(n/2,.5):0;return Math.round((t-i)*r)/r+i},t._alignStartEnd=(e,t,n)=>"start"===e?t:"end"===e?n:(t+n)/2,t._angleBetween=I,t._angleDiff=B,t._arrayUnique=function(e){const t=new Set(e);return t.size===e.length?e:Array.from(t)},t._attachContext=function e(t,n,r,i){const a={_cacheable:!1,_proxy:t,_context:n,_subProxy:r,_stack:new Set,_descriptors:xe(t,i),setContext:n=>e(t,n,r,i),override:a=>e(t.override(a),n,r,i)};return new Proxy(a,{deleteProperty:(e,n)=>(delete e[n],delete t[n],!0),get:(t,n,r)=>_e(t,n,(()=>function(t,n,r){const{_proxy:i,_context:a,_subProxy:l,_descriptors:c}=t;let u=i[n];return w(u)&&c.isScriptable(n)&&(u=function(e,t,n,r){const{_proxy:i,_context:a,_subProxy:o,_stack:s}=n;if(s.has(e))throw new Error("Recursion detected: "+Array.from(s).join("->")+"->"+e);s.add(e);let l=t(a,o||r);return s.delete(e),Ae(e,l)&&(l=Oe(i._scopes,i,e,l)),l}(n,u,t,r)),o(u)&&u.length&&(u=function(t,n,r,i){const{_proxy:a,_context:o,_subProxy:l,_descriptors:c}=r;if(void 0!==o.index&&i(t))return n[o.index%n.length];if(s(n[0])){const r=n,i=a._scopes.filter((e=>e!==r));n=[];for(const s of r){const r=Oe(i,a,t,s);n.push(e(r,o,l&&l[t],c))}}return n}(n,u,t,c.isIndexable)),Ae(n,u)&&(u=e(u,a,l&&l[n],c)),u}(t,n,r))),getOwnPropertyDescriptor:(e,n)=>e._descriptors.allKeys?Reflect.has(t,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(t,n),getPrototypeOf:()=>Reflect.getPrototypeOf(t),has:(e,n)=>Reflect.has(t,n),ownKeys:()=>Reflect.ownKeys(t),set:(e,n,r)=>(t[n]=r,delete e[n],!0)})},t._bezierCurveTo=function(e,t,n,r){if(!t)return e.lineTo(n.x,n.y);e.bezierCurveTo(r?t.cp1x:t.cp2x,r?t.cp1y:t.cp2y,r?n.cp2x:n.cp1x,r?n.cp2y:n.cp1y,n.x,n.y)},t._bezierInterpolation=function(e,t,n,r){const i={x:e.cp2x,y:e.cp2y},a={x:t.cp1x,y:t.cp1y},o=$e(e,i,n),s=$e(i,a,n),l=$e(a,t,n),c=$e(o,s,n),u=$e(s,l,n);return $e(c,u,n)},t._boundSegment=Ze,t._boundSegments=function(e,t){const n=[],r=e.segments;for(let i=0;i<r.length;i++){const a=Ze(r[i],e.points,t);a.length&&n.push(...a)}return n},t._capitalize=x,t._computeSegments=function(e,t){const n=e.points,r=e.options.spanGaps,i=n.length;if(!i)return[];const a=!!e._loop,{start:o,end:s}=function(e,t,n,r){let i=0,a=t-1;if(n&&!r)for(;i<t&&!e[i].skip;)i++;for(;i<t&&e[i].skip;)i++;for(i%=t,n&&(a+=i);a>i&&e[a%t].skip;)a--;return a%=t,{start:i,end:a}}(n,i,a,r);return function(e,t,n,r){return r&&r.setContext&&n?function(e,t,n,r){const i=e._chart.getContext(),a=Xe(e.options),{_datasetIndex:o,options:{spanGaps:s}}=e,l=n.length,c=[];let u=a,d=t[0].start,f=d;function h(e,t,r,i){const a=s?-1:1;if(e!==t){for(e+=l;n[e%l].skip;)e-=a;for(;n[t%l].skip;)t+=a;e%l!=t%l&&(c.push({start:e%l,end:t%l,loop:r,style:i}),u=i,d=t%l)}}for(const e of t){d=s?d:e.start;let t,a=n[d%l];for(f=d+1;f<=e.end;f++){const s=n[f%l];t=Xe(r.setContext(ye(i,{type:"segment",p0:a,p1:s,p0DataIndex:(f-1)%l,p1DataIndex:f%l,datasetIndex:o}))),Ge(t,u)&&h(d,f-1,e.loop,u),a=s,u=t}d<f-1&&h(d,f-1,e.loop,u)}return c}(e,t,n,r):t}(e,!0===r?[{start:o,end:s,loop:a}]:function(e,t,n,r){const i=e.length,a=[];let o,s=t,l=e[t];for(o=t+1;o<=n;++o){const n=e[o%i];n.skip||n.stop?l.skip||(r=!1,a.push({start:t%i,end:(o-1)%i,loop:r}),t=s=n.stop?o:null):(s=o,l.skip&&(t=o)),l=n}return null!==s&&a.push({start:t%i,end:s%i,loop:r}),a}(n,o,s<o?s+i:s,!!e._fullLoop&&0===o&&s===i-1),n,t)},t._createResolver=ve,t._decimalPlaces=function(e){if(!l(e))return;let t=1,n=0;for(;Math.round(e*t)/t!==e;)t*=10,n++;return n},t._deprecated=function(e,t,n,r){void 0!==t&&console.warn(e+': "'+n+'" is deprecated. Please use "'+r+'" instead')},t._descriptors=xe,t._elementsEqual=function(e,t){let n,r,i,a;if(!e||!t||e.length!==t.length)return!1;for(n=0,r=e.length;n<r;++n)if(i=e[n],a=t[n],i.datasetIndex!==a.datasetIndex||i.index!==a.index)return!1;return!0},t._factorize=function(e){const t=[],n=Math.sqrt(e);let r;for(r=1;r<n;r++)e%r==0&&(t.push(r),t.push(e/r));return n===(0|n)&&t.push(n),t.sort(((e,t)=>e-t)).pop(),t},t._filterBetween=function(e,t,n){let r=0,i=e.length;for(;r<i&&e[r]<t;)r++;for(;i>r&&e[i-1]>n;)i--;return r>0||i<e.length?e.slice(r,i):e},t._getParentNode=ze,t._getStartAndCountOfVisiblePoints=function(e,t,n){const r=t.length;let i=0,a=r;if(e._sorted){const{iScale:o,_parsed:s}=e,l=o.axis,{min:c,max:u,minDefined:d,maxDefined:f}=o.getUserBounds();d&&(i=L(Math.min(R(s,l,c).lo,n?r:R(t,l,o.getPixelForValue(c)).lo),0,r-1)),a=f?L(Math.max(R(s,o.axis,u,!0).hi+1,n?0:R(t,l,o.getPixelForValue(u),!0).hi+1),i,r)-i:r-i}return{start:i,count:a}},t._int16Range=function(e){return L(e,-32768,32767)},t._isBetween=z,t._isClickEvent=function(e){return"mouseup"===e.type||"click"===e.type||"contextmenu"===e.type},t._isDomSupported=Le,t._isPointInArea=ue,t._limitValue=L,t._longestText=function(e,t,n,r){let i=(r=r||{}).data=r.data||{},a=r.garbageCollect=r.garbageCollect||[];r.font!==t&&(i=r.data={},a=r.garbageCollect=[],r.font=t),e.save(),e.font=t;let s=0;const l=n.length;let c,u,d,f,h;for(c=0;c<l;c++)if(f=n[c],null==f||o(f)){if(o(f))for(u=0,d=f.length;u<d;u++)h=f[u],null==h||o(h)||(s=le(e,i,a,s,h))}else s=le(e,i,a,s,f);e.restore();const p=a.length/2;if(p>n.length){for(c=0;c<p;c++)delete i[a[c]];a.splice(0,p)}return s},t._lookup=F,t._lookupByKey=R,t._measureText=le,t._merger=h,t._mergerIf=m,t._normalizeAngle=N,t._parseObjectDataRadialScale=function(e,t,n,r){const{iScale:i}=e,{key:a="r"}=this._parsing,o=new Array(r);let s,l,c,u;for(s=0,l=r;s<l;++s)c=s+n,u=t[c],o[s]={r:i.parse(v(u,a),c)};return o},t._pointInLine=$e,t._readValueToProps=me,t._rlookupByKey=(e,t,n)=>F(e,n,(r=>e[r][t]>=n)),t._scaleRangesChanged=function(e){const{xScale:t,yScale:n,_scaleRanges:r}=e,i={xmin:t.min,xmax:t.max,ymin:n.min,ymax:n.max};if(!r)return e._scaleRanges=i,!0;const a=r.xmin!==t.min||r.xmax!==t.max||r.ymin!==n.min||r.ymax!==n.max;return Object.assign(r,i),a},t._setMinAndMaxByKey=function(e,t,n){let r,i,a;for(r=0,i=e.length;r<i;r++)a=e[r][n],isNaN(a)||(t.min=Math.min(t.min,a),t.max=Math.max(t.max,a))},t._splitKey=y,t._steppedInterpolation=function(e,t,n,r){return{x:e.x+n*(t.x-e.x),y:"middle"===r?n<.5?e.y:t.y:"after"===r?n<1?e.y:t.y:n>0?t.y:e.y}},t._steppedLineTo=function(e,t,n,r,i){if(!t)return e.lineTo(n.x,n.y);if("middle"===i){const r=(t.x+n.x)/2;e.lineTo(r,t.y),e.lineTo(r,n.y)}else"after"===i!=!!r?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)},t._textX=(e,t,n,r)=>e===(r?"left":"right")?n:"center"===e?(t+n)/2:t,t._toLeftRightCenter=e=>"start"===e?"left":"end"===e?"right":"center",t._updateBezierControlPoints=function(e,t,n,r,i){let a,o,s,l;if(t.spanGaps&&(e=e.filter((e=>!e.skip))),"monotone"===t.cubicInterpolationMode)Ne(e,i);else{let n=r?e[e.length-1]:e[0];for(a=0,o=e.length;a<o;++a)s=e[a],l=Be(n,s,e[Math.min(a+1,o-(r?0:1))%o],t.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,n=s}t.capBezierPoints&&function(e,t){let n,r,i,a,o,s=ue(e[0],t);for(n=0,r=e.length;n<r;++n)o=a,a=s,s=n<r-1&&ue(e[n+1],t),a&&(i=e[n],o&&(i.cp1x=Ie(i.cp1x,t.left,t.right),i.cp1y=Ie(i.cp1y,t.top,t.bottom)),s&&(i.cp2x=Ie(i.cp2x,t.left,t.right),i.cp2y=Ie(i.cp2y,t.top,t.bottom)))}(e,n)},t.addRoundedRectPath=function(e,t){const{x:n,y:r,w:i,h:a,radius:o}=t;e.arc(n+o.topLeft,r+o.topLeft,o.topLeft,1.5*A,A,!0),e.lineTo(n,r+a-o.bottomLeft),e.arc(n+o.bottomLeft,r+a-o.bottomLeft,o.bottomLeft,A,O,!0),e.lineTo(n+i-o.bottomRight,r+a),e.arc(n+i-o.bottomRight,r+a-o.bottomRight,o.bottomRight,O,0,!0),e.lineTo(n+i,r+o.topRight),e.arc(n+i-o.topRight,r+o.topRight,o.topRight,0,-O,!0),e.lineTo(n+o.topLeft,r)},t.almostEquals=j,t.almostWhole=function(e,t){const n=Math.round(e);return n-t<=e&&n+t>=e},t.callback=function(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)},t.clearCanvas=function(e,t){(t||e)&&((t=t||e.getContext("2d")).save(),t.resetTransform(),t.clearRect(0,0,e.width,e.height),t.restore())},t.clipArea=function(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()},t.clone=d,t.color=function(e){return q(e)?e:new r.Color(e)},t.createContext=ye,t.debounce=function(e,t){let n;return function(...r){return t?(clearTimeout(n),n=setTimeout(e,t,r)):e.apply(this,r),t}},t.defaults=oe,t.defined=e=>void 0!==e,t.descriptors=ne,t.distanceBetweenPoints=T,t.drawPoint=function(e,t,n,r){ce(e,t,n,r,null)},t.drawPointLegend=ce,t.each=function(e,t,n,r){let i,a,l;if(o(e))if(a=e.length,r)for(i=a-1;i>=0;i--)t.call(n,e[i],i);else for(i=0;i<a;i++)t.call(n,e[i],i);else if(s(e))for(l=Object.keys(e),a=l.length,i=0;i<a;i++)t.call(n,e[l[i]],l[i])},t.effects=$,t.finiteOrDefault=function(e,t){return l(e)?e:t},t.fontString=function(e,t,n){return t+" "+e+"px "+n},t.formatNumber=K,t.getAngleFromPoint=function(e,t){const n=t.x-e.x,r=t.y-e.y,i=Math.sqrt(n*n+r*r);let a=Math.atan2(r,n);return a<-.5*A&&(a+=_),{angle:a,distance:i}},t.getHoverColor=Q,t.getMaximumSize=function(e,t,n,r){const i=Re(e),a=Ye(i,"margin"),o=Fe(i.maxWidth,e,"clientWidth")||E,s=Fe(i.maxHeight,e,"clientHeight")||E,l=function(e,t,n){let r,i;if(void 0===t||void 0===n){const a=e&&ze(e);if(a){const e=a.getBoundingClientRect(),o=Re(a),s=Ye(o,"border","width"),l=Ye(o,"padding");t=e.width-l.width-s.width,n=e.height-l.height-s.height,r=Fe(o.maxWidth,a,"clientWidth"),i=Fe(o.maxHeight,a,"clientHeight")}else t=e.clientWidth,n=e.clientHeight}return{width:t,height:n,maxWidth:r||E,maxHeight:i||E}}(e,t,n);let{width:c,height:u}=l;if("content-box"===i.boxSizing){const e=Ye(i,"border","width"),t=Ye(i,"padding");c-=t.width+e.width,u-=t.height+e.height}return c=Math.max(0,c-a.width),u=Math.max(0,r?c/r:u-a.height),c=Ve(Math.min(c,o,l.maxWidth)),u=Ve(Math.min(u,s,l.maxHeight)),c&&!u&&(u=Ve(c/2)),(void 0!==t||void 0!==n)&&r&&l.height&&u>l.height&&(u=l.height,c=Ve(Math.floor(u*r))),{width:c,height:u}},t.getRelativePosition=function(e,t){if("native"in e)return e;const{canvas:n,currentDevicePixelRatio:r}=t,i=Re(n),a="border-box"===i.boxSizing,o=Ye(i,"padding"),s=Ye(i,"border","width"),{x:l,y:c,box:u}=function(e,t){const n=e.touches,r=n&&n.length?n[0]:e,{offsetX:i,offsetY:a}=r;let o,s,l=!1;if(((e,t,n)=>(e>0||t>0)&&(!n||!n.shadowRoot))(i,a,e.target))o=i,s=a;else{const e=t.getBoundingClientRect();o=r.clientX-e.left,s=r.clientY-e.top,l=!0}return{x:o,y:s,box:l}}(e,n),d=o.left+(u&&s.left),f=o.top+(u&&s.top);let{width:h,height:p}=t;return a&&(h-=o.width+s.width,p-=o.height+s.height),{x:Math.round((l-d)/h*n.width/r),y:Math.round((c-f)/p*n.height/r)}},t.getRtlAdapter=function(e,t,n){return e?function(e,t){return{x:n=>e+e+t-n,setWidth(e){t=e},textAlign:e=>"center"===e?e:"right"===e?"left":"right",xPlus:(e,t)=>e-t,leftForLtr:(e,t)=>e-t}}(t,n):{x:e=>e,setWidth(e){},textAlign:e=>e,xPlus:(e,t)=>e+t,leftForLtr:(e,t)=>e}},t.getStyle=We,t.isArray=o,t.isFunction=w,t.isNullOrUndef=a,t.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},t.isNumberFinite=l,t.isObject=s,t.isPatternOrGradient=q,t.listenArrayEvents=function(e,t){e._chartjs?e._chartjs.listeners.push(t):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),W.forEach((t=>{const n="_onData"+x(t),r=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value(...t){const i=r.apply(this,t);return e._chartjs.listeners.forEach((e=>{"function"==typeof e[n]&&e[n](...t)})),i}})})))},t.log10=P,t.merge=p,t.mergeIf=g,t.niceNum=function(e){const t=Math.round(e);e=j(e,t,e/1e3)?t:e;const n=Math.pow(10,Math.floor(P(e))),r=e/n;return(r<=1?1:r<=2?2:r<=5?5:10)*n},t.noop=function(){},t.overrideTextDirection=function(e,t){let n,r;"ltr"!==t&&"rtl"!==t||(n=e.canvas.style,r=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=r)},t.overrides=te,t.readUsedSize=function(e,t){const n=We(e,t),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?+r[1]:void 0},t.renderText=function(e,t,n,r,i,s={}){const l=o(t)?t:[t],c=s.strokeWidth>0&&""!==s.strokeColor;let u,d;for(e.save(),e.font=i.string,function(e,t){t.translation&&e.translate(t.translation[0],t.translation[1]),a(t.rotation)||e.rotate(t.rotation),t.color&&(e.fillStyle=t.color),t.textAlign&&(e.textAlign=t.textAlign),t.textBaseline&&(e.textBaseline=t.textBaseline)}(e,s),u=0;u<l.length;++u)d=l[u],s.backdrop&&fe(e,s.backdrop),c&&(s.strokeColor&&(e.strokeStyle=s.strokeColor),a(s.strokeWidth)||(e.lineWidth=s.strokeWidth),e.strokeText(d,n,r,s.maxWidth)),e.fillText(d,n,r,s.maxWidth),de(e,n,r,d,s),r+=Number(i.lineHeight);e.restore()},t.requestAnimFrame=H,t.resolve=function(e,t,n,r){let i,a,s,l=!0;for(i=0,a=e.length;i<a;++i)if(s=e[i],void 0!==s&&(void 0!==t&&"function"==typeof s&&(s=s(t),l=!1),void 0!==n&&o(s)&&(s=s[n%s.length],l=!1),void 0!==s))return r&&!l&&(r.cacheable=!1),s},t.resolveObjectKey=v,t.restoreTextDirection=function(e,t){void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))},t.retinaScale=function(e,t,n){const r=t||1,i=Math.floor(e.height*r),a=Math.floor(e.width*r);e.height=Math.floor(e.height),e.width=Math.floor(e.width);const o=e.canvas;return o.style&&(n||!o.style.height&&!o.style.width)&&(o.style.height=`${e.height}px`,o.style.width=`${e.width}px`),(e.currentDevicePixelRatio!==r||o.height!==i||o.width!==a)&&(e.currentDevicePixelRatio=r,o.height=i,o.width=a,e.ctx.setTransform(r,0,0,r,0,0),!0)},t.setsEqual=(e,t)=>{if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0},t.sign=D,t.splineCurve=Be,t.splineCurveMonotone=Ne,t.supportsEventListenerOptions=Ue,t.throttled=function(e,t){let n=[],r=!1;return function(...i){n=i,r||(r=!0,H.call(window,(()=>{r=!1,e.apply(t,n)})))}},t.toDegrees=function(e){return e*(180/A)},t.toDimension=u,t.toFont=function(e,t){e=e||{},t=t||oe.font;let n=c(e.size,t.size);"string"==typeof n&&(n=parseInt(n,10));let r=c(e.style,t.style);r&&!(""+r).match(pe)&&(console.warn('Invalid font style specified: "'+r+'"'),r=void 0);const i={family:c(e.family,t.family),lineHeight:ge(c(e.lineHeight,t.lineHeight),n),size:n,style:r,weight:c(e.weight,t.weight),string:""};return i.string=se(i),i},t.toFontString=se,t.toLineHeight=ge,t.toPadding=function(e){const t=be(e);return t.width=t.left+t.right,t.height=t.top+t.bottom,t},t.toPercentage=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100:+e/t,t.toRadians=function(e){return e*(A/180)},t.toTRBL=be,t.toTRBLCorners=function(e){return me(e,["topLeft","topRight","bottomLeft","bottomRight"])},t.uid=i,t.unclipArea=function(e){e.restore()},t.unlistenArrayEvents=function(e,t){const n=e._chartjs;if(!n)return;const r=n.listeners,i=r.indexOf(t);-1!==i&&r.splice(i,1),r.length>0||(W.forEach((t=>{delete e[t]})),delete e._chartjs)},t.valueOrDefault=c},2554:(e,t)=>{"use strict";t.addLeadingZeros=function(e,t){return(e<0?"-":"")+Math.abs(e).toString().padStart(t,"0")}},9577:(e,t,n)=>{"use strict";Object.defineProperty(t,"defaultLocale",{enumerable:!0,get:function(){return r.enUS}});var r=n(1343)},6755:(e,t)=>{"use strict";t.getDefaultOptions=function(){return n},t.setDefaultOptions=function(e){n=e};let n={}},3525:(e,t,n)=>{"use strict";t.formatters=void 0;var r=n(659),i=n(8926),a=n(9957),o=n(9639),s=n(6708),l=n(2554),c=n(8441);function u(e,t=""){const n=e>0?"-":"+",r=Math.abs(e),i=Math.trunc(r/60),a=r%60;return 0===a?n+String(i):n+String(i)+t+(0,l.addLeadingZeros)(a,2)}function d(e,t){return e%60==0?(e>0?"-":"+")+(0,l.addLeadingZeros)(Math.abs(e)/60,2):f(e,t)}function f(e,t=""){const n=e>0?"-":"+",r=Math.abs(e);return n+(0,l.addLeadingZeros)(Math.trunc(r/60),2)+t+(0,l.addLeadingZeros)(r%60,2)}t.formatters={G:function(e,t,n){const r=e.getFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});default:return n.era(r,{width:"wide"})}},y:function(e,t,n){if("yo"===t){const t=e.getFullYear(),r=t>0?t:1-t;return n.ordinalNumber(r,{unit:"year"})}return c.lightFormatters.y(e,t)},Y:function(e,t,n,r){const i=(0,s.getWeekYear)(e,r),a=i>0?i:1-i;if("YY"===t){const e=a%100;return(0,l.addLeadingZeros)(e,2)}return"Yo"===t?n.ordinalNumber(a,{unit:"year"}):(0,l.addLeadingZeros)(a,t.length)},R:function(e,t){const n=(0,a.getISOWeekYear)(e);return(0,l.addLeadingZeros)(n,t.length)},u:function(e,t){const n=e.getFullYear();return(0,l.addLeadingZeros)(n,t.length)},Q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return(0,l.addLeadingZeros)(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(e,t,n){const r=Math.ceil((e.getMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return(0,l.addLeadingZeros)(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(e,t,n){const r=e.getMonth();switch(t){case"M":case"MM":return c.lightFormatters.M(e,t);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(e,t,n){const r=e.getMonth();switch(t){case"L":return String(r+1);case"LL":return(0,l.addLeadingZeros)(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(e,t,n,r){const i=(0,o.getWeek)(e,r);return"wo"===t?n.ordinalNumber(i,{unit:"week"}):(0,l.addLeadingZeros)(i,t.length)},I:function(e,t,n){const r=(0,i.getISOWeek)(e);return"Io"===t?n.ordinalNumber(r,{unit:"week"}):(0,l.addLeadingZeros)(r,t.length)},d:function(e,t,n){return"do"===t?n.ordinalNumber(e.getDate(),{unit:"date"}):c.lightFormatters.d(e,t)},D:function(e,t,n){const i=(0,r.getDayOfYear)(e);return"Do"===t?n.ordinalNumber(i,{unit:"dayOfYear"}):(0,l.addLeadingZeros)(i,t.length)},E:function(e,t,n){const r=e.getDay();switch(t){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(e,t,n,r){const i=e.getDay(),a=(i-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(a);case"ee":return(0,l.addLeadingZeros)(a,2);case"eo":return n.ordinalNumber(a,{unit:"day"});case"eee":return n.day(i,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(i,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(i,{width:"short",context:"formatting"});default:return n.day(i,{width:"wide",context:"formatting"})}},c:function(e,t,n,r){const i=e.getDay(),a=(i-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(a);case"cc":return(0,l.addLeadingZeros)(a,t.length);case"co":return n.ordinalNumber(a,{unit:"day"});case"ccc":return n.day(i,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(i,{width:"narrow",context:"standalone"});case"cccccc":return n.day(i,{width:"short",context:"standalone"});default:return n.day(i,{width:"wide",context:"standalone"})}},i:function(e,t,n){const r=e.getDay(),i=0===r?7:r;switch(t){case"i":return String(i);case"ii":return(0,l.addLeadingZeros)(i,t.length);case"io":return n.ordinalNumber(i,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(e,t,n){const r=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(e,t,n){const r=e.getHours();let i;switch(i=12===r?"noon":0===r?"midnight":r/12>=1?"pm":"am",t){case"b":case"bb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},B:function(e,t,n){const r=e.getHours();let i;switch(i=r>=17?"evening":r>=12?"afternoon":r>=4?"morning":"night",t){case"B":case"BB":case"BBB":return n.dayPeriod(i,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(i,{width:"narrow",context:"formatting"});default:return n.dayPeriod(i,{width:"wide",context:"formatting"})}},h:function(e,t,n){if("ho"===t){let t=e.getHours()%12;return 0===t&&(t=12),n.ordinalNumber(t,{unit:"hour"})}return c.lightFormatters.h(e,t)},H:function(e,t,n){return"Ho"===t?n.ordinalNumber(e.getHours(),{unit:"hour"}):c.lightFormatters.H(e,t)},K:function(e,t,n){const r=e.getHours()%12;return"Ko"===t?n.ordinalNumber(r,{unit:"hour"}):(0,l.addLeadingZeros)(r,t.length)},k:function(e,t,n){let r=e.getHours();return 0===r&&(r=24),"ko"===t?n.ordinalNumber(r,{unit:"hour"}):(0,l.addLeadingZeros)(r,t.length)},m:function(e,t,n){return"mo"===t?n.ordinalNumber(e.getMinutes(),{unit:"minute"}):c.lightFormatters.m(e,t)},s:function(e,t,n){return"so"===t?n.ordinalNumber(e.getSeconds(),{unit:"second"}):c.lightFormatters.s(e,t)},S:function(e,t){return c.lightFormatters.S(e,t)},X:function(e,t,n){const r=e.getTimezoneOffset();if(0===r)return"Z";switch(t){case"X":return d(r);case"XXXX":case"XX":return f(r);default:return f(r,":")}},x:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"x":return d(r);case"xxxx":case"xx":return f(r);default:return f(r,":")}},O:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+u(r,":");default:return"GMT"+f(r,":")}},z:function(e,t,n){const r=e.getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+u(r,":");default:return"GMT"+f(r,":")}},t:function(e,t,n){const r=Math.trunc(+e/1e3);return(0,l.addLeadingZeros)(r,t.length)},T:function(e,t,n){return(0,l.addLeadingZeros)(+e,t.length)}}},8441:(e,t,n)=>{"use strict";t.lightFormatters=void 0;var r=n(2554);t.lightFormatters={y(e,t){const n=e.getFullYear(),i=n>0?n:1-n;return(0,r.addLeadingZeros)("yy"===t?i%100:i,t.length)},M(e,t){const n=e.getMonth();return"M"===t?String(n+1):(0,r.addLeadingZeros)(n+1,2)},d:(e,t)=>(0,r.addLeadingZeros)(e.getDate(),t.length),a(e,t){const n=e.getHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return n.toUpperCase();case"aaa":return n;case"aaaaa":return n[0];default:return"am"===n?"a.m.":"p.m."}},h:(e,t)=>(0,r.addLeadingZeros)(e.getHours()%12||12,t.length),H:(e,t)=>(0,r.addLeadingZeros)(e.getHours(),t.length),m:(e,t)=>(0,r.addLeadingZeros)(e.getMinutes(),t.length),s:(e,t)=>(0,r.addLeadingZeros)(e.getSeconds(),t.length),S(e,t){const n=t.length,i=e.getMilliseconds(),a=Math.trunc(i*Math.pow(10,n-3));return(0,r.addLeadingZeros)(a,t.length)}}},7083:(e,t)=>{"use strict";t.longFormatters=void 0;const n=(e,t)=>{switch(e){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});default:return t.date({width:"full"})}},r=(e,t)=>{switch(e){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});default:return t.time({width:"full"})}};t.longFormatters={p:r,P:(e,t)=>{const i=e.match(/(P+)(p+)?/)||[],a=i[1],o=i[2];if(!o)return n(e,t);let s;switch(a){case"P":s=t.dateTime({width:"short"});break;case"PP":s=t.dateTime({width:"medium"});break;case"PPP":s=t.dateTime({width:"long"});break;default:s=t.dateTime({width:"full"})}return s.replace("{{date}}",n(a,t)).replace("{{time}}",r(o,t))}}},1331:(e,t)=>{"use strict";t.getRoundingMethod=function(e){return t=>{const n=(e?Math[e]:Math.trunc)(t);return 0===n?0:n}}},6339:(e,t,n)=>{"use strict";t.getTimezoneOffsetInMilliseconds=function(e){const t=(0,r.toDate)(e),n=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return n.setUTCFullYear(t.getFullYear()),+e-+n};var r=n(4446)},8256:(e,t,n)=>{"use strict";t.normalizeDates=function(e,...t){const n=r.constructFrom.bind(null,e||t.find((e=>"object"==typeof e)));return t.map(n)};var r=n(2956)},5909:(e,t,n)=>{"use strict";t.normalizeInterval=function(e,t){const[n,i]=(0,r.normalizeDates)(e,t.start,t.end);return{start:n,end:i}};var r=n(8256)},2364:(e,t)=>{"use strict";t.isProtectedDayOfYearToken=function(e){return n.test(e)},t.isProtectedWeekYearToken=function(e){return r.test(e)},t.warnOrThrowProtectedError=function(e,t,n){const r=function(e,t,n){const r="Y"===e[0]?"years":"days of the month";return`Use \`${e.toLowerCase()}\` instead of \`${e}\` (in \`${t}\`) for formatting ${r} to the input \`${n}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`}(e,t,n);if(console.warn(r),i.includes(e))throw new RangeError(r)};const n=/^D+$/,r=/^Y+$/,i=["D","DD","YY","YYYY"]},7626:(e,t,n)=>{"use strict";t.add=function(e,t,n){const{years:s=0,months:l=0,weeks:c=0,days:u=0,hours:d=0,minutes:f=0,seconds:h=0}=t,p=(0,o.toDate)(e,n?.in),g=l||s?(0,i.addMonths)(p,l+12*s):p,m=u||c?(0,r.addDays)(g,u+7*c):g,b=1e3*(h+60*(f+60*d));return(0,a.constructFrom)(n?.in||e,+m+b)};var r=n(7591),i=n(6379),a=n(2956),o=n(4446)},9941:(e,t,n)=>{"use strict";t.addBusinessDays=function(e,t,n){const l=(0,s.toDate)(e,n?.in),c=(0,o.isWeekend)(l,n);if(isNaN(t))return(0,r.constructFrom)(n?.in,NaN);const u=l.getHours(),d=t<0?-1:1,f=Math.trunc(t/5);l.setDate(l.getDate()+7*f);let h=Math.abs(t%5);for(;h>0;)l.setDate(l.getDate()+d),(0,o.isWeekend)(l,n)||(h-=1);return c&&(0,o.isWeekend)(l,n)&&0!==t&&((0,i.isSaturday)(l,n)&&l.setDate(l.getDate()+(d<0?2:-1)),(0,a.isSunday)(l,n)&&l.setDate(l.getDate()+(d<0?1:-2))),l.setHours(u),l};var r=n(2956),i=n(2056),a=n(3561),o=n(3348),s=n(4446)},7591:(e,t,n)=>{"use strict";t.addDays=function(e,t,n){const a=(0,i.toDate)(e,n?.in);return isNaN(t)?(0,r.constructFrom)(n?.in||e,NaN):t?(a.setDate(a.getDate()+t),a):a};var r=n(2956),i=n(4446)},9463:(e,t,n)=>{"use strict";t.addHours=function(e,t,n){return(0,r.addMilliseconds)(e,t*i.millisecondsInHour,n)};var r=n(4280),i=n(8052)},2945:(e,t,n)=>{"use strict";t.addISOWeekYears=function(e,t,n){return(0,i.setISOWeekYear)(e,(0,r.getISOWeekYear)(e,n)+t,n)};var r=n(9957),i=n(4617)},4280:(e,t,n)=>{"use strict";t.addMilliseconds=function(e,t,n){return(0,r.constructFrom)(n?.in||e,+(0,i.toDate)(e)+t)};var r=n(2956),i=n(4446)},3937:(e,t,n)=>{"use strict";t.addMinutes=function(e,t,n){const a=(0,i.toDate)(e,n?.in);return a.setTime(a.getTime()+t*r.millisecondsInMinute),a};var r=n(8052),i=n(4446)},6379:(e,t,n)=>{"use strict";t.addMonths=function(e,t,n){const a=(0,i.toDate)(e,n?.in);if(isNaN(t))return(0,r.constructFrom)(n?.in||e,NaN);if(!t)return a;const o=a.getDate(),s=(0,r.constructFrom)(n?.in||e,a.getTime());s.setMonth(a.getMonth()+t+1,0);return o>=s.getDate()?s:(a.setFullYear(s.getFullYear(),s.getMonth(),o),a)};var r=n(2956),i=n(4446)},1149:(e,t,n)=>{"use strict";t.addQuarters=function(e,t,n){return(0,r.addMonths)(e,3*t,n)};var r=n(6379)},6689:(e,t,n)=>{"use strict";t.addSeconds=function(e,t,n){return(0,r.addMilliseconds)(e,1e3*t,n)};var r=n(4280)},4073:(e,t,n)=>{"use strict";t.addWeeks=function(e,t,n){return(0,r.addDays)(e,7*t,n)};var r=n(7591)},1440:(e,t,n)=>{"use strict";t.addYears=function(e,t,n){return(0,r.addMonths)(e,12*t,n)};var r=n(6379)},4674:(e,t,n)=>{"use strict";t.areIntervalsOverlapping=function(e,t,n){const[i,a]=[+(0,r.toDate)(e.start,n?.in),+(0,r.toDate)(e.end,n?.in)].sort(((e,t)=>e-t)),[o,s]=[+(0,r.toDate)(t.start,n?.in),+(0,r.toDate)(t.end,n?.in)].sort(((e,t)=>e-t));return n?.inclusive?i<=s&&o<=a:i<s&&o<a};var r=n(4446)},8214:(e,t,n)=>{"use strict";t.clamp=function(e,t,n){const[o,s,l]=(0,r.normalizeDates)(n?.in,e,t.start,t.end);return(0,a.min)([(0,i.max)([o,s],n),l],n)};var r=n(8256),i=n(8873),a=n(4855)},8741:(e,t,n)=>{"use strict";t.closestIndexTo=function(e,t){const n=+(0,r.toDate)(e);if(isNaN(n))return NaN;let i,a;return t.forEach(((e,t)=>{const o=(0,r.toDate)(e);if(isNaN(+o))return i=NaN,void(a=NaN);const s=Math.abs(n-+o);(null==i||s<a)&&(i=t,a=s)})),i};var r=n(4446)},7617:(e,t,n)=>{"use strict";t.closestTo=function(e,t,n){const[o,...s]=(0,r.normalizeDates)(n?.in,e,...t),l=(0,i.closestIndexTo)(o,s);return"number"==typeof l&&isNaN(l)?(0,a.constructFrom)(o,NaN):void 0!==l?s[l]:void 0};var r=n(8256),i=n(8741),a=n(2956)},6789:(e,t,n)=>{"use strict";t.compareAsc=function(e,t){const n=+(0,r.toDate)(e)-+(0,r.toDate)(t);return n<0?-1:n>0?1:n};var r=n(4446)},7777:(e,t,n)=>{"use strict";t.compareDesc=function(e,t){const n=+(0,r.toDate)(e)-+(0,r.toDate)(t);return n>0?-1:n<0?1:n};var r=n(4446)},8052:(e,t)=>{"use strict";t.secondsInYear=t.secondsInWeek=t.secondsInQuarter=t.secondsInMonth=t.secondsInMinute=t.secondsInHour=t.secondsInDay=t.quartersInYear=t.monthsInYear=t.monthsInQuarter=t.minutesInYear=t.minutesInMonth=t.minutesInHour=t.minutesInDay=t.minTime=t.millisecondsInWeek=t.millisecondsInSecond=t.millisecondsInMinute=t.millisecondsInHour=t.millisecondsInDay=t.maxTime=t.daysInYear=t.daysInWeek=t.constructFromSymbol=void 0,t.daysInWeek=7;const n=t.daysInYear=365.2425,r=t.maxTime=24*Math.pow(10,8)*60*60*1e3,i=(t.minTime=-r,t.millisecondsInWeek=6048e5,t.millisecondsInDay=864e5,t.millisecondsInMinute=6e4,t.millisecondsInHour=36e5,t.millisecondsInSecond=1e3,t.minutesInYear=525600,t.minutesInMonth=43200,t.minutesInDay=1440,t.minutesInHour=60,t.monthsInQuarter=3,t.monthsInYear=12,t.quartersInYear=4,t.secondsInHour=3600),a=(t.secondsInMinute=60,t.secondsInDay=24*i),o=(t.secondsInWeek=7*a,t.secondsInYear=a*n),s=t.secondsInMonth=o/12;t.secondsInQuarter=3*s,t.constructFromSymbol=Symbol.for("constructDateFrom")},2956:(e,t,n)=>{"use strict";t.constructFrom=function(e,t){return"function"==typeof e?e(t):e&&"object"==typeof e&&r.constructFromSymbol in e?e[r.constructFromSymbol](t):e instanceof Date?new e.constructor(t):new Date(t)};var r=n(8052)},2700:(e,t,n)=>{"use strict";t.constructNow=function(e){return(0,r.constructFrom)(e,Date.now())};var r=n(2956)},2934:(e,t,n)=>{"use strict";t.daysToWeeks=function(e){const t=Math.trunc(e/r.daysInWeek);return 0===t?0:t};var r=n(8052)},2110:(e,t,n)=>{"use strict";t.differenceInBusinessDays=function(e,t,n){const[c,u]=(0,r.normalizeDates)(n?.in,e,t);if(!(0,s.isValid)(c)||!(0,s.isValid)(u))return NaN;const d=(0,a.differenceInCalendarDays)(c,u),f=d<0?-1:1,h=Math.trunc(d/7);let p=5*h,g=(0,i.addDays)(u,7*h);for(;!(0,o.isSameDay)(c,g);)p+=(0,l.isWeekend)(g,n)?0:f,g=(0,i.addDays)(g,f);return 0===p?0:p};var r=n(8256),i=n(7591),a=n(5506),o=n(9691),s=n(7489),l=n(3348)},5506:(e,t,n)=>{"use strict";t.differenceInCalendarDays=function(e,t,n){const[s,l]=(0,i.normalizeDates)(n?.in,e,t),c=(0,o.startOfDay)(s),u=(0,o.startOfDay)(l),d=+c-(0,r.getTimezoneOffsetInMilliseconds)(c),f=+u-(0,r.getTimezoneOffsetInMilliseconds)(u);return Math.round((d-f)/a.millisecondsInDay)};var r=n(6339),i=n(8256),a=n(8052),o=n(8290)},2480:(e,t,n)=>{"use strict";t.differenceInCalendarISOWeekYears=function(e,t,n){const[a,o]=(0,r.normalizeDates)(n?.in,e,t);return(0,i.getISOWeekYear)(a,n)-(0,i.getISOWeekYear)(o,n)};var r=n(8256),i=n(9957)},8813:(e,t,n)=>{"use strict";t.differenceInCalendarISOWeeks=function(e,t,n){const[s,l]=(0,i.normalizeDates)(n?.in,e,t),c=(0,o.startOfISOWeek)(s),u=(0,o.startOfISOWeek)(l),d=+c-(0,r.getTimezoneOffsetInMilliseconds)(c),f=+u-(0,r.getTimezoneOffsetInMilliseconds)(u);return Math.round((d-f)/a.millisecondsInWeek)};var r=n(6339),i=n(8256),a=n(8052),o=n(6107)},562:(e,t,n)=>{"use strict";t.differenceInCalendarMonths=function(e,t,n){const[i,a]=(0,r.normalizeDates)(n?.in,e,t);return 12*(i.getFullYear()-a.getFullYear())+(i.getMonth()-a.getMonth())};var r=n(8256)},6024:(e,t,n)=>{"use strict";t.differenceInCalendarQuarters=function(e,t,n){const[a,o]=(0,r.normalizeDates)(n?.in,e,t);return 4*(a.getFullYear()-o.getFullYear())+((0,i.getQuarter)(a)-(0,i.getQuarter)(o))};var r=n(8256),i=n(8397)},4746:(e,t,n)=>{"use strict";t.differenceInCalendarWeeks=function(e,t,n){const[s,l]=(0,i.normalizeDates)(n?.in,e,t),c=(0,o.startOfWeek)(s,n),u=(0,o.startOfWeek)(l,n),d=+c-(0,r.getTimezoneOffsetInMilliseconds)(c),f=+u-(0,r.getTimezoneOffsetInMilliseconds)(u);return Math.round((d-f)/a.millisecondsInWeek)};var r=n(6339),i=n(8256),a=n(8052),o=n(5472)},4875:(e,t,n)=>{"use strict";t.differenceInCalendarYears=function(e,t,n){const[i,a]=(0,r.normalizeDates)(n?.in,e,t);return i.getFullYear()-a.getFullYear()};var r=n(8256)},3724:(e,t,n)=>{"use strict";t.differenceInDays=function(e,t,n){const[o,s]=(0,r.normalizeDates)(n?.in,e,t),l=a(o,s),c=Math.abs((0,i.differenceInCalendarDays)(o,s));o.setDate(o.getDate()-l*c);const u=l*(c-Number(a(o,s)===-l));return 0===u?0:u};var r=n(8256),i=n(5506);function a(e,t){const n=e.getFullYear()-t.getFullYear()||e.getMonth()-t.getMonth()||e.getDate()-t.getDate()||e.getHours()-t.getHours()||e.getMinutes()-t.getMinutes()||e.getSeconds()-t.getSeconds()||e.getMilliseconds()-t.getMilliseconds();return n<0?-1:n>0?1:n}},990:(e,t,n)=>{"use strict";t.differenceInHours=function(e,t,n){const[o,s]=(0,i.normalizeDates)(n?.in,e,t),l=(+o-+s)/a.millisecondsInHour;return(0,r.getRoundingMethod)(n?.roundingMethod)(l)};var r=n(1331),i=n(8256),a=n(8052)},4294:(e,t,n)=>{"use strict";t.differenceInISOWeekYears=function(e,t,n){const[s,l]=(0,r.normalizeDates)(n?.in,e,t),c=(0,i.compareAsc)(s,l),u=Math.abs((0,a.differenceInCalendarISOWeekYears)(s,l,n)),d=(0,o.subISOWeekYears)(s,c*u,n),f=c*(u-Number((0,i.compareAsc)(d,l)===-c));return 0===f?0:f};var r=n(8256),i=n(6789),a=n(2480),o=n(6322)},2495:(e,t,n)=>{"use strict";t.differenceInMilliseconds=function(e,t){return+(0,r.toDate)(e)-+(0,r.toDate)(t)};var r=n(4446)},3072:(e,t,n)=>{"use strict";t.differenceInMinutes=function(e,t,n){const o=(0,a.differenceInMilliseconds)(e,t)/i.millisecondsInMinute;return(0,r.getRoundingMethod)(n?.roundingMethod)(o)};var r=n(1331),i=n(8052),a=n(2495)},5460:(e,t,n)=>{"use strict";t.differenceInMonths=function(e,t,n){const[s,l,c]=(0,r.normalizeDates)(n?.in,e,e,t),u=(0,i.compareAsc)(l,c),d=Math.abs((0,a.differenceInCalendarMonths)(l,c));if(d<1)return 0;1===l.getMonth()&&l.getDate()>27&&l.setDate(30),l.setMonth(l.getMonth()-u*d);let f=(0,i.compareAsc)(l,c)===-u;(0,o.isLastDayOfMonth)(s)&&1===d&&1===(0,i.compareAsc)(s,c)&&(f=!1);const h=u*(d-+f);return 0===h?0:h};var r=n(8256),i=n(6789),a=n(562),o=n(920)},5442:(e,t,n)=>{"use strict";t.differenceInQuarters=function(e,t,n){const a=(0,i.differenceInMonths)(e,t,n)/3;return(0,r.getRoundingMethod)(n?.roundingMethod)(a)};var r=n(1331),i=n(5460)},192:(e,t,n)=>{"use strict";t.differenceInSeconds=function(e,t,n){const a=(0,i.differenceInMilliseconds)(e,t)/1e3;return(0,r.getRoundingMethod)(n?.roundingMethod)(a)};var r=n(1331),i=n(2495)},4184:(e,t,n)=>{"use strict";t.differenceInWeeks=function(e,t,n){const a=(0,i.differenceInDays)(e,t,n)/7;return(0,r.getRoundingMethod)(n?.roundingMethod)(a)};var r=n(1331),i=n(3724)},6605:(e,t,n)=>{"use strict";t.differenceInYears=function(e,t,n){const[o,s]=(0,r.normalizeDates)(n?.in,e,t),l=(0,i.compareAsc)(o,s),c=Math.abs((0,a.differenceInCalendarYears)(o,s));o.setFullYear(1584),s.setFullYear(1584);const u=l*(c-+((0,i.compareAsc)(o,s)===-l));return 0===u?0:u};var r=n(8256),i=n(6789),a=n(4875)},3700:(e,t,n)=>{"use strict";t.eachDayOfInterval=function(e,t){const{start:n,end:a}=(0,r.normalizeInterval)(t?.in,e);let o=+n>+a;const s=o?+n:+a,l=o?a:n;l.setHours(0,0,0,0);let c=t?.step??1;if(!c)return[];c<0&&(c=-c,o=!o);const u=[];for(;+l<=s;)u.push((0,i.constructFrom)(n,l)),l.setDate(l.getDate()+c),l.setHours(0,0,0,0);return o?u.reverse():u};var r=n(5909),i=n(2956)},8996:(e,t,n)=>{"use strict";t.eachHourOfInterval=function(e,t){const{start:n,end:a}=(0,r.normalizeInterval)(t?.in,e);let o=+n>+a;const s=o?+n:+a,l=o?a:n;l.setMinutes(0,0,0);let c=t?.step??1;if(!c)return[];c<0&&(c=-c,o=!o);const u=[];for(;+l<=s;)u.push((0,i.constructFrom)(n,l)),l.setHours(l.getHours()+c);return o?u.reverse():u};var r=n(5909),i=n(2956)},666:(e,t,n)=>{"use strict";t.eachMinuteOfInterval=function(e,t){const{start:n,end:o}=(0,r.normalizeInterval)(t?.in,e);n.setSeconds(0,0);let s=+n>+o;const l=s?+n:+o;let c=s?o:n,u=t?.step??1;if(!u)return[];u<0&&(u=-u,s=!s);const d=[];for(;+c<=l;)d.push((0,a.constructFrom)(n,c)),c=(0,i.addMinutes)(c,u);return s?d.reverse():d};var r=n(5909),i=n(3937),a=n(2956)},5824:(e,t,n)=>{"use strict";t.eachMonthOfInterval=function(e,t){const{start:n,end:a}=(0,r.normalizeInterval)(t?.in,e);let o=+n>+a;const s=o?+n:+a,l=o?a:n;l.setHours(0,0,0,0),l.setDate(1);let c=t?.step??1;if(!c)return[];c<0&&(c=-c,o=!o);const u=[];for(;+l<=s;)u.push((0,i.constructFrom)(n,l)),l.setMonth(l.getMonth()+c);return o?u.reverse():u};var r=n(5909),i=n(2956)},7838:(e,t,n)=>{"use strict";t.eachQuarterOfInterval=function(e,t){const{start:n,end:s}=(0,r.normalizeInterval)(t?.in,e);let l=+n>+s;const c=l?+(0,o.startOfQuarter)(n):+(0,o.startOfQuarter)(s);let u=l?(0,o.startOfQuarter)(s):(0,o.startOfQuarter)(n),d=t?.step??1;if(!d)return[];d<0&&(d=-d,l=!l);const f=[];for(;+u<=c;)f.push((0,a.constructFrom)(n,u)),u=(0,i.addQuarters)(u,d);return l?f.reverse():f};var r=n(5909),i=n(1149),a=n(2956),o=n(6944)},3298:(e,t,n)=>{"use strict";t.eachWeekOfInterval=function(e,t){const{start:n,end:s}=(0,r.normalizeInterval)(t?.in,e);let l=+n>+s;const c=l?(0,o.startOfWeek)(s,t):(0,o.startOfWeek)(n,t),u=l?(0,o.startOfWeek)(n,t):(0,o.startOfWeek)(s,t);c.setHours(15),u.setHours(15);const d=+u.getTime();let f=c,h=t?.step??1;if(!h)return[];h<0&&(h=-h,l=!l);const p=[];for(;+f<=d;)f.setHours(0),p.push((0,a.constructFrom)(n,f)),f=(0,i.addWeeks)(f,h),f.setHours(15);return l?p.reverse():p};var r=n(5909),i=n(4073),a=n(2956),o=n(5472)},9305:(e,t,n)=>{"use strict";t.eachWeekendOfInterval=function(e,t){const{start:n,end:s}=(0,r.normalizeInterval)(t?.in,e),l=(0,a.eachDayOfInterval)({start:n,end:s},t),c=[];let u=0;for(;u<l.length;){const e=l[u++];(0,o.isWeekend)(e)&&c.push((0,i.constructFrom)(n,e))}return c};var r=n(5909),i=n(2956),a=n(3700),o=n(3348)},5456:(e,t,n)=>{"use strict";t.eachWeekendOfMonth=function(e,t){const n=(0,a.startOfMonth)(e,t),o=(0,i.endOfMonth)(e,t);return(0,r.eachWeekendOfInterval)({start:n,end:o},t)};var r=n(9305),i=n(1291),a=n(7710)},1441:(e,t,n)=>{"use strict";t.eachWeekendOfYear=function(e,t){const n=(0,a.startOfYear)(e,t),o=(0,i.endOfYear)(e,t);return(0,r.eachWeekendOfInterval)({start:n,end:o},t)};var r=n(9305),i=n(7624),a=n(775)},6245:(e,t,n)=>{"use strict";t.eachYearOfInterval=function(e,t){const{start:n,end:a}=(0,r.normalizeInterval)(t?.in,e);let o=+n>+a;const s=o?+n:+a,l=o?a:n;l.setHours(0,0,0,0),l.setMonth(0,1);let c=t?.step??1;if(!c)return[];c<0&&(c=-c,o=!o);const u=[];for(;+l<=s;)u.push((0,i.constructFrom)(n,l)),l.setFullYear(l.getFullYear()+c);return o?u.reverse():u};var r=n(5909),i=n(2956)},1883:(e,t,n)=>{"use strict";t.endOfDay=function(e,t){const n=(0,r.toDate)(e,t?.in);return n.setHours(23,59,59,999),n};var r=n(4446)},6903:(e,t,n)=>{"use strict";t.endOfDecade=function(e,t){const n=(0,r.toDate)(e,t?.in),i=n.getFullYear(),a=9+10*Math.floor(i/10);return n.setFullYear(a,11,31),n.setHours(23,59,59,999),n};var r=n(4446)},5881:(e,t,n)=>{"use strict";t.endOfHour=function(e,t){const n=(0,r.toDate)(e,t?.in);return n.setMinutes(59,59,999),n};var r=n(4446)},4650:(e,t,n)=>{"use strict";t.endOfISOWeek=function(e,t){return(0,r.endOfWeek)(e,{...t,weekStartsOn:1})};var r=n(1587)},4729:(e,t,n)=>{"use strict";t.endOfISOWeekYear=function(e,t){const n=(0,i.getISOWeekYear)(e,t),o=(0,r.constructFrom)(t?.in||e,0);o.setFullYear(n+1,0,4),o.setHours(0,0,0,0);const s=(0,a.startOfISOWeek)(o,t);return s.setMilliseconds(s.getMilliseconds()-1),s};var r=n(2956),i=n(9957),a=n(6107)},3999:(e,t,n)=>{"use strict";t.endOfMinute=function(e,t){const n=(0,r.toDate)(e,t?.in);return n.setSeconds(59,999),n};var r=n(4446)},1291:(e,t,n)=>{"use strict";t.endOfMonth=function(e,t){const n=(0,r.toDate)(e,t?.in),i=n.getMonth();return n.setFullYear(n.getFullYear(),i+1,0),n.setHours(23,59,59,999),n};var r=n(4446)},5265:(e,t,n)=>{"use strict";t.endOfQuarter=function(e,t){const n=(0,r.toDate)(e,t?.in),i=n.getMonth(),a=i-i%3+3;return n.setMonth(a,0),n.setHours(23,59,59,999),n};var r=n(4446)},9883:(e,t,n)=>{"use strict";t.endOfSecond=function(e,t){const n=(0,r.toDate)(e,t?.in);return n.setMilliseconds(999),n};var r=n(4446)},2366:(e,t,n)=>{"use strict";t.endOfToday=function(e){return(0,r.endOfDay)(Date.now(),e)};var r=n(1883)},1574:(e,t,n)=>{"use strict";t.endOfTomorrow=function(e){const t=(0,r.constructNow)(e?.in),n=t.getFullYear(),i=t.getMonth(),a=t.getDate(),o=(0,r.constructNow)(e?.in);return o.setFullYear(n,i,a+1),o.setHours(23,59,59,999),e?.in?e.in(o):o};var r=n(2700)},1587:(e,t,n)=>{"use strict";t.endOfWeek=function(e,t){const n=(0,r.getDefaultOptions)(),a=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,o=(0,i.toDate)(e,t?.in),s=o.getDay(),l=6+(s<a?-7:0)-(s-a);return o.setDate(o.getDate()+l),o.setHours(23,59,59,999),o};var r=n(6755),i=n(4446)},7624:(e,t,n)=>{"use strict";t.endOfYear=function(e,t){const n=(0,r.toDate)(e,t?.in),i=n.getFullYear();return n.setFullYear(i+1,0,0),n.setHours(23,59,59,999),n};var r=n(4446)},6601:(e,t,n)=>{"use strict";t.endOfYesterday=function(e){const t=(0,i.constructNow)(e?.in),n=(0,r.constructFrom)(e?.in,0);return n.setFullYear(t.getFullYear(),t.getMonth(),t.getDate()-1),n.setHours(23,59,59,999),n};var r=n(2956),i=n(2700)},9460:(e,t,n)=>{"use strict";t.format=t.formatDate=function(e,t,n){const f=(0,i.getDefaultOptions)(),h=n?.locale??f.locale??r.defaultLocale,m=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??f.firstWeekContainsDate??f.locale?.options?.firstWeekContainsDate??1,b=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??f.weekStartsOn??f.locale?.options?.weekStartsOn??0,y=(0,c.toDate)(e,n?.in);if(!(0,l.isValid)(y))throw new RangeError("Invalid time value");let v=t.match(d).map((e=>{const t=e[0];return"p"===t||"P"===t?(0,o.longFormatters[t])(e,h.formatLong):e})).join("").match(u).map((e=>{if("''"===e)return{isToken:!1,value:"'"};const t=e[0];if("'"===t)return{isToken:!1,value:g(e)};if(a.formatters[t])return{isToken:!0,value:e};if(t.match(p))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return{isToken:!1,value:e}}));h.localize.preprocessor&&(v=h.localize.preprocessor(y,v));const x={firstWeekContainsDate:m,weekStartsOn:b,locale:h};return v.map((r=>{if(!r.isToken)return r.value;const i=r.value;return(!n?.useAdditionalWeekYearTokens&&(0,s.isProtectedWeekYearToken)(i)||!n?.useAdditionalDayOfYearTokens&&(0,s.isProtectedDayOfYearToken)(i))&&(0,s.warnOrThrowProtectedError)(i,t,String(e)),(0,a.formatters[i[0]])(y,i,h.localize,x)})).join("")},Object.defineProperty(t,"formatters",{enumerable:!0,get:function(){return a.formatters}}),Object.defineProperty(t,"longFormatters",{enumerable:!0,get:function(){return o.longFormatters}});var r=n(9577),i=n(6755),a=n(3525),o=n(7083),s=n(2364),l=n(7489),c=n(4446);const u=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,d=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,f=/^'([^]*?)'?$/,h=/''/g,p=/[a-zA-Z]/;function g(e){const t=e.match(f);return t?t[1].replace(h,"'"):e}},671:(e,t,n)=>{"use strict";t.formatDistance=function(e,t,n){const d=(0,i.getDefaultOptions)(),f=n?.locale??d.locale??r.defaultLocale,h=(0,s.compareAsc)(e,t);if(isNaN(h))throw new RangeError("Invalid time value");const p=Object.assign({},n,{addSuffix:n?.addSuffix,comparison:h}),[g,m]=(0,o.normalizeDates)(n?.in,...h>0?[t,e]:[e,t]),b=(0,u.differenceInSeconds)(m,g),y=((0,a.getTimezoneOffsetInMilliseconds)(m)-(0,a.getTimezoneOffsetInMilliseconds)(g))/1e3,v=Math.round((b-y)/60);let x;if(v<2)return n?.includeSeconds?b<5?f.formatDistance("lessThanXSeconds",5,p):b<10?f.formatDistance("lessThanXSeconds",10,p):b<20?f.formatDistance("lessThanXSeconds",20,p):b<40?f.formatDistance("halfAMinute",0,p):b<60?f.formatDistance("lessThanXMinutes",1,p):f.formatDistance("xMinutes",1,p):0===v?f.formatDistance("lessThanXMinutes",1,p):f.formatDistance("xMinutes",v,p);if(v<45)return f.formatDistance("xMinutes",v,p);if(v<90)return f.formatDistance("aboutXHours",1,p);if(v<l.minutesInDay){const e=Math.round(v/60);return f.formatDistance("aboutXHours",e,p)}if(v<2520)return f.formatDistance("xDays",1,p);if(v<l.minutesInMonth){const e=Math.round(v/l.minutesInDay);return f.formatDistance("xDays",e,p)}if(v<2*l.minutesInMonth)return x=Math.round(v/l.minutesInMonth),f.formatDistance("aboutXMonths",x,p);if(x=(0,c.differenceInMonths)(m,g),x<12){const e=Math.round(v/l.minutesInMonth);return f.formatDistance("xMonths",e,p)}{const e=x%12,t=Math.trunc(x/12);return e<3?f.formatDistance("aboutXYears",t,p):e<9?f.formatDistance("overXYears",t,p):f.formatDistance("almostXYears",t+1,p)}};var r=n(9577),i=n(6755),a=n(6339),o=n(8256),s=n(6789),l=n(8052),c=n(5460),u=n(192)},5206:(e,t,n)=>{"use strict";t.formatDistanceStrict=function(e,t,n){const u=(0,i.getDefaultOptions)(),d=n?.locale??u.locale??r.defaultLocale,f=(0,l.compareAsc)(e,t);if(isNaN(f))throw new RangeError("Invalid time value");const h=Object.assign({},n,{addSuffix:n?.addSuffix,comparison:f}),[p,g]=(0,s.normalizeDates)(n?.in,...f>0?[t,e]:[e,t]),m=(0,a.getRoundingMethod)(n?.roundingMethod??"round"),b=g.getTime()-p.getTime(),y=b/c.millisecondsInMinute,v=(b-((0,o.getTimezoneOffsetInMilliseconds)(g)-(0,o.getTimezoneOffsetInMilliseconds)(p)))/c.millisecondsInMinute,x=n?.unit;let w;if(w=x||(y<1?"second":y<60?"minute":y<c.minutesInDay?"hour":v<c.minutesInMonth?"day":v<c.minutesInYear?"month":"year"),"second"===w){const e=m(b/1e3);return d.formatDistance("xSeconds",e,h)}if("minute"===w){const e=m(y);return d.formatDistance("xMinutes",e,h)}if("hour"===w){const e=m(y/60);return d.formatDistance("xHours",e,h)}if("day"===w){const e=m(v/c.minutesInDay);return d.formatDistance("xDays",e,h)}if("month"===w){const e=m(v/c.minutesInMonth);return 12===e&&"month"!==x?d.formatDistance("xYears",1,h):d.formatDistance("xMonths",e,h)}{const e=m(v/c.minutesInYear);return d.formatDistance("xYears",e,h)}};var r=n(9577),i=n(6755),a=n(1331),o=n(6339),s=n(8256),l=n(6789),c=n(8052)},4950:(e,t,n)=>{"use strict";t.formatDistanceToNow=function(e,t){return(0,i.formatDistance)(e,(0,r.constructNow)(e),t)};var r=n(2700),i=n(671)},977:(e,t,n)=>{"use strict";t.formatDistanceToNowStrict=function(e,t){return(0,i.formatDistanceStrict)(e,(0,r.constructNow)(e),t)};var r=n(2700),i=n(5206)},3772:(e,t,n)=>{"use strict";t.formatDuration=function(e,t){const n=(0,i.getDefaultOptions)(),o=t?.locale??n.locale??r.defaultLocale,s=t?.format??a,l=t?.zero??!1,c=t?.delimiter??" ";return o.formatDistance?s.reduce(((t,n)=>{const r=`x${n.replace(/(^.)/,(e=>e.toUpperCase()))}`,i=e[n];return void 0!==i&&(l||e[n])?t.concat(o.formatDistance(r,i)):t}),[]).join(c):""};var r=n(9577),i=n(6755);const a=["years","months","weeks","days","hours","minutes","seconds"]},6179:(e,t,n)=>{"use strict";t.formatISO=function(e,t){const n=(0,i.toDate)(e,t?.in);if(isNaN(+n))throw new RangeError("Invalid time value");const a=t?.format??"extended",o=t?.representation??"complete";let s="",l="";const c="extended"===a?"-":"",u="extended"===a?":":"";if("time"!==o){const e=(0,r.addLeadingZeros)(n.getDate(),2),t=(0,r.addLeadingZeros)(n.getMonth()+1,2);s=`${(0,r.addLeadingZeros)(n.getFullYear(),4)}${c}${t}${c}${e}`}if("date"!==o){const e=n.getTimezoneOffset();if(0!==e){const t=Math.abs(e);l=`${e<0?"+":"-"}${(0,r.addLeadingZeros)(Math.trunc(t/60),2)}:${(0,r.addLeadingZeros)(t%60,2)}`}else l="Z";s=`${s}${""===s?"":"T"}${[(0,r.addLeadingZeros)(n.getHours(),2),(0,r.addLeadingZeros)(n.getMinutes(),2),(0,r.addLeadingZeros)(n.getSeconds(),2)].join(u)}${l}`}return s};var r=n(2554),i=n(4446)},9792:(e,t,n)=>{"use strict";t.formatISO9075=function(e,t){const n=(0,a.toDate)(e,t?.in);if(!(0,i.isValid)(n))throw new RangeError("Invalid time value");const o=t?.format??"extended",s=t?.representation??"complete";let l="";const c="extended"===o?"-":"",u="extended"===o?":":"";if("time"!==s){const e=(0,r.addLeadingZeros)(n.getDate(),2),t=(0,r.addLeadingZeros)(n.getMonth()+1,2);l=`${(0,r.addLeadingZeros)(n.getFullYear(),4)}${c}${t}${c}${e}`}return"date"!==s&&(l=`${l}${""===l?"":" "}${(0,r.addLeadingZeros)(n.getHours(),2)}${u}${(0,r.addLeadingZeros)(n.getMinutes(),2)}${u}${(0,r.addLeadingZeros)(n.getSeconds(),2)}`),l};var r=n(2554),i=n(7489),a=n(4446)},2067:(e,t)=>{"use strict";t.formatISODuration=function(e){const{years:t=0,months:n=0,days:r=0,hours:i=0,minutes:a=0,seconds:o=0}=e;return`P${t}Y${n}M${r}DT${i}H${a}M${o}S`}},5449:(e,t,n)=>{"use strict";t.formatRFC3339=function(e,t){const n=(0,a.toDate)(e,t?.in);if(!(0,i.isValid)(n))throw new RangeError("Invalid time value");const o=t?.fractionDigits??0,s=(0,r.addLeadingZeros)(n.getDate(),2),l=(0,r.addLeadingZeros)(n.getMonth()+1,2),c=n.getFullYear(),u=(0,r.addLeadingZeros)(n.getHours(),2),d=(0,r.addLeadingZeros)(n.getMinutes(),2),f=(0,r.addLeadingZeros)(n.getSeconds(),2);let h="";if(o>0){const e=n.getMilliseconds(),t=Math.trunc(e*Math.pow(10,o-3));h="."+(0,r.addLeadingZeros)(t,o)}let p="";const g=n.getTimezoneOffset();if(0!==g){const e=Math.abs(g);p=`${g<0?"+":"-"}${(0,r.addLeadingZeros)(Math.trunc(e/60),2)}:${(0,r.addLeadingZeros)(e%60,2)}`}else p="Z";return`${c}-${l}-${s}T${u}:${d}:${f}${h}${p}`};var r=n(2554),i=n(7489),a=n(4446)},2764:(e,t,n)=>{"use strict";t.formatRFC7231=function(e){const t=(0,a.toDate)(e);if(!(0,i.isValid)(t))throw new RangeError("Invalid time value");return`${o[t.getUTCDay()]}, ${(0,r.addLeadingZeros)(t.getUTCDate(),2)} ${s[t.getUTCMonth()]} ${t.getUTCFullYear()} ${(0,r.addLeadingZeros)(t.getUTCHours(),2)}:${(0,r.addLeadingZeros)(t.getUTCMinutes(),2)}:${(0,r.addLeadingZeros)(t.getUTCSeconds(),2)} GMT`};var r=n(2554),i=n(7489),a=n(4446);const o=["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],s=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]},2292:(e,t,n)=>{"use strict";t.formatRelative=function(e,t,n){const[l,c]=(0,a.normalizeDates)(n?.in,e,t),u=(0,i.getDefaultOptions)(),d=n?.locale??u.locale??r.defaultLocale,f=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??u.weekStartsOn??u.locale?.options?.weekStartsOn??0,h=(0,o.differenceInCalendarDays)(l,c);if(isNaN(h))throw new RangeError("Invalid time value");let p;p=h<-6?"other":h<-1?"lastWeek":h<0?"yesterday":h<1?"today":h<2?"tomorrow":h<7?"nextWeek":"other";const g=d.formatRelative(p,l,c,{locale:d,weekStartsOn:f});return(0,s.format)(l,g,{locale:d,weekStartsOn:f})};var r=n(9577),i=n(6755),a=n(8256),o=n(5506),s=n(9460)},6808:(e,t,n)=>{"use strict";t.fromUnixTime=function(e,t){return(0,r.toDate)(1e3*e,t?.in)};var r=n(4446)},819:(e,t,n)=>{"use strict";t.getDate=function(e,t){return(0,r.toDate)(e,t?.in).getDate()};var r=n(4446)},1591:(e,t,n)=>{"use strict";t.getDay=function(e,t){return(0,r.toDate)(e,t?.in).getDay()};var r=n(4446)},659:(e,t,n)=>{"use strict";t.getDayOfYear=function(e,t){const n=(0,a.toDate)(e,t?.in);return(0,r.differenceInCalendarDays)(n,(0,i.startOfYear)(n))+1};var r=n(5506),i=n(775),a=n(4446)},2575:(e,t,n)=>{"use strict";t.getDaysInMonth=function(e,t){const n=(0,i.toDate)(e,t?.in),a=n.getFullYear(),o=n.getMonth(),s=(0,r.constructFrom)(n,0);return s.setFullYear(a,o+1,0),s.setHours(0,0,0,0),s.getDate()};var r=n(2956),i=n(4446)},2396:(e,t,n)=>{"use strict";t.getDaysInYear=function(e,t){const n=(0,i.toDate)(e,t?.in);return Number.isNaN(+n)?NaN:(0,r.isLeapYear)(n)?366:365};var r=n(3364),i=n(4446)},2963:(e,t,n)=>{"use strict";t.getDecade=function(e,t){const n=(0,r.toDate)(e,t?.in).getFullYear();return 10*Math.floor(n/10)};var r=n(4446)},6032:(e,t,n)=>{"use strict";t.getDefaultOptions=function(){return Object.assign({},(0,r.getDefaultOptions)())};var r=n(6755)},9732:(e,t,n)=>{"use strict";t.getHours=function(e,t){return(0,r.toDate)(e,t?.in).getHours()};var r=n(4446)},8284:(e,t,n)=>{"use strict";t.getISODay=function(e,t){const n=(0,r.toDate)(e,t?.in).getDay();return 0===n?7:n};var r=n(4446)},8926:(e,t,n)=>{"use strict";t.getISOWeek=function(e,t){const n=(0,o.toDate)(e,t?.in),s=+(0,i.startOfISOWeek)(n)-+(0,a.startOfISOWeekYear)(n);return Math.round(s/r.millisecondsInWeek)+1};var r=n(8052),i=n(6107),a=n(1152),o=n(4446)},9957:(e,t,n)=>{"use strict";t.getISOWeekYear=function(e,t){const n=(0,a.toDate)(e,t?.in),o=n.getFullYear(),s=(0,r.constructFrom)(n,0);s.setFullYear(o+1,0,4),s.setHours(0,0,0,0);const l=(0,i.startOfISOWeek)(s),c=(0,r.constructFrom)(n,0);c.setFullYear(o,0,4),c.setHours(0,0,0,0);const u=(0,i.startOfISOWeek)(c);return n.getTime()>=l.getTime()?o+1:n.getTime()>=u.getTime()?o:o-1};var r=n(2956),i=n(6107),a=n(4446)},8595:(e,t,n)=>{"use strict";t.getISOWeeksInYear=function(e,t){const n=(0,a.startOfISOWeekYear)(e,t),o=+(0,a.startOfISOWeekYear)((0,r.addWeeks)(n,60))-+n;return Math.round(o/i.millisecondsInWeek)};var r=n(4073),i=n(8052),a=n(1152)},7633:(e,t,n)=>{"use strict";t.getMilliseconds=function(e){return(0,r.toDate)(e).getMilliseconds()};var r=n(4446)},6234:(e,t,n)=>{"use strict";t.getMinutes=function(e,t){return(0,r.toDate)(e,t?.in).getMinutes()};var r=n(4446)},7519:(e,t,n)=>{"use strict";t.getMonth=function(e,t){return(0,r.toDate)(e,t?.in).getMonth()};var r=n(4446)},6482:(e,t,n)=>{"use strict";t.getOverlappingDaysInIntervals=function(e,t){const[n,o]=[+(0,a.toDate)(e.start),+(0,a.toDate)(e.end)].sort(((e,t)=>e-t)),[s,l]=[+(0,a.toDate)(t.start),+(0,a.toDate)(t.end)].sort(((e,t)=>e-t));if(!(n<l&&s<o))return 0;const c=s<n?n:s,u=c-(0,r.getTimezoneOffsetInMilliseconds)(c),d=l>o?o:l,f=d-(0,r.getTimezoneOffsetInMilliseconds)(d);return Math.ceil((f-u)/i.millisecondsInDay)};var r=n(6339),i=n(8052),a=n(4446)},8397:(e,t,n)=>{"use strict";t.getQuarter=function(e,t){const n=(0,r.toDate)(e,t?.in);return Math.trunc(n.getMonth()/3)+1};var r=n(4446)},1462:(e,t,n)=>{"use strict";t.getSeconds=function(e){return(0,r.toDate)(e).getSeconds()};var r=n(4446)},7044:(e,t,n)=>{"use strict";t.getTime=function(e){return+(0,r.toDate)(e)};var r=n(4446)},9318:(e,t,n)=>{"use strict";t.getUnixTime=function(e){return Math.trunc(+(0,r.toDate)(e)/1e3)};var r=n(4446)},9639:(e,t,n)=>{"use strict";t.getWeek=function(e,t){const n=(0,o.toDate)(e,t?.in),s=+(0,i.startOfWeek)(n,t)-+(0,a.startOfWeekYear)(n,t);return Math.round(s/r.millisecondsInWeek)+1};var r=n(8052),i=n(5472),a=n(3040),o=n(4446)},970:(e,t,n)=>{"use strict";t.getWeekOfMonth=function(e,t){const n=(0,r.getDefaultOptions)(),l=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,c=(0,i.getDate)((0,s.toDate)(e,t?.in));if(isNaN(c))return NaN;let u=l-(0,a.getDay)((0,o.startOfMonth)(e,t));u<=0&&(u+=7);const d=c-u;return Math.ceil(d/7)+1};var r=n(6755),i=n(819),a=n(1591),o=n(7710),s=n(4446)},6708:(e,t,n)=>{"use strict";t.getWeekYear=function(e,t){const n=(0,o.toDate)(e,t?.in),s=n.getFullYear(),l=(0,r.getDefaultOptions)(),c=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??l.firstWeekContainsDate??l.locale?.options?.firstWeekContainsDate??1,u=(0,i.constructFrom)(t?.in||e,0);u.setFullYear(s+1,0,c),u.setHours(0,0,0,0);const d=(0,a.startOfWeek)(u,t),f=(0,i.constructFrom)(t?.in||e,0);f.setFullYear(s,0,c),f.setHours(0,0,0,0);const h=(0,a.startOfWeek)(f,t);return+n>=+d?s+1:+n>=+h?s:s-1};var r=n(6755),i=n(2956),a=n(5472),o=n(4446)},6159:(e,t,n)=>{"use strict";t.getWeeksInMonth=function(e,t){const n=(0,o.toDate)(e,t?.in);return(0,r.differenceInCalendarWeeks)((0,i.lastDayOfMonth)(n,t),(0,a.startOfMonth)(n,t),t)+1};var r=n(4746),i=n(9404),a=n(7710),o=n(4446)},8684:(e,t,n)=>{"use strict";t.getYear=function(e,t){return(0,r.toDate)(e,t?.in).getFullYear()};var r=n(4446)},8563:(e,t,n)=>{"use strict";t.hoursToMilliseconds=function(e){return Math.trunc(e*r.millisecondsInHour)};var r=n(8052)},5676:(e,t,n)=>{"use strict";t.hoursToMinutes=function(e){return Math.trunc(e*r.minutesInHour)};var r=n(8052)},4180:(e,t,n)=>{"use strict";t.hoursToSeconds=function(e){return Math.trunc(e*r.secondsInHour)};var r=n(8052)},411:(e,t,n)=>{"use strict";var r=n(7626);Object.keys(r).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===r[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}}))}));var i=n(9941);Object.keys(i).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===i[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return i[e]}}))}));var a=n(7591);Object.keys(a).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===a[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return a[e]}}))}));var o=n(9463);Object.keys(o).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===o[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return o[e]}}))}));var s=n(2945);Object.keys(s).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===s[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return s[e]}}))}));var l=n(4280);Object.keys(l).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===l[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return l[e]}}))}));var c=n(3937);Object.keys(c).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===c[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return c[e]}}))}));var u=n(6379);Object.keys(u).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===u[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return u[e]}}))}));var d=n(1149);Object.keys(d).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===d[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return d[e]}}))}));var f=n(6689);Object.keys(f).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===f[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return f[e]}}))}));var h=n(4073);Object.keys(h).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===h[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return h[e]}}))}));var p=n(1440);Object.keys(p).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===p[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return p[e]}}))}));var g=n(4674);Object.keys(g).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===g[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return g[e]}}))}));var m=n(8214);Object.keys(m).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===m[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return m[e]}}))}));var b=n(8741);Object.keys(b).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===b[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return b[e]}}))}));var y=n(7617);Object.keys(y).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===y[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return y[e]}}))}));var v=n(6789);Object.keys(v).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===v[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return v[e]}}))}));var x=n(7777);Object.keys(x).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===x[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return x[e]}}))}));var w=n(2956);Object.keys(w).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===w[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return w[e]}}))}));var A=n(2700);Object.keys(A).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===A[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return A[e]}}))}));var _=n(2934);Object.keys(_).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===_[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return _[e]}}))}));var k=n(2110);Object.keys(k).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===k[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return k[e]}}))}));var E=n(5506);Object.keys(E).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===E[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return E[e]}}))}));var M=n(2480);Object.keys(M).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===M[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return M[e]}}))}));var O=n(8813);Object.keys(O).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===O[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return O[e]}}))}));var C=n(562);Object.keys(C).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===C[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return C[e]}}))}));var S=n(6024);Object.keys(S).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===S[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return S[e]}}))}));var P=n(4746);Object.keys(P).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===P[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return P[e]}}))}));var D=n(4875);Object.keys(D).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===D[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return D[e]}}))}));var j=n(3724);Object.keys(j).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===j[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return j[e]}}))}));var T=n(990);Object.keys(T).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===T[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return T[e]}}))}));var B=n(4294);Object.keys(B).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===B[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return B[e]}}))}));var N=n(2495);Object.keys(N).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===N[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return N[e]}}))}));var I=n(3072);Object.keys(I).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===I[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return I[e]}}))}));var L=n(5460);Object.keys(L).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===L[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return L[e]}}))}));var z=n(5442);Object.keys(z).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===z[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return z[e]}}))}));var F=n(192);Object.keys(F).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===F[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return F[e]}}))}));var R=n(4184);Object.keys(R).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===R[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return R[e]}}))}));var W=n(6605);Object.keys(W).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===W[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return W[e]}}))}));var H=n(3700);Object.keys(H).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===H[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return H[e]}}))}));var Y=n(8996);Object.keys(Y).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Y[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Y[e]}}))}));var V=n(666);Object.keys(V).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===V[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return V[e]}}))}));var U=n(5824);Object.keys(U).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===U[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return U[e]}}))}));var $=n(7838);Object.keys($).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===$[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return $[e]}}))}));var q=n(3298);Object.keys(q).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===q[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return q[e]}}))}));var Q=n(9305);Object.keys(Q).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Q[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Q[e]}}))}));var Z=n(5456);Object.keys(Z).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Z[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Z[e]}}))}));var X=n(1441);Object.keys(X).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===X[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return X[e]}}))}));var G=n(6245);Object.keys(G).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===G[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return G[e]}}))}));var K=n(1883);Object.keys(K).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===K[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return K[e]}}))}));var J=n(6903);Object.keys(J).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===J[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return J[e]}}))}));var ee=n(5881);Object.keys(ee).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ee[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ee[e]}}))}));var te=n(4650);Object.keys(te).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===te[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return te[e]}}))}));var ne=n(4729);Object.keys(ne).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ne[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ne[e]}}))}));var re=n(3999);Object.keys(re).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===re[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return re[e]}}))}));var ie=n(1291);Object.keys(ie).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ie[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ie[e]}}))}));var ae=n(5265);Object.keys(ae).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ae[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ae[e]}}))}));var oe=n(9883);Object.keys(oe).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===oe[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return oe[e]}}))}));var se=n(2366);Object.keys(se).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===se[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return se[e]}}))}));var le=n(1574);Object.keys(le).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===le[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return le[e]}}))}));var ce=n(1587);Object.keys(ce).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ce[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ce[e]}}))}));var ue=n(7624);Object.keys(ue).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ue[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ue[e]}}))}));var de=n(6601);Object.keys(de).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===de[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return de[e]}}))}));var fe=n(9460);Object.keys(fe).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===fe[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return fe[e]}}))}));var he=n(671);Object.keys(he).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===he[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return he[e]}}))}));var pe=n(5206);Object.keys(pe).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===pe[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return pe[e]}}))}));var ge=n(4950);Object.keys(ge).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ge[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ge[e]}}))}));var me=n(977);Object.keys(me).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===me[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return me[e]}}))}));var be=n(3772);Object.keys(be).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===be[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return be[e]}}))}));var ye=n(6179);Object.keys(ye).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ye[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ye[e]}}))}));var ve=n(9792);Object.keys(ve).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ve[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ve[e]}}))}));var xe=n(2067);Object.keys(xe).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===xe[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return xe[e]}}))}));var we=n(5449);Object.keys(we).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===we[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return we[e]}}))}));var Ae=n(2764);Object.keys(Ae).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ae[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ae[e]}}))}));var _e=n(2292);Object.keys(_e).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===_e[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return _e[e]}}))}));var ke=n(6808);Object.keys(ke).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ke[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ke[e]}}))}));var Ee=n(819);Object.keys(Ee).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ee[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ee[e]}}))}));var Me=n(1591);Object.keys(Me).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Me[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Me[e]}}))}));var Oe=n(659);Object.keys(Oe).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Oe[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Oe[e]}}))}));var Ce=n(2575);Object.keys(Ce).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ce[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ce[e]}}))}));var Se=n(2396);Object.keys(Se).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Se[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Se[e]}}))}));var Pe=n(2963);Object.keys(Pe).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Pe[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Pe[e]}}))}));var De=n(6032);Object.keys(De).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===De[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return De[e]}}))}));var je=n(9732);Object.keys(je).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===je[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return je[e]}}))}));var Te=n(8284);Object.keys(Te).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Te[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Te[e]}}))}));var Be=n(8926);Object.keys(Be).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Be[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Be[e]}}))}));var Ne=n(9957);Object.keys(Ne).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ne[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ne[e]}}))}));var Ie=n(8595);Object.keys(Ie).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ie[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ie[e]}}))}));var Le=n(7633);Object.keys(Le).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Le[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Le[e]}}))}));var ze=n(6234);Object.keys(ze).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ze[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ze[e]}}))}));var Fe=n(7519);Object.keys(Fe).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Fe[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Fe[e]}}))}));var Re=n(6482);Object.keys(Re).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Re[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Re[e]}}))}));var We=n(8397);Object.keys(We).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===We[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return We[e]}}))}));var He=n(1462);Object.keys(He).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===He[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return He[e]}}))}));var Ye=n(7044);Object.keys(Ye).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ye[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ye[e]}}))}));var Ve=n(9318);Object.keys(Ve).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ve[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ve[e]}}))}));var Ue=n(9639);Object.keys(Ue).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ue[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ue[e]}}))}));var $e=n(970);Object.keys($e).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===$e[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return $e[e]}}))}));var qe=n(6708);Object.keys(qe).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===qe[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return qe[e]}}))}));var Qe=n(6159);Object.keys(Qe).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Qe[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Qe[e]}}))}));var Ze=n(8684);Object.keys(Ze).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ze[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ze[e]}}))}));var Xe=n(8563);Object.keys(Xe).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Xe[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Xe[e]}}))}));var Ge=n(5676);Object.keys(Ge).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ge[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ge[e]}}))}));var Ke=n(4180);Object.keys(Ke).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ke[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ke[e]}}))}));var Je=n(4702);Object.keys(Je).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Je[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Je[e]}}))}));var et=n(5609);Object.keys(et).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===et[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return et[e]}}))}));var tt=n(881);Object.keys(tt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===tt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return tt[e]}}))}));var nt=n(324);Object.keys(nt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===nt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return nt[e]}}))}));var rt=n(5677);Object.keys(rt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===rt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return rt[e]}}))}));var it=n(8520);Object.keys(it).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===it[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return it[e]}}))}));var at=n(4337);Object.keys(at).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===at[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return at[e]}}))}));var ot=n(4879);Object.keys(ot).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ot[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ot[e]}}))}));var st=n(4437);Object.keys(st).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===st[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return st[e]}}))}));var lt=n(3804);Object.keys(lt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===lt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return lt[e]}}))}));var ct=n(8164);Object.keys(ct).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ct[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ct[e]}}))}));var ut=n(2488);Object.keys(ut).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ut[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ut[e]}}))}));var dt=n(920);Object.keys(dt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===dt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return dt[e]}}))}));var ft=n(3364);Object.keys(ft).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ft[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ft[e]}}))}));var ht=n(7256);Object.keys(ht).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ht[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ht[e]}}))}));var pt=n(4081);Object.keys(pt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===pt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return pt[e]}}))}));var gt=n(7865);Object.keys(gt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===gt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return gt[e]}}))}));var mt=n(9691);Object.keys(mt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===mt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return mt[e]}}))}));var bt=n(3833);Object.keys(bt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===bt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return bt[e]}}))}));var yt=n(5626);Object.keys(yt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===yt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return yt[e]}}))}));var vt=n(8857);Object.keys(vt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===vt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return vt[e]}}))}));var xt=n(8847);Object.keys(xt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===xt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return xt[e]}}))}));var wt=n(9019);Object.keys(wt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===wt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return wt[e]}}))}));var At=n(9825);Object.keys(At).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===At[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return At[e]}}))}));var _t=n(9435);Object.keys(_t).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===_t[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return _t[e]}}))}));var kt=n(5897);Object.keys(kt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===kt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return kt[e]}}))}));var Et=n(1992);Object.keys(Et).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Et[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Et[e]}}))}));var Mt=n(2056);Object.keys(Mt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Mt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Mt[e]}}))}));var Ot=n(3561);Object.keys(Ot).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ot[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ot[e]}}))}));var Ct=n(6387);Object.keys(Ct).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ct[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ct[e]}}))}));var St=n(1464);Object.keys(St).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===St[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return St[e]}}))}));var Pt=n(7909);Object.keys(Pt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Pt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Pt[e]}}))}));var Dt=n(9105);Object.keys(Dt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Dt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Dt[e]}}))}));var jt=n(2463);Object.keys(jt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===jt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return jt[e]}}))}));var Tt=n(6573);Object.keys(Tt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Tt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Tt[e]}}))}));var Bt=n(701);Object.keys(Bt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Bt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Bt[e]}}))}));var Nt=n(9526);Object.keys(Nt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Nt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Nt[e]}}))}));var It=n(3587);Object.keys(It).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===It[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return It[e]}}))}));var Lt=n(5800);Object.keys(Lt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Lt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Lt[e]}}))}));var zt=n(8032);Object.keys(zt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===zt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return zt[e]}}))}));var Ft=n(3806);Object.keys(Ft).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ft[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ft[e]}}))}));var Rt=n(7489);Object.keys(Rt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Rt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Rt[e]}}))}));var Wt=n(7851);Object.keys(Wt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Wt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Wt[e]}}))}));var Ht=n(3348);Object.keys(Ht).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ht[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ht[e]}}))}));var Yt=n(3972);Object.keys(Yt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Yt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Yt[e]}}))}));var Vt=n(4439);Object.keys(Vt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Vt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Vt[e]}}))}));var Ut=n(106);Object.keys(Ut).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ut[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ut[e]}}))}));var $t=n(6249);Object.keys($t).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===$t[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return $t[e]}}))}));var qt=n(917);Object.keys(qt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===qt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return qt[e]}}))}));var Qt=n(9404);Object.keys(Qt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Qt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Qt[e]}}))}));var Zt=n(630);Object.keys(Zt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Zt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Zt[e]}}))}));var Xt=n(2994);Object.keys(Xt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Xt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Xt[e]}}))}));var Gt=n(2829);Object.keys(Gt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Gt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Gt[e]}}))}));var Kt=n(6686);Object.keys(Kt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Kt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Kt[e]}}))}));var Jt=n(8873);Object.keys(Jt).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Jt[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Jt[e]}}))}));var en=n(3375);Object.keys(en).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===en[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return en[e]}}))}));var tn=n(449);Object.keys(tn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===tn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return tn[e]}}))}));var nn=n(1647);Object.keys(nn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===nn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return nn[e]}}))}));var rn=n(5635);Object.keys(rn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===rn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return rn[e]}}))}));var an=n(4855);Object.keys(an).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===an[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return an[e]}}))}));var on=n(4432);Object.keys(on).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===on[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return on[e]}}))}));var sn=n(5325);Object.keys(sn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===sn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return sn[e]}}))}));var ln=n(3074);Object.keys(ln).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ln[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ln[e]}}))}));var cn=n(6228);Object.keys(cn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===cn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return cn[e]}}))}));var un=n(623);Object.keys(un).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===un[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return un[e]}}))}));var dn=n(64);Object.keys(dn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===dn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return dn[e]}}))}));var fn=n(4251);Object.keys(fn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===fn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return fn[e]}}))}));var hn=n(7374);Object.keys(hn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===hn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return hn[e]}}))}));var pn=n(3859);Object.keys(pn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===pn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return pn[e]}}))}));var gn=n(9322);Object.keys(gn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===gn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return gn[e]}}))}));var mn=n(7724);Object.keys(mn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===mn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return mn[e]}}))}));var bn=n(5083);Object.keys(bn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===bn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return bn[e]}}))}));var yn=n(5610);Object.keys(yn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===yn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return yn[e]}}))}));var vn=n(4266);Object.keys(vn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===vn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return vn[e]}}))}));var xn=n(9757);Object.keys(xn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===xn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return xn[e]}}))}));var wn=n(7144);Object.keys(wn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===wn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return wn[e]}}))}));var An=n(8092);Object.keys(An).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===An[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return An[e]}}))}));var _n=n(5255);Object.keys(_n).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===_n[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return _n[e]}}))}));var kn=n(2650);Object.keys(kn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===kn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return kn[e]}}))}));var En=n(3767);Object.keys(En).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===En[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return En[e]}}))}));var Mn=n(5457);Object.keys(Mn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Mn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Mn[e]}}))}));var On=n(9059);Object.keys(On).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===On[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return On[e]}}))}));var Cn=n(1743);Object.keys(Cn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Cn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Cn[e]}}))}));var Sn=n(9182);Object.keys(Sn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Sn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Sn[e]}}))}));var Pn=n(244);Object.keys(Pn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Pn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Pn[e]}}))}));var Dn=n(9629);Object.keys(Dn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Dn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Dn[e]}}))}));var jn=n(9859);Object.keys(jn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===jn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return jn[e]}}))}));var Tn=n(7957);Object.keys(Tn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Tn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Tn[e]}}))}));var Bn=n(2944);Object.keys(Bn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Bn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Bn[e]}}))}));var Nn=n(4317);Object.keys(Nn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Nn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Nn[e]}}))}));var In=n(4638);Object.keys(In).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===In[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return In[e]}}))}));var Ln=n(3635);Object.keys(Ln).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ln[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ln[e]}}))}));var zn=n(1311);Object.keys(zn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===zn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return zn[e]}}))}));var Fn=n(4395);Object.keys(Fn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Fn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Fn[e]}}))}));var Rn=n(3359);Object.keys(Rn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Rn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Rn[e]}}))}));var Wn=n(2756);Object.keys(Wn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Wn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Wn[e]}}))}));var Hn=n(9520);Object.keys(Hn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Hn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Hn[e]}}))}));var Yn=n(2240);Object.keys(Yn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Yn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Yn[e]}}))}));var Vn=n(3354);Object.keys(Vn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Vn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Vn[e]}}))}));var Un=n(4617);Object.keys(Un).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Un[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Un[e]}}))}));var $n=n(1133);Object.keys($n).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===$n[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return $n[e]}}))}));var qn=n(1982);Object.keys(qn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===qn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return qn[e]}}))}));var Qn=n(7035);Object.keys(Qn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Qn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Qn[e]}}))}));var Zn=n(1201);Object.keys(Zn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Zn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Zn[e]}}))}));var Xn=n(5154);Object.keys(Xn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Xn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Xn[e]}}))}));var Gn=n(1315);Object.keys(Gn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Gn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Gn[e]}}))}));var Kn=n(7816);Object.keys(Kn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Kn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Kn[e]}}))}));var Jn=n(2648);Object.keys(Jn).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Jn[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Jn[e]}}))}));var er=n(8290);Object.keys(er).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===er[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return er[e]}}))}));var tr=n(6660);Object.keys(tr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===tr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return tr[e]}}))}));var nr=n(5262);Object.keys(nr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===nr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return nr[e]}}))}));var rr=n(6107);Object.keys(rr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===rr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return rr[e]}}))}));var ir=n(1152);Object.keys(ir).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ir[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ir[e]}}))}));var ar=n(1804);Object.keys(ar).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ar[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ar[e]}}))}));var or=n(7710);Object.keys(or).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===or[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return or[e]}}))}));var sr=n(6944);Object.keys(sr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===sr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return sr[e]}}))}));var lr=n(6936);Object.keys(lr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===lr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return lr[e]}}))}));var cr=n(3975);Object.keys(cr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===cr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return cr[e]}}))}));var ur=n(3313);Object.keys(ur).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===ur[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return ur[e]}}))}));var dr=n(5472);Object.keys(dr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===dr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return dr[e]}}))}));var fr=n(3040);Object.keys(fr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===fr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return fr[e]}}))}));var hr=n(775);Object.keys(hr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===hr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return hr[e]}}))}));var pr=n(3552);Object.keys(pr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===pr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return pr[e]}}))}));var gr=n(37);Object.keys(gr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===gr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return gr[e]}}))}));var mr=n(3570);Object.keys(mr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===mr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return mr[e]}}))}));var br=n(3224);Object.keys(br).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===br[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return br[e]}}))}));var yr=n(1130);Object.keys(yr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===yr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return yr[e]}}))}));var vr=n(6322);Object.keys(vr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===vr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return vr[e]}}))}));var xr=n(1675);Object.keys(xr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===xr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return xr[e]}}))}));var wr=n(3028);Object.keys(wr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===wr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return wr[e]}}))}));var Ar=n(5112);Object.keys(Ar).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Ar[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Ar[e]}}))}));var _r=n(8542);Object.keys(_r).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===_r[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return _r[e]}}))}));var kr=n(364);Object.keys(kr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===kr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return kr[e]}}))}));var Er=n(220);Object.keys(Er).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Er[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Er[e]}}))}));var Mr=n(8417);Object.keys(Mr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Mr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Mr[e]}}))}));var Or=n(4446);Object.keys(Or).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Or[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Or[e]}}))}));var Cr=n(4082);Object.keys(Cr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Cr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Cr[e]}}))}));var Sr=n(8442);Object.keys(Sr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Sr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Sr[e]}}))}));var Pr=n(5827);Object.keys(Pr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Pr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Pr[e]}}))}));var Dr=n(5807);Object.keys(Dr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===Dr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return Dr[e]}}))}));var jr=n(9049);Object.keys(jr).forEach((function(e){"default"!==e&&"__esModule"!==e&&(e in t&&t[e]===jr[e]||Object.defineProperty(t,e,{enumerable:!0,get:function(){return jr[e]}}))}))},4702:(e,t,n)=>{"use strict";t.interval=function(e,t,n){const[i,a]=(0,r.normalizeDates)(n?.in,e,t);if(isNaN(+i))throw new TypeError("Start date is invalid");if(isNaN(+a))throw new TypeError("End date is invalid");if(n?.assertPositive&&+i>+a)throw new TypeError("End date must be after start date");return{start:i,end:a}};var r=n(8256)},5609:(e,t,n)=>{"use strict";t.intervalToDuration=function(e,t){const{start:n,end:d}=(0,r.normalizeInterval)(t?.in,e),f={},h=(0,u.differenceInYears)(d,n);h&&(f.years=h);const p=(0,i.add)(n,{years:f.years}),g=(0,l.differenceInMonths)(d,p);g&&(f.months=g);const m=(0,i.add)(p,{months:f.months}),b=(0,a.differenceInDays)(d,m);b&&(f.days=b);const y=(0,i.add)(m,{days:f.days}),v=(0,o.differenceInHours)(d,y);v&&(f.hours=v);const x=(0,i.add)(y,{hours:f.hours}),w=(0,s.differenceInMinutes)(d,x);w&&(f.minutes=w);const A=(0,i.add)(x,{minutes:f.minutes}),_=(0,c.differenceInSeconds)(d,A);return _&&(f.seconds=_),f};var r=n(5909),i=n(7626),a=n(3724),o=n(990),s=n(3072),l=n(5460),c=n(192),u=n(6605)},881:(e,t,n)=>{"use strict";t.intlFormat=function(e,t,n){let i;var a;return void 0===(a=t)||"locale"in a?n=t:i=t,new Intl.DateTimeFormat(n?.locale,i).format((0,r.toDate)(e))};var r=n(4446)},324:(e,t,n)=>{"use strict";t.intlFormatDistance=function(e,t,n){let h,p=0;const[g,m]=(0,r.normalizeDates)(n?.in,e,t);if(n?.unit)h=n?.unit,"second"===h?p=(0,f.differenceInSeconds)(g,m):"minute"===h?p=(0,d.differenceInMinutes)(g,m):"hour"===h?p=(0,u.differenceInHours)(g,m):"day"===h?p=(0,a.differenceInCalendarDays)(g,m):"week"===h?p=(0,l.differenceInCalendarWeeks)(g,m):"month"===h?p=(0,o.differenceInCalendarMonths)(g,m):"quarter"===h?p=(0,s.differenceInCalendarQuarters)(g,m):"year"===h&&(p=(0,c.differenceInCalendarYears)(g,m));else{const e=(0,f.differenceInSeconds)(g,m);Math.abs(e)<i.secondsInMinute?(p=(0,f.differenceInSeconds)(g,m),h="second"):Math.abs(e)<i.secondsInHour?(p=(0,d.differenceInMinutes)(g,m),h="minute"):Math.abs(e)<i.secondsInDay&&Math.abs((0,a.differenceInCalendarDays)(g,m))<1?(p=(0,u.differenceInHours)(g,m),h="hour"):Math.abs(e)<i.secondsInWeek&&(p=(0,a.differenceInCalendarDays)(g,m))&&Math.abs(p)<7?h="day":Math.abs(e)<i.secondsInMonth?(p=(0,l.differenceInCalendarWeeks)(g,m),h="week"):Math.abs(e)<i.secondsInQuarter?(p=(0,o.differenceInCalendarMonths)(g,m),h="month"):Math.abs(e)<i.secondsInYear&&(0,s.differenceInCalendarQuarters)(g,m)<4?(p=(0,s.differenceInCalendarQuarters)(g,m),h="quarter"):(p=(0,c.differenceInCalendarYears)(g,m),h="year")}return new Intl.RelativeTimeFormat(n?.locale,{numeric:"auto",...n}).format(p,h)};var r=n(8256),i=n(8052),a=n(5506),o=n(562),s=n(6024),l=n(4746),c=n(4875),u=n(990),d=n(3072),f=n(192)},5677:(e,t,n)=>{"use strict";t.isAfter=function(e,t){return+(0,r.toDate)(e)>+(0,r.toDate)(t)};var r=n(4446)},8520:(e,t,n)=>{"use strict";t.isBefore=function(e,t){return+(0,r.toDate)(e)<+(0,r.toDate)(t)};var r=n(4446)},4337:(e,t)=>{"use strict";t.isDate=function(e){return e instanceof Date||"object"==typeof e&&"[object Date]"===Object.prototype.toString.call(e)}},4879:(e,t,n)=>{"use strict";t.isEqual=function(e,t){return+(0,r.toDate)(e)==+(0,r.toDate)(t)};var r=n(4446)},4437:(e,t)=>{"use strict";t.isExists=function(e,t,n){const r=new Date(e,t,n);return r.getFullYear()===e&&r.getMonth()===t&&r.getDate()===n}},3804:(e,t,n)=>{"use strict";t.isFirstDayOfMonth=function(e,t){return 1===(0,r.toDate)(e,t?.in).getDate()};var r=n(4446)},8164:(e,t,n)=>{"use strict";t.isFriday=function(e,t){return 5===(0,r.toDate)(e,t?.in).getDay()};var r=n(4446)},2488:(e,t,n)=>{"use strict";t.isFuture=function(e){return+(0,r.toDate)(e)>Date.now()};var r=n(4446)},920:(e,t,n)=>{"use strict";t.isLastDayOfMonth=function(e,t){const n=(0,a.toDate)(e,t?.in);return+(0,r.endOfDay)(n,t)==+(0,i.endOfMonth)(n,t)};var r=n(1883),i=n(1291),a=n(4446)},3364:(e,t,n)=>{"use strict";t.isLeapYear=function(e,t){const n=(0,r.toDate)(e,t?.in).getFullYear();return n%400==0||n%4==0&&n%100!=0};var r=n(4446)},7256:(e,t,n)=>{"use strict";t.isMatch=function(e,t,n){return(0,r.isValid)((0,i.parse)(e,t,new Date,n))};var r=n(7489),i=n(4266)},4081:(e,t,n)=>{"use strict";t.isMonday=function(e,t){return 1===(0,r.toDate)(e,t?.in).getDay()};var r=n(4446)},7865:(e,t,n)=>{"use strict";t.isPast=function(e){return+(0,r.toDate)(e)<Date.now()};var r=n(4446)},9691:(e,t,n)=>{"use strict";t.isSameDay=function(e,t,n){const[a,o]=(0,r.normalizeDates)(n?.in,e,t);return+(0,i.startOfDay)(a)==+(0,i.startOfDay)(o)};var r=n(8256),i=n(8290)},3833:(e,t,n)=>{"use strict";t.isSameHour=function(e,t,n){const[a,o]=(0,r.normalizeDates)(n?.in,e,t);return+(0,i.startOfHour)(a)==+(0,i.startOfHour)(o)};var r=n(8256),i=n(5262)},5626:(e,t,n)=>{"use strict";t.isSameISOWeek=function(e,t,n){return(0,r.isSameWeek)(e,t,{...n,weekStartsOn:1})};var r=n(5897)},8857:(e,t,n)=>{"use strict";t.isSameISOWeekYear=function(e,t,n){const[a,o]=(0,i.normalizeDates)(n?.in,e,t);return+(0,r.startOfISOWeekYear)(a)==+(0,r.startOfISOWeekYear)(o)};var r=n(1152),i=n(8256)},8847:(e,t,n)=>{"use strict";t.isSameMinute=function(e,t){return+(0,r.startOfMinute)(e)==+(0,r.startOfMinute)(t)};var r=n(1804)},9019:(e,t,n)=>{"use strict";t.isSameMonth=function(e,t,n){const[i,a]=(0,r.normalizeDates)(n?.in,e,t);return i.getFullYear()===a.getFullYear()&&i.getMonth()===a.getMonth()};var r=n(8256)},9825:(e,t,n)=>{"use strict";t.isSameQuarter=function(e,t,n){const[a,o]=(0,r.normalizeDates)(n?.in,e,t);return+(0,i.startOfQuarter)(a)==+(0,i.startOfQuarter)(o)};var r=n(8256),i=n(6944)},9435:(e,t,n)=>{"use strict";t.isSameSecond=function(e,t){return+(0,r.startOfSecond)(e)==+(0,r.startOfSecond)(t)};var r=n(6936)},5897:(e,t,n)=>{"use strict";t.isSameWeek=function(e,t,n){const[a,o]=(0,r.normalizeDates)(n?.in,e,t);return+(0,i.startOfWeek)(a,n)==+(0,i.startOfWeek)(o,n)};var r=n(8256),i=n(5472)},1992:(e,t,n)=>{"use strict";t.isSameYear=function(e,t,n){const[i,a]=(0,r.normalizeDates)(n?.in,e,t);return i.getFullYear()===a.getFullYear()};var r=n(8256)},2056:(e,t,n)=>{"use strict";t.isSaturday=function(e,t){return 6===(0,r.toDate)(e,t?.in).getDay()};var r=n(4446)},3561:(e,t,n)=>{"use strict";t.isSunday=function(e,t){return 0===(0,r.toDate)(e,t?.in).getDay()};var r=n(4446)},6387:(e,t,n)=>{"use strict";t.isThisHour=function(e,t){return(0,i.isSameHour)((0,a.toDate)(e,t?.in),(0,r.constructNow)(t?.in||e))};var r=n(2700),i=n(3833),a=n(4446)},1464:(e,t,n)=>{"use strict";t.isThisISOWeek=function(e,t){return(0,a.isSameISOWeek)((0,r.constructFrom)(t?.in||e,e),(0,i.constructNow)(t?.in||e))};var r=n(2956),i=n(2700),a=n(5626)},7909:(e,t,n)=>{"use strict";t.isThisMinute=function(e){return(0,i.isSameMinute)(e,(0,r.constructNow)(e))};var r=n(2700),i=n(8847)},9105:(e,t,n)=>{"use strict";t.isThisMonth=function(e,t){return(0,a.isSameMonth)((0,r.constructFrom)(t?.in||e,e),(0,i.constructNow)(t?.in||e))};var r=n(2956),i=n(2700),a=n(9019)},2463:(e,t,n)=>{"use strict";t.isThisQuarter=function(e,t){return(0,a.isSameQuarter)((0,r.constructFrom)(t?.in||e,e),(0,i.constructNow)(t?.in||e))};var r=n(2956),i=n(2700),a=n(9825)},6573:(e,t,n)=>{"use strict";t.isThisSecond=function(e){return(0,i.isSameSecond)(e,(0,r.constructNow)(e))};var r=n(2700),i=n(9435)},701:(e,t,n)=>{"use strict";t.isThisWeek=function(e,t){return(0,a.isSameWeek)((0,r.constructFrom)(t?.in||e,e),(0,i.constructNow)(t?.in||e),t)};var r=n(2956),i=n(2700),a=n(5897)},9526:(e,t,n)=>{"use strict";t.isThisYear=function(e,t){return(0,a.isSameYear)((0,r.constructFrom)(t?.in||e,e),(0,i.constructNow)(t?.in||e))};var r=n(2956),i=n(2700),a=n(1992)},3587:(e,t,n)=>{"use strict";t.isThursday=function(e,t){return 4===(0,r.toDate)(e,t?.in).getDay()};var r=n(4446)},5800:(e,t,n)=>{"use strict";t.isToday=function(e,t){return(0,a.isSameDay)((0,r.constructFrom)(t?.in||e,e),(0,i.constructNow)(t?.in||e))};var r=n(2956),i=n(2700),a=n(9691)},8032:(e,t,n)=>{"use strict";t.isTomorrow=function(e,t){return(0,a.isSameDay)(e,(0,r.addDays)((0,i.constructNow)(t?.in||e),1),t)};var r=n(7591),i=n(2700),a=n(9691)},3806:(e,t,n)=>{"use strict";t.isTuesday=function(e,t){return 2===(0,r.toDate)(e,t?.in).getDay()};var r=n(4446)},7489:(e,t,n)=>{"use strict";t.isValid=function(e){return!(!(0,r.isDate)(e)&&"number"!=typeof e||isNaN(+(0,i.toDate)(e)))};var r=n(4337),i=n(4446)},7851:(e,t,n)=>{"use strict";t.isWednesday=function(e,t){return 3===(0,r.toDate)(e,t?.in).getDay()};var r=n(4446)},3348:(e,t,n)=>{"use strict";t.isWeekend=function(e,t){const n=(0,r.toDate)(e,t?.in).getDay();return 0===n||6===n};var r=n(4446)},3972:(e,t,n)=>{"use strict";t.isWithinInterval=function(e,t,n){const i=+(0,r.toDate)(e,n?.in),[a,o]=[+(0,r.toDate)(t.start,n?.in),+(0,r.toDate)(t.end,n?.in)].sort(((e,t)=>e-t));return i>=a&&i<=o};var r=n(4446)},4439:(e,t,n)=>{"use strict";t.isYesterday=function(e,t){return(0,a.isSameDay)((0,r.constructFrom)(t?.in||e,e),(0,o.subDays)((0,i.constructNow)(t?.in||e),1))};var r=n(2956),i=n(2700),a=n(9691),o=n(3224)},106:(e,t,n)=>{"use strict";t.lastDayOfDecade=function(e,t){const n=(0,r.toDate)(e,t?.in),i=n.getFullYear(),a=9+10*Math.floor(i/10);return n.setFullYear(a+1,0,0),n.setHours(0,0,0,0),(0,r.toDate)(n,t?.in)};var r=n(4446)},6249:(e,t,n)=>{"use strict";t.lastDayOfISOWeek=function(e,t){return(0,r.lastDayOfWeek)(e,{...t,weekStartsOn:1})};var r=n(2994)},917:(e,t,n)=>{"use strict";t.lastDayOfISOWeekYear=function(e,t){const n=(0,i.getISOWeekYear)(e,t),o=(0,r.constructFrom)(t?.in||e,0);o.setFullYear(n+1,0,4),o.setHours(0,0,0,0);const s=(0,a.startOfISOWeek)(o,t);return s.setDate(s.getDate()-1),s};var r=n(2956),i=n(9957),a=n(6107)},9404:(e,t,n)=>{"use strict";t.lastDayOfMonth=function(e,t){const n=(0,r.toDate)(e,t?.in),i=n.getMonth();return n.setFullYear(n.getFullYear(),i+1,0),n.setHours(0,0,0,0),(0,r.toDate)(n,t?.in)};var r=n(4446)},630:(e,t,n)=>{"use strict";t.lastDayOfQuarter=function(e,t){const n=(0,r.toDate)(e,t?.in),i=n.getMonth(),a=i-i%3+3;return n.setMonth(a,0),n.setHours(0,0,0,0),n};var r=n(4446)},2994:(e,t,n)=>{"use strict";t.lastDayOfWeek=function(e,t){const n=(0,r.getDefaultOptions)(),a=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,o=(0,i.toDate)(e,t?.in),s=o.getDay(),l=6+(s<a?-7:0)-(s-a);return o.setHours(0,0,0,0),o.setDate(o.getDate()+l),o};var r=n(6755),i=n(4446)},2829:(e,t,n)=>{"use strict";t.lastDayOfYear=function(e,t){const n=(0,r.toDate)(e,t?.in),i=n.getFullYear();return n.setFullYear(i+1,0,0),n.setHours(0,0,0,0),n};var r=n(4446)},6686:(e,t,n)=>{"use strict";t.lightFormat=function(e,t){const n=(0,a.toDate)(e);if(!(0,i.isValid)(n))throw new RangeError("Invalid time value");const u=t.match(o);return u?u.map((e=>{if("''"===e)return"'";const t=e[0];if("'"===t)return function(e){const t=e.match(s);return t?t[1].replace(l,"'"):e}(e);const i=r.lightFormatters[t];if(i)return i(n,e);if(t.match(c))throw new RangeError("Format string contains an unescaped latin alphabet character `"+t+"`");return e})).join(""):""},Object.defineProperty(t,"lightFormatters",{enumerable:!0,get:function(){return r.lightFormatters}});var r=n(8441),i=n(7489),a=n(4446);const o=/(\w)\1*|''|'(''|[^'])+('|$)|./g,s=/^'([^]*?)'?$/,l=/''/g,c=/[a-zA-Z]/},5624:(e,t)=>{"use strict";t.buildFormatLongFn=function(e){return(t={})=>{const n=t.width?String(t.width):e.defaultWidth;return e.formats[n]||e.formats[e.defaultWidth]}}},5586:(e,t)=>{"use strict";t.buildLocalizeFn=function(e){return(t,n)=>{let r;if("formatting"===(n?.context?String(n.context):"standalone")&&e.formattingValues){const t=e.defaultFormattingWidth||e.defaultWidth,i=n?.width?String(n.width):t;r=e.formattingValues[i]||e.formattingValues[t]}else{const t=e.defaultWidth,i=n?.width?String(n.width):e.defaultWidth;r=e.values[i]||e.values[t]}return r[e.argumentCallback?e.argumentCallback(t):t]}}},9038:(e,t)=>{"use strict";t.buildMatchFn=function(e){return(t,n={})=>{const r=n.width,i=r&&e.matchPatterns[r]||e.matchPatterns[e.defaultMatchWidth],a=t.match(i);if(!a)return null;const o=a[0],s=r&&e.parsePatterns[r]||e.parsePatterns[e.defaultParseWidth],l=Array.isArray(s)?function(e){for(let t=0;t<e.length;t++)if(e[t].test(o))return t}(s):function(e){for(const t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&e[t].test(o))return t}(s);let c;return c=e.valueCallback?e.valueCallback(l):l,c=n.valueCallback?n.valueCallback(c):c,{value:c,rest:t.slice(o.length)}}}},7520:(e,t)=>{"use strict";t.buildMatchPatternFn=function(e){return(t,n={})=>{const r=t.match(e.matchPattern);if(!r)return null;const i=r[0],a=t.match(e.parsePattern);if(!a)return null;let o=e.valueCallback?e.valueCallback(a[0]):a[0];return o=n.valueCallback?n.valueCallback(o):o,{value:o,rest:t.slice(i.length)}}}},1343:(e,t,n)=>{"use strict";t.enUS=void 0;var r=n(2914),i=n(7181),a=n(8483),o=n(2371),s=n(1249);t.enUS={code:"en-US",formatDistance:r.formatDistance,formatLong:i.formatLong,formatRelative:a.formatRelative,localize:o.localize,match:s.match,options:{weekStartsOn:0,firstWeekContainsDate:1}}},2914:(e,t)=>{"use strict";t.formatDistance=void 0;const n={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};t.formatDistance=(e,t,r)=>{let i;const a=n[e];return i="string"==typeof a?a:1===t?a.one:a.other.replace("{{count}}",t.toString()),r?.addSuffix?r.comparison&&r.comparison>0?"in "+i:i+" ago":i}},7181:(e,t,n)=>{"use strict";t.formatLong=void 0;var r=n(5624);t.formatLong={date:(0,r.buildFormatLongFn)({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:(0,r.buildFormatLongFn)({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:(0,r.buildFormatLongFn)({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})}},8483:(e,t)=>{"use strict";t.formatRelative=void 0;const n={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};t.formatRelative=(e,t,r,i)=>n[e]},2371:(e,t,n)=>{"use strict";t.localize=void 0;var r=n(5586);t.localize={ordinalNumber:(e,t)=>{const n=Number(e),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:(0,r.buildLocalizeFn)({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:(0,r.buildLocalizeFn)({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:e=>e-1}),month:(0,r.buildLocalizeFn)({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:(0,r.buildLocalizeFn)({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:(0,r.buildLocalizeFn)({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})}},1249:(e,t,n)=>{"use strict";t.match=void 0;var r=n(9038),i=n(7520);t.match={ordinalNumber:(0,i.buildMatchPatternFn)({matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:e=>parseInt(e,10)}),era:(0,r.buildMatchFn)({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:(0,r.buildMatchFn)({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:e=>e+1}),month:(0,r.buildMatchFn)({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:(0,r.buildMatchFn)({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:(0,r.buildMatchFn)({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})}},8873:(e,t,n)=>{"use strict";t.max=function(e,t){let n,a=t?.in;return e.forEach((e=>{a||"object"!=typeof e||(a=r.constructFrom.bind(null,e));const t=(0,i.toDate)(e,a);(!n||n<t||isNaN(+t))&&(n=t)})),(0,r.constructFrom)(a,n||NaN)};var r=n(2956),i=n(4446)},3375:(e,t,n)=>{"use strict";t.milliseconds=function({years:e,months:t,weeks:n,days:i,hours:a,minutes:o,seconds:s}){let l=0;e&&(l+=e*r.daysInYear),t&&(l+=t*(r.daysInYear/12)),n&&(l+=7*n),i&&(l+=i);let c=24*l*60*60;return a&&(c+=60*a*60),o&&(c+=60*o),s&&(c+=s),Math.trunc(1e3*c)};var r=n(8052)},449:(e,t,n)=>{"use strict";t.millisecondsToHours=function(e){const t=e/r.millisecondsInHour;return Math.trunc(t)};var r=n(8052)},1647:(e,t,n)=>{"use strict";t.millisecondsToMinutes=function(e){const t=e/r.millisecondsInMinute;return Math.trunc(t)};var r=n(8052)},5635:(e,t,n)=>{"use strict";t.millisecondsToSeconds=function(e){const t=e/r.millisecondsInSecond;return Math.trunc(t)};var r=n(8052)},4855:(e,t,n)=>{"use strict";t.min=function(e,t){let n,a=t?.in;return e.forEach((e=>{a||"object"!=typeof e||(a=r.constructFrom.bind(null,e));const t=(0,i.toDate)(e,a);(!n||n>t||isNaN(+t))&&(n=t)})),(0,r.constructFrom)(a,n||NaN)};var r=n(2956),i=n(4446)},4432:(e,t,n)=>{"use strict";t.minutesToHours=function(e){const t=e/r.minutesInHour;return Math.trunc(t)};var r=n(8052)},5325:(e,t,n)=>{"use strict";t.minutesToMilliseconds=function(e){return Math.trunc(e*r.millisecondsInMinute)};var r=n(8052)},3074:(e,t,n)=>{"use strict";t.minutesToSeconds=function(e){return Math.trunc(e*r.secondsInMinute)};var r=n(8052)},6228:(e,t,n)=>{"use strict";t.monthsToQuarters=function(e){const t=e/r.monthsInQuarter;return Math.trunc(t)};var r=n(8052)},623:(e,t,n)=>{"use strict";t.monthsToYears=function(e){const t=e/r.monthsInYear;return Math.trunc(t)};var r=n(8052)},64:(e,t,n)=>{"use strict";t.nextDay=function(e,t,n){let a=t-(0,i.getDay)(e,n);return a<=0&&(a+=7),(0,r.addDays)(e,a,n)};var r=n(7591),i=n(1591)},4251:(e,t,n)=>{"use strict";t.nextFriday=function(e,t){return(0,r.nextDay)(e,5,t)};var r=n(64)},7374:(e,t,n)=>{"use strict";t.nextMonday=function(e,t){return(0,r.nextDay)(e,1,t)};var r=n(64)},3859:(e,t,n)=>{"use strict";t.nextSaturday=function(e,t){return(0,r.nextDay)(e,6,t)};var r=n(64)},9322:(e,t,n)=>{"use strict";t.nextSunday=function(e,t){return(0,r.nextDay)(e,0,t)};var r=n(64)},7724:(e,t,n)=>{"use strict";t.nextThursday=function(e,t){return(0,r.nextDay)(e,4,t)};var r=n(64)},5083:(e,t,n)=>{"use strict";t.nextTuesday=function(e,t){return(0,r.nextDay)(e,2,t)};var r=n(64)},5610:(e,t,n)=>{"use strict";t.nextWednesday=function(e,t){return(0,r.nextDay)(e,3,t)};var r=n(64)},4266:(e,t,n)=>{"use strict";Object.defineProperty(t,"longFormatters",{enumerable:!0,get:function(){return i.longFormatters}}),t.parse=function(e,t,n,b){const y=()=>(0,o.constructFrom)(b?.in||n,NaN),v=(0,s.getDefaultOptions)(),x=b?.locale??v.locale??r.defaultLocale,w=b?.firstWeekContainsDate??b?.locale?.options?.firstWeekContainsDate??v.firstWeekContainsDate??v.locale?.options?.firstWeekContainsDate??1,A=b?.weekStartsOn??b?.locale?.options?.weekStartsOn??v.weekStartsOn??v.locale?.options?.weekStartsOn??0;if(!t)return e?y():(0,l.toDate)(n,b?.in);const _={firstWeekContainsDate:w,weekStartsOn:A,locale:x},k=[new c.DateTimezoneSetter(b?.in,n)],E=t.match(f).map((e=>{const t=e[0];return t in i.longFormatters?(0,i.longFormatters[t])(e,x.formatLong):e})).join("").match(d),M=[];for(let n of E){!b?.useAdditionalWeekYearTokens&&(0,a.isProtectedWeekYearToken)(n)&&(0,a.warnOrThrowProtectedError)(n,t,e),!b?.useAdditionalDayOfYearTokens&&(0,a.isProtectedDayOfYearToken)(n)&&(0,a.warnOrThrowProtectedError)(n,t,e);const r=n[0],i=u.parsers[r];if(i){const{incompatibleTokens:t}=i;if(Array.isArray(t)){const e=M.find((e=>t.includes(e.token)||e.token===r));if(e)throw new RangeError(`The format string mustn't contain \`${e.fullToken}\` and \`${n}\` at the same time`)}else if("*"===i.incompatibleTokens&&M.length>0)throw new RangeError(`The format string mustn't contain \`${n}\` and any other token at the same time`);M.push({token:r,fullToken:n});const a=i.run(e,n,x.match,_);if(!a)return y();k.push(a.setter),e=a.rest}else{if(r.match(m))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");if("''"===n?n="'":"'"===r&&(n=n.match(h)[1].replace(p,"'")),0!==e.indexOf(n))return y();e=e.slice(n.length)}}if(e.length>0&&g.test(e))return y();const O=k.map((e=>e.priority)).sort(((e,t)=>t-e)).filter(((e,t,n)=>n.indexOf(e)===t)).map((e=>k.filter((t=>t.priority===e)).sort(((e,t)=>t.subPriority-e.subPriority)))).map((e=>e[0]));let C=(0,l.toDate)(n,b?.in);if(isNaN(+C))return y();const S={};for(const e of O){if(!e.validate(C,_))return y();const t=e.set(C,S,_);Array.isArray(t)?(C=t[0],Object.assign(S,t[1])):C=t}return C},Object.defineProperty(t,"parsers",{enumerable:!0,get:function(){return u.parsers}});var r=n(9577),i=n(7083),a=n(2364),o=n(2956),s=n(6032),l=n(4446),c=n(7861),u=n(7568);const d=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,f=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,h=/^'([^]*?)'?$/,p=/''/g,g=/\S/,m=/[a-zA-Z]/},5513:(e,t,n)=>{"use strict";t.Parser=void 0;var r=n(7861);t.Parser=class{run(e,t,n,i){const a=this.parse(e,t,n,i);return a?{setter:new r.ValueSetter(a.value,this.validate,this.set,this.priority,this.subPriority),rest:a.rest}:null}validate(e,t,n){return!0}}},7861:(e,t,n)=>{"use strict";t.ValueSetter=t.Setter=t.DateTimezoneSetter=void 0;var r=n(2956),i=n(4082);class a{subPriority=0;validate(e,t){return!0}}t.Setter=a,t.ValueSetter=class extends a{constructor(e,t,n,r,i){super(),this.value=e,this.validateValue=t,this.setValue=n,this.priority=r,i&&(this.subPriority=i)}validate(e,t){return this.validateValue(e,this.value,t)}set(e,t,n){return this.setValue(e,t,this.value,n)}},t.DateTimezoneSetter=class extends a{priority=10;subPriority=-1;constructor(e,t){super(),this.context=e||(e=>(0,r.constructFrom)(t,e))}set(e,t){return t.timestampIsSet?e:(0,r.constructFrom)(e,(0,i.transpose)(e,this.context))}}},7699:(e,t)=>{"use strict";t.timezonePatterns=t.numericPatterns=void 0,t.numericPatterns={month:/^(1[0-2]|0?\d)/,date:/^(3[0-1]|[0-2]?\d)/,dayOfYear:/^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,week:/^(5[0-3]|[0-4]?\d)/,hour23h:/^(2[0-3]|[0-1]?\d)/,hour24h:/^(2[0-4]|[0-1]?\d)/,hour11h:/^(1[0-1]|0?\d)/,hour12h:/^(1[0-2]|0?\d)/,minute:/^[0-5]?\d/,second:/^[0-5]?\d/,singleDigit:/^\d/,twoDigits:/^\d{1,2}/,threeDigits:/^\d{1,3}/,fourDigits:/^\d{1,4}/,anyDigitsSigned:/^-?\d+/,singleDigitSigned:/^-?\d/,twoDigitsSigned:/^-?\d{1,2}/,threeDigitsSigned:/^-?\d{1,3}/,fourDigitsSigned:/^-?\d{1,4}/},t.timezonePatterns={basicOptionalMinutes:/^([+-])(\d{2})(\d{2})?|Z/,basic:/^([+-])(\d{2})(\d{2})|Z/,basicOptionalSeconds:/^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,extended:/^([+-])(\d{2}):(\d{2})|Z/,extendedOptionalSeconds:/^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/}},7568:(e,t,n)=>{"use strict";t.parsers=void 0;var r=n(6862),i=n(1497),a=n(7310),o=n(5304),s=n(8042),l=n(4400),c=n(8259),u=n(9150),d=n(6309),f=n(2577),h=n(5079),p=n(8589),g=n(8490),m=n(7702),b=n(5303),y=n(6638),v=n(7369),x=n(6633),w=n(3653),A=n(6265),_=n(1869),k=n(9612),E=n(2167),M=n(6842),O=n(4042),C=n(5078),S=n(3495),P=n(3306),D=n(5982),j=n(5261),T=n(5942);t.parsers={G:new r.EraParser,y:new i.YearParser,Y:new a.LocalWeekYearParser,R:new o.ISOWeekYearParser,u:new s.ExtendedYearParser,Q:new l.QuarterParser,q:new c.StandAloneQuarterParser,M:new u.MonthParser,L:new d.StandAloneMonthParser,w:new f.LocalWeekParser,I:new h.ISOWeekParser,d:new p.DateParser,D:new g.DayOfYearParser,E:new m.DayParser,e:new b.LocalDayParser,c:new y.StandAloneLocalDayParser,i:new v.ISODayParser,a:new x.AMPMParser,b:new w.AMPMMidnightParser,B:new A.DayPeriodParser,h:new _.Hour1to12Parser,H:new k.Hour0to23Parser,K:new E.Hour0To11Parser,k:new M.Hour1To24Parser,m:new O.MinuteParser,s:new C.SecondParser,S:new S.FractionOfSecondParser,X:new P.ISOTimezoneWithZParser,x:new D.ISOTimezoneParser,t:new j.TimestampSecondsParser,T:new T.TimestampMillisecondsParser}},3653:(e,t,n)=>{"use strict";t.AMPMMidnightParser=void 0;var r=n(5513),i=n(3771);class a extends r.Parser{priority=80;parse(e,t,n){switch(t){case"b":case"bb":case"bbb":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"bbbbb":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}set(e,t,n){return e.setHours((0,i.dayPeriodEnumToHours)(n),0,0,0),e}incompatibleTokens=["a","B","H","k","t","T"]}t.AMPMMidnightParser=a},6633:(e,t,n)=>{"use strict";t.AMPMParser=void 0;var r=n(5513),i=n(3771);class a extends r.Parser{priority=80;parse(e,t,n){switch(t){case"a":case"aa":case"aaa":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"aaaaa":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}set(e,t,n){return e.setHours((0,i.dayPeriodEnumToHours)(n),0,0,0),e}incompatibleTokens=["b","B","H","k","t","T"]}t.AMPMParser=a},8589:(e,t,n)=>{"use strict";t.DateParser=void 0;var r=n(7699),i=n(5513),a=n(3771);const o=[31,28,31,30,31,30,31,31,30,31,30,31],s=[31,29,31,30,31,30,31,31,30,31,30,31];class l extends i.Parser{priority=90;subPriority=1;parse(e,t,n){switch(t){case"d":return(0,a.parseNumericPattern)(r.numericPatterns.date,e);case"do":return n.ordinalNumber(e,{unit:"date"});default:return(0,a.parseNDigits)(t.length,e)}}validate(e,t){const n=e.getFullYear(),r=(0,a.isLeapYearIndex)(n),i=e.getMonth();return r?t>=1&&t<=s[i]:t>=1&&t<=o[i]}set(e,t,n){return e.setDate(n),e.setHours(0,0,0,0),e}incompatibleTokens=["Y","R","q","Q","w","I","D","i","e","c","t","T"]}t.DateParser=l},8490:(e,t,n)=>{"use strict";t.DayOfYearParser=void 0;var r=n(7699),i=n(5513),a=n(3771);class o extends i.Parser{priority=90;subpriority=1;parse(e,t,n){switch(t){case"D":case"DD":return(0,a.parseNumericPattern)(r.numericPatterns.dayOfYear,e);case"Do":return n.ordinalNumber(e,{unit:"date"});default:return(0,a.parseNDigits)(t.length,e)}}validate(e,t){const n=e.getFullYear();return(0,a.isLeapYearIndex)(n)?t>=1&&t<=366:t>=1&&t<=365}set(e,t,n){return e.setMonth(0,n),e.setHours(0,0,0,0),e}incompatibleTokens=["Y","R","q","Q","M","L","w","I","d","E","i","e","c","t","T"]}t.DayOfYearParser=o},7702:(e,t,n)=>{"use strict";t.DayParser=void 0;var r=n(4395),i=n(5513);class a extends i.Parser{priority=90;parse(e,t,n){switch(t){case"E":case"EE":case"EEE":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"EEEEE":return n.day(e,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}}validate(e,t){return t>=0&&t<=6}set(e,t,n,i){return(e=(0,r.setDay)(e,n,i)).setHours(0,0,0,0),e}incompatibleTokens=["D","i","e","c","t","T"]}t.DayParser=a},6265:(e,t,n)=>{"use strict";t.DayPeriodParser=void 0;var r=n(5513),i=n(3771);class a extends r.Parser{priority=80;parse(e,t,n){switch(t){case"B":case"BB":case"BBB":return n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"});case"BBBBB":return n.dayPeriod(e,{width:"narrow",context:"formatting"});default:return n.dayPeriod(e,{width:"wide",context:"formatting"})||n.dayPeriod(e,{width:"abbreviated",context:"formatting"})||n.dayPeriod(e,{width:"narrow",context:"formatting"})}}set(e,t,n){return e.setHours((0,i.dayPeriodEnumToHours)(n),0,0,0),e}incompatibleTokens=["a","b","t","T"]}t.DayPeriodParser=a},6862:(e,t,n)=>{"use strict";t.EraParser=void 0;var r=n(5513);class i extends r.Parser{priority=140;parse(e,t,n){switch(t){case"G":case"GG":case"GGG":return n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"});case"GGGGG":return n.era(e,{width:"narrow"});default:return n.era(e,{width:"wide"})||n.era(e,{width:"abbreviated"})||n.era(e,{width:"narrow"})}}set(e,t,n){return t.era=n,e.setFullYear(n,0,1),e.setHours(0,0,0,0),e}incompatibleTokens=["R","u","t","T"]}t.EraParser=i},8042:(e,t,n)=>{"use strict";t.ExtendedYearParser=void 0;var r=n(5513),i=n(3771);class a extends r.Parser{priority=130;parse(e,t){return"u"===t?(0,i.parseNDigitsSigned)(4,e):(0,i.parseNDigitsSigned)(t.length,e)}set(e,t,n){return e.setFullYear(n,0,1),e.setHours(0,0,0,0),e}incompatibleTokens=["G","y","Y","R","w","I","i","e","c","t","T"]}t.ExtendedYearParser=a},3495:(e,t,n)=>{"use strict";t.FractionOfSecondParser=void 0;var r=n(5513),i=n(3771);class a extends r.Parser{priority=30;parse(e,t){return(0,i.mapValue)((0,i.parseNDigits)(t.length,e),(e=>Math.trunc(e*Math.pow(10,3-t.length))))}set(e,t,n){return e.setMilliseconds(n),e}incompatibleTokens=["t","T"]}t.FractionOfSecondParser=a},2167:(e,t,n)=>{"use strict";t.Hour0To11Parser=void 0;var r=n(7699),i=n(5513),a=n(3771);class o extends i.Parser{priority=70;parse(e,t,n){switch(t){case"K":return(0,a.parseNumericPattern)(r.numericPatterns.hour11h,e);case"Ko":return n.ordinalNumber(e,{unit:"hour"});default:return(0,a.parseNDigits)(t.length,e)}}validate(e,t){return t>=0&&t<=11}set(e,t,n){return e.getHours()>=12&&n<12?e.setHours(n+12,0,0,0):e.setHours(n,0,0,0),e}incompatibleTokens=["h","H","k","t","T"]}t.Hour0To11Parser=o},9612:(e,t,n)=>{"use strict";t.Hour0to23Parser=void 0;var r=n(7699),i=n(5513),a=n(3771);class o extends i.Parser{priority=70;parse(e,t,n){switch(t){case"H":return(0,a.parseNumericPattern)(r.numericPatterns.hour23h,e);case"Ho":return n.ordinalNumber(e,{unit:"hour"});default:return(0,a.parseNDigits)(t.length,e)}}validate(e,t){return t>=0&&t<=23}set(e,t,n){return e.setHours(n,0,0,0),e}incompatibleTokens=["a","b","h","K","k","t","T"]}t.Hour0to23Parser=o},6842:(e,t,n)=>{"use strict";t.Hour1To24Parser=void 0;var r=n(7699),i=n(5513),a=n(3771);class o extends i.Parser{priority=70;parse(e,t,n){switch(t){case"k":return(0,a.parseNumericPattern)(r.numericPatterns.hour24h,e);case"ko":return n.ordinalNumber(e,{unit:"hour"});default:return(0,a.parseNDigits)(t.length,e)}}validate(e,t){return t>=1&&t<=24}set(e,t,n){const r=n<=24?n%24:n;return e.setHours(r,0,0,0),e}incompatibleTokens=["a","b","h","H","K","t","T"]}t.Hour1To24Parser=o},1869:(e,t,n)=>{"use strict";t.Hour1to12Parser=void 0;var r=n(7699),i=n(5513),a=n(3771);class o extends i.Parser{priority=70;parse(e,t,n){switch(t){case"h":return(0,a.parseNumericPattern)(r.numericPatterns.hour12h,e);case"ho":return n.ordinalNumber(e,{unit:"hour"});default:return(0,a.parseNDigits)(t.length,e)}}validate(e,t){return t>=1&&t<=12}set(e,t,n){const r=e.getHours()>=12;return r&&n<12?e.setHours(n+12,0,0,0):r||12!==n?e.setHours(n,0,0,0):e.setHours(0,0,0,0),e}incompatibleTokens=["H","K","k","t","T"]}t.Hour1to12Parser=o},7369:(e,t,n)=>{"use strict";t.ISODayParser=void 0;var r=n(2240),i=n(5513),a=n(3771);class o extends i.Parser{priority=90;parse(e,t,n){const r=e=>0===e?7:e;switch(t){case"i":case"ii":return(0,a.parseNDigits)(t.length,e);case"io":return n.ordinalNumber(e,{unit:"day"});case"iii":return(0,a.mapValue)(n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r);case"iiiii":return(0,a.mapValue)(n.day(e,{width:"narrow",context:"formatting"}),r);case"iiiiii":return(0,a.mapValue)(n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r);default:return(0,a.mapValue)(n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"}),r)}}validate(e,t){return t>=1&&t<=7}set(e,t,n){return(e=(0,r.setISODay)(e,n)).setHours(0,0,0,0),e}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","E","e","c","t","T"]}t.ISODayParser=o},5982:(e,t,n)=>{"use strict";t.ISOTimezoneParser=void 0;var r=n(2956),i=n(6339),a=n(7699),o=n(5513),s=n(3771);class l extends o.Parser{priority=10;parse(e,t){switch(t){case"x":return(0,s.parseTimezonePattern)(a.timezonePatterns.basicOptionalMinutes,e);case"xx":return(0,s.parseTimezonePattern)(a.timezonePatterns.basic,e);case"xxxx":return(0,s.parseTimezonePattern)(a.timezonePatterns.basicOptionalSeconds,e);case"xxxxx":return(0,s.parseTimezonePattern)(a.timezonePatterns.extendedOptionalSeconds,e);default:return(0,s.parseTimezonePattern)(a.timezonePatterns.extended,e)}}set(e,t,n){return t.timestampIsSet?e:(0,r.constructFrom)(e,e.getTime()-(0,i.getTimezoneOffsetInMilliseconds)(e)-n)}incompatibleTokens=["t","T","X"]}t.ISOTimezoneParser=l},3306:(e,t,n)=>{"use strict";t.ISOTimezoneWithZParser=void 0;var r=n(2956),i=n(6339),a=n(7699),o=n(5513),s=n(3771);class l extends o.Parser{priority=10;parse(e,t){switch(t){case"X":return(0,s.parseTimezonePattern)(a.timezonePatterns.basicOptionalMinutes,e);case"XX":return(0,s.parseTimezonePattern)(a.timezonePatterns.basic,e);case"XXXX":return(0,s.parseTimezonePattern)(a.timezonePatterns.basicOptionalSeconds,e);case"XXXXX":return(0,s.parseTimezonePattern)(a.timezonePatterns.extendedOptionalSeconds,e);default:return(0,s.parseTimezonePattern)(a.timezonePatterns.extended,e)}}set(e,t,n){return t.timestampIsSet?e:(0,r.constructFrom)(e,e.getTime()-(0,i.getTimezoneOffsetInMilliseconds)(e)-n)}incompatibleTokens=["t","T","x"]}t.ISOTimezoneWithZParser=l},5079:(e,t,n)=>{"use strict";t.ISOWeekParser=void 0;var r=n(3354),i=n(6107),a=n(7699),o=n(5513),s=n(3771);class l extends o.Parser{priority=100;parse(e,t,n){switch(t){case"I":return(0,s.parseNumericPattern)(a.numericPatterns.week,e);case"Io":return n.ordinalNumber(e,{unit:"week"});default:return(0,s.parseNDigits)(t.length,e)}}validate(e,t){return t>=1&&t<=53}set(e,t,n){return(0,i.startOfISOWeek)((0,r.setISOWeek)(e,n))}incompatibleTokens=["y","Y","u","q","Q","M","L","w","d","D","e","c","t","T"]}t.ISOWeekParser=l},5304:(e,t,n)=>{"use strict";t.ISOWeekYearParser=void 0;var r=n(6107),i=n(2956),a=n(5513),o=n(3771);class s extends a.Parser{priority=130;parse(e,t){return"R"===t?(0,o.parseNDigitsSigned)(4,e):(0,o.parseNDigitsSigned)(t.length,e)}set(e,t,n){const a=(0,i.constructFrom)(e,0);return a.setFullYear(n,0,4),a.setHours(0,0,0,0),(0,r.startOfISOWeek)(a)}incompatibleTokens=["G","y","Y","u","Q","q","M","L","w","d","D","e","c","t","T"]}t.ISOWeekYearParser=s},5303:(e,t,n)=>{"use strict";t.LocalDayParser=void 0;var r=n(4395),i=n(5513),a=n(3771);class o extends i.Parser{priority=90;parse(e,t,n,r){const i=e=>{const t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"e":case"ee":return(0,a.mapValue)((0,a.parseNDigits)(t.length,e),i);case"eo":return(0,a.mapValue)(n.ordinalNumber(e,{unit:"day"}),i);case"eee":return n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});case"eeeee":return n.day(e,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"});default:return n.day(e,{width:"wide",context:"formatting"})||n.day(e,{width:"abbreviated",context:"formatting"})||n.day(e,{width:"short",context:"formatting"})||n.day(e,{width:"narrow",context:"formatting"})}}validate(e,t){return t>=0&&t<=6}set(e,t,n,i){return(e=(0,r.setDay)(e,n,i)).setHours(0,0,0,0),e}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","c","t","T"]}t.LocalDayParser=o},2577:(e,t,n)=>{"use strict";t.LocalWeekParser=void 0;var r=n(1315),i=n(5472),a=n(7699),o=n(5513),s=n(3771);class l extends o.Parser{priority=100;parse(e,t,n){switch(t){case"w":return(0,s.parseNumericPattern)(a.numericPatterns.week,e);case"wo":return n.ordinalNumber(e,{unit:"week"});default:return(0,s.parseNDigits)(t.length,e)}}validate(e,t){return t>=1&&t<=53}set(e,t,n,a){return(0,i.startOfWeek)((0,r.setWeek)(e,n,a),a)}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","i","t","T"]}t.LocalWeekParser=l},7310:(e,t,n)=>{"use strict";t.LocalWeekYearParser=void 0;var r=n(6708),i=n(5472),a=n(5513),o=n(3771);class s extends a.Parser{priority=130;parse(e,t,n){const r=e=>({year:e,isTwoDigitYear:"YY"===t});switch(t){case"Y":return(0,o.mapValue)((0,o.parseNDigits)(4,e),r);case"Yo":return(0,o.mapValue)(n.ordinalNumber(e,{unit:"year"}),r);default:return(0,o.mapValue)((0,o.parseNDigits)(t.length,e),r)}}validate(e,t){return t.isTwoDigitYear||t.year>0}set(e,t,n,a){const s=(0,r.getWeekYear)(e,a);if(n.isTwoDigitYear){const t=(0,o.normalizeTwoDigitYear)(n.year,s);return e.setFullYear(t,0,a.firstWeekContainsDate),e.setHours(0,0,0,0),(0,i.startOfWeek)(e,a)}const l="era"in t&&1!==t.era?1-n.year:n.year;return e.setFullYear(l,0,a.firstWeekContainsDate),e.setHours(0,0,0,0),(0,i.startOfWeek)(e,a)}incompatibleTokens=["y","R","u","Q","q","M","L","I","d","D","i","t","T"]}t.LocalWeekYearParser=s},4042:(e,t,n)=>{"use strict";t.MinuteParser=void 0;var r=n(7699),i=n(5513),a=n(3771);class o extends i.Parser{priority=60;parse(e,t,n){switch(t){case"m":return(0,a.parseNumericPattern)(r.numericPatterns.minute,e);case"mo":return n.ordinalNumber(e,{unit:"minute"});default:return(0,a.parseNDigits)(t.length,e)}}validate(e,t){return t>=0&&t<=59}set(e,t,n){return e.setMinutes(n,0,0),e}incompatibleTokens=["t","T"]}t.MinuteParser=o},9150:(e,t,n)=>{"use strict";t.MonthParser=void 0;var r=n(7699),i=n(5513),a=n(3771);class o extends i.Parser{incompatibleTokens=["Y","R","q","Q","L","w","I","D","i","e","c","t","T"];priority=110;parse(e,t,n){const i=e=>e-1;switch(t){case"M":return(0,a.mapValue)((0,a.parseNumericPattern)(r.numericPatterns.month,e),i);case"MM":return(0,a.mapValue)((0,a.parseNDigits)(2,e),i);case"Mo":return(0,a.mapValue)(n.ordinalNumber(e,{unit:"month"}),i);case"MMM":return n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"});case"MMMMM":return n.month(e,{width:"narrow",context:"formatting"});default:return n.month(e,{width:"wide",context:"formatting"})||n.month(e,{width:"abbreviated",context:"formatting"})||n.month(e,{width:"narrow",context:"formatting"})}}validate(e,t){return t>=0&&t<=11}set(e,t,n){return e.setMonth(n,1),e.setHours(0,0,0,0),e}}t.MonthParser=o},4400:(e,t,n)=>{"use strict";t.QuarterParser=void 0;var r=n(5513),i=n(3771);class a extends r.Parser{priority=120;parse(e,t,n){switch(t){case"Q":case"QQ":return(0,i.parseNDigits)(t.length,e);case"Qo":return n.ordinalNumber(e,{unit:"quarter"});case"QQQ":return n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"});case"QQQQQ":return n.quarter(e,{width:"narrow",context:"formatting"});default:return n.quarter(e,{width:"wide",context:"formatting"})||n.quarter(e,{width:"abbreviated",context:"formatting"})||n.quarter(e,{width:"narrow",context:"formatting"})}}validate(e,t){return t>=1&&t<=4}set(e,t,n){return e.setMonth(3*(n-1),1),e.setHours(0,0,0,0),e}incompatibleTokens=["Y","R","q","M","L","w","I","d","D","i","e","c","t","T"]}t.QuarterParser=a},5078:(e,t,n)=>{"use strict";t.SecondParser=void 0;var r=n(7699),i=n(5513),a=n(3771);class o extends i.Parser{priority=50;parse(e,t,n){switch(t){case"s":return(0,a.parseNumericPattern)(r.numericPatterns.second,e);case"so":return n.ordinalNumber(e,{unit:"second"});default:return(0,a.parseNDigits)(t.length,e)}}validate(e,t){return t>=0&&t<=59}set(e,t,n){return e.setSeconds(n,0),e}incompatibleTokens=["t","T"]}t.SecondParser=o},6638:(e,t,n)=>{"use strict";t.StandAloneLocalDayParser=void 0;var r=n(4395),i=n(5513),a=n(3771);class o extends i.Parser{priority=90;parse(e,t,n,r){const i=e=>{const t=7*Math.floor((e-1)/7);return(e+r.weekStartsOn+6)%7+t};switch(t){case"c":case"cc":return(0,a.mapValue)((0,a.parseNDigits)(t.length,e),i);case"co":return(0,a.mapValue)(n.ordinalNumber(e,{unit:"day"}),i);case"ccc":return n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});case"ccccc":return n.day(e,{width:"narrow",context:"standalone"});case"cccccc":return n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"});default:return n.day(e,{width:"wide",context:"standalone"})||n.day(e,{width:"abbreviated",context:"standalone"})||n.day(e,{width:"short",context:"standalone"})||n.day(e,{width:"narrow",context:"standalone"})}}validate(e,t){return t>=0&&t<=6}set(e,t,n,i){return(e=(0,r.setDay)(e,n,i)).setHours(0,0,0,0),e}incompatibleTokens=["y","R","u","q","Q","M","L","I","d","D","E","i","e","t","T"]}t.StandAloneLocalDayParser=o},6309:(e,t,n)=>{"use strict";t.StandAloneMonthParser=void 0;var r=n(7699),i=n(5513),a=n(3771);class o extends i.Parser{priority=110;parse(e,t,n){const i=e=>e-1;switch(t){case"L":return(0,a.mapValue)((0,a.parseNumericPattern)(r.numericPatterns.month,e),i);case"LL":return(0,a.mapValue)((0,a.parseNDigits)(2,e),i);case"Lo":return(0,a.mapValue)(n.ordinalNumber(e,{unit:"month"}),i);case"LLL":return n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"});case"LLLLL":return n.month(e,{width:"narrow",context:"standalone"});default:return n.month(e,{width:"wide",context:"standalone"})||n.month(e,{width:"abbreviated",context:"standalone"})||n.month(e,{width:"narrow",context:"standalone"})}}validate(e,t){return t>=0&&t<=11}set(e,t,n){return e.setMonth(n,1),e.setHours(0,0,0,0),e}incompatibleTokens=["Y","R","q","Q","M","w","I","D","i","e","c","t","T"]}t.StandAloneMonthParser=o},8259:(e,t,n)=>{"use strict";t.StandAloneQuarterParser=void 0;var r=n(5513),i=n(3771);class a extends r.Parser{priority=120;parse(e,t,n){switch(t){case"q":case"qq":return(0,i.parseNDigits)(t.length,e);case"qo":return n.ordinalNumber(e,{unit:"quarter"});case"qqq":return n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"});case"qqqqq":return n.quarter(e,{width:"narrow",context:"standalone"});default:return n.quarter(e,{width:"wide",context:"standalone"})||n.quarter(e,{width:"abbreviated",context:"standalone"})||n.quarter(e,{width:"narrow",context:"standalone"})}}validate(e,t){return t>=1&&t<=4}set(e,t,n){return e.setMonth(3*(n-1),1),e.setHours(0,0,0,0),e}incompatibleTokens=["Y","R","Q","M","L","w","I","d","D","i","e","c","t","T"]}t.StandAloneQuarterParser=a},5942:(e,t,n)=>{"use strict";t.TimestampMillisecondsParser=void 0;var r=n(2956),i=n(5513),a=n(3771);class o extends i.Parser{priority=20;parse(e){return(0,a.parseAnyDigitsSigned)(e)}set(e,t,n){return[(0,r.constructFrom)(e,n),{timestampIsSet:!0}]}incompatibleTokens="*"}t.TimestampMillisecondsParser=o},5261:(e,t,n)=>{"use strict";t.TimestampSecondsParser=void 0;var r=n(2956),i=n(5513),a=n(3771);class o extends i.Parser{priority=40;parse(e){return(0,a.parseAnyDigitsSigned)(e)}set(e,t,n){return[(0,r.constructFrom)(e,1e3*n),{timestampIsSet:!0}]}incompatibleTokens="*"}t.TimestampSecondsParser=o},1497:(e,t,n)=>{"use strict";t.YearParser=void 0;var r=n(5513),i=n(3771);class a extends r.Parser{priority=130;incompatibleTokens=["Y","R","u","w","I","i","e","c","t","T"];parse(e,t,n){const r=e=>({year:e,isTwoDigitYear:"yy"===t});switch(t){case"y":return(0,i.mapValue)((0,i.parseNDigits)(4,e),r);case"yo":return(0,i.mapValue)(n.ordinalNumber(e,{unit:"year"}),r);default:return(0,i.mapValue)((0,i.parseNDigits)(t.length,e),r)}}validate(e,t){return t.isTwoDigitYear||t.year>0}set(e,t,n){const r=e.getFullYear();if(n.isTwoDigitYear){const t=(0,i.normalizeTwoDigitYear)(n.year,r);return e.setFullYear(t,0,1),e.setHours(0,0,0,0),e}const a="era"in t&&1!==t.era?1-n.year:n.year;return e.setFullYear(a,0,1),e.setHours(0,0,0,0),e}}t.YearParser=a},3771:(e,t,n)=>{"use strict";t.dayPeriodEnumToHours=function(e){switch(e){case"morning":return 4;case"evening":return 17;case"pm":case"noon":case"afternoon":return 12;default:return 0}},t.isLeapYearIndex=function(e){return e%400==0||e%4==0&&e%100!=0},t.mapValue=function(e,t){return e?{value:t(e.value),rest:e.rest}:e},t.normalizeTwoDigitYear=function(e,t){const n=t>0,r=n?t:1-t;let i;if(r<=50)i=e||100;else{const t=r+50;i=e+100*Math.trunc(t/100)-(e>=t%100?100:0)}return n?i:1-i},t.parseAnyDigitsSigned=function(e){return a(i.numericPatterns.anyDigitsSigned,e)},t.parseNDigits=function(e,t){switch(e){case 1:return a(i.numericPatterns.singleDigit,t);case 2:return a(i.numericPatterns.twoDigits,t);case 3:return a(i.numericPatterns.threeDigits,t);case 4:return a(i.numericPatterns.fourDigits,t);default:return a(new RegExp("^\\d{1,"+e+"}"),t)}},t.parseNDigitsSigned=function(e,t){switch(e){case 1:return a(i.numericPatterns.singleDigitSigned,t);case 2:return a(i.numericPatterns.twoDigitsSigned,t);case 3:return a(i.numericPatterns.threeDigitsSigned,t);case 4:return a(i.numericPatterns.fourDigitsSigned,t);default:return a(new RegExp("^-?\\d{1,"+e+"}"),t)}},t.parseNumericPattern=a,t.parseTimezonePattern=function(e,t){const n=t.match(e);if(!n)return null;if("Z"===n[0])return{value:0,rest:t.slice(1)};const i="+"===n[1]?1:-1,a=n[2]?parseInt(n[2],10):0,o=n[3]?parseInt(n[3],10):0,s=n[5]?parseInt(n[5],10):0;return{value:i*(a*r.millisecondsInHour+o*r.millisecondsInMinute+s*r.millisecondsInSecond),rest:t.slice(n[0].length)}};var r=n(8052),i=n(7699);function a(e,t){const n=t.match(e);return n?{value:parseInt(n[0],10),rest:t.slice(n[0].length)}:null}},9757:(e,t,n)=>{"use strict";t.parseISO=function(e,t){const n=()=>(0,i.constructFrom)(t?.in,NaN),p=t?.additionalDigits??2,g=function(e){const t={},n=e.split(o.dateTimeDelimiter);let r;if(n.length>2)return t;if(/:/.test(n[0])?r=n[0]:(t.date=n[0],r=n[1],o.timeZoneDelimiter.test(t.date)&&(t.date=e.split(o.timeZoneDelimiter)[0],r=e.substr(t.date.length,e.length))),r){const e=o.timezone.exec(r);e?(t.time=r.replace(e[1],""),t.timezone=e[1]):t.time=r}return t}(e);let m;if(g.date){const e=function(e,t){const n=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+t)+"})|(\\d{2}|[+-]\\d{"+(2+t)+"})$)"),r=e.match(n);if(!r)return{year:NaN,restDateString:""};const i=r[1]?parseInt(r[1]):null,a=r[2]?parseInt(r[2]):null;return{year:null===a?i:100*a,restDateString:e.slice((r[1]||r[2]).length)}}(g.date,p);m=function(e,t){if(null===t)return new Date(NaN);const n=e.match(s);if(!n)return new Date(NaN);const r=!!n[4],i=u(n[1]),a=u(n[2])-1,o=u(n[3]),l=u(n[4]),c=u(n[5])-1;if(r)return function(e,t,n){return t>=1&&t<=53&&n>=0&&n<=6}(0,l,c)?function(e,t,n){const r=new Date(0);r.setUTCFullYear(e,0,4);const i=7*(t-1)+n+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+i),r}(t,l,c):new Date(NaN);{const e=new Date(0);return function(e,t,n){return t>=0&&t<=11&&n>=1&&n<=(f[t]||(h(e)?29:28))}(t,a,o)&&function(e,t){return t>=1&&t<=(h(e)?366:365)}(t,i)?(e.setUTCFullYear(t,a,Math.max(i,o)),e):new Date(NaN)}}(e.restDateString,e.year)}if(!m||isNaN(+m))return n();const b=+m;let y,v=0;if(g.time&&(v=function(e){const t=e.match(l);if(!t)return NaN;const n=d(t[1]),i=d(t[2]),a=d(t[3]);return function(e,t,n){return 24===e?0===t&&0===n:n>=0&&n<60&&t>=0&&t<60&&e>=0&&e<25}(n,i,a)?n*r.millisecondsInHour+i*r.millisecondsInMinute+1e3*a:NaN}(g.time),isNaN(v)))return n();if(!g.timezone){const e=new Date(b+v),n=(0,a.toDate)(0,t?.in);return n.setFullYear(e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()),n.setHours(e.getUTCHours(),e.getUTCMinutes(),e.getUTCSeconds(),e.getUTCMilliseconds()),n}return y=function(e){if("Z"===e)return 0;const t=e.match(c);if(!t)return 0;const n="+"===t[1]?-1:1,i=parseInt(t[2]),a=t[3]&&parseInt(t[3])||0;return function(e,t){return t>=0&&t<=59}(0,a)?n*(i*r.millisecondsInHour+a*r.millisecondsInMinute):NaN}(g.timezone),isNaN(y)?n():(0,a.toDate)(b+v+y,t?.in)};var r=n(8052),i=n(2956),a=n(4446);const o={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},s=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,l=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,c=/^([+-])(\d{2})(?::?(\d{2}))?$/;function u(e){return e?parseInt(e):1}function d(e){return e&&parseFloat(e.replace(",","."))||0}const f=[31,null,31,30,31,30,31,31,30,31,30,31];function h(e){return e%400==0||e%4==0&&e%100!=0}},7144:(e,t,n)=>{"use strict";t.parseJSON=function(e,t){const n=e.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);return n?(0,r.toDate)(Date.UTC(+n[1],+n[2]-1,+n[3],+n[4]-(+n[9]||0)*("-"==n[8]?-1:1),+n[5]-(+n[10]||0)*("-"==n[8]?-1:1),+n[6],+((n[7]||"0")+"00").substring(0,3)),t?.in):(0,r.toDate)(NaN,t?.in)};var r=n(4446)},8092:(e,t,n)=>{"use strict";t.previousDay=function(e,t,n){let a=(0,r.getDay)(e,n)-t;return a<=0&&(a+=7),(0,i.subDays)(e,a,n)};var r=n(1591),i=n(3224)},5255:(e,t,n)=>{"use strict";t.previousFriday=function(e,t){return(0,r.previousDay)(e,5,t)};var r=n(8092)},2650:(e,t,n)=>{"use strict";t.previousMonday=function(e,t){return(0,r.previousDay)(e,1,t)};var r=n(8092)},3767:(e,t,n)=>{"use strict";t.previousSaturday=function(e,t){return(0,r.previousDay)(e,6,t)};var r=n(8092)},5457:(e,t,n)=>{"use strict";t.previousSunday=function(e,t){return(0,r.previousDay)(e,0,t)};var r=n(8092)},9059:(e,t,n)=>{"use strict";t.previousThursday=function(e,t){return(0,r.previousDay)(e,4,t)};var r=n(8092)},1743:(e,t,n)=>{"use strict";t.previousTuesday=function(e,t){return(0,r.previousDay)(e,2,t)};var r=n(8092)},9182:(e,t,n)=>{"use strict";t.previousWednesday=function(e,t){return(0,r.previousDay)(e,3,t)};var r=n(8092)},244:(e,t,n)=>{"use strict";t.quartersToMonths=function(e){return Math.trunc(e*r.monthsInQuarter)};var r=n(8052)},9629:(e,t,n)=>{"use strict";t.quartersToYears=function(e){const t=e/r.quartersInYear;return Math.trunc(t)};var r=n(8052)},9859:(e,t,n)=>{"use strict";t.roundToNearestHours=function(e,t){const n=t?.nearestTo??1;if(n<1||n>12)return(0,i.constructFrom)(t?.in||e,NaN);const o=(0,a.toDate)(e,t?.in),s=o.getMinutes()/60,l=o.getSeconds()/60/60,c=o.getMilliseconds()/1e3/60/60,u=o.getHours()+s+l+c,d=t?.roundingMethod??"round",f=(0,r.getRoundingMethod)(d)(u/n)*n;return o.setHours(f,0,0,0),o};var r=n(1331),i=n(2956),a=n(4446)},7957:(e,t,n)=>{"use strict";t.roundToNearestMinutes=function(e,t){const n=t?.nearestTo??1;if(n<1||n>30)return(0,i.constructFrom)(e,NaN);const o=(0,a.toDate)(e,t?.in),s=o.getSeconds()/60,l=o.getMilliseconds()/1e3/60,c=o.getMinutes()+s+l,u=t?.roundingMethod??"round",d=(0,r.getRoundingMethod)(u)(c/n)*n;return o.setMinutes(d,0,0),o};var r=n(1331),i=n(2956),a=n(4446)},2944:(e,t,n)=>{"use strict";t.secondsToHours=function(e){const t=e/r.secondsInHour;return Math.trunc(t)};var r=n(8052)},4317:(e,t,n)=>{"use strict";t.secondsToMilliseconds=function(e){return e*r.millisecondsInSecond};var r=n(8052)},4638:(e,t,n)=>{"use strict";t.secondsToMinutes=function(e){const t=e/r.secondsInMinute;return Math.trunc(t)};var r=n(8052)},3635:(e,t,n)=>{"use strict";t.set=function(e,t,n){let o=(0,a.toDate)(e,n?.in);return isNaN(+o)?(0,r.constructFrom)(n?.in||e,NaN):(null!=t.year&&o.setFullYear(t.year),null!=t.month&&(o=(0,i.setMonth)(o,t.month)),null!=t.date&&o.setDate(t.date),null!=t.hours&&o.setHours(t.hours),null!=t.minutes&&o.setMinutes(t.minutes),null!=t.seconds&&o.setSeconds(t.seconds),null!=t.milliseconds&&o.setMilliseconds(t.milliseconds),o)};var r=n(2956),i=n(7035),a=n(4446)},1311:(e,t,n)=>{"use strict";t.setDate=function(e,t,n){const i=(0,r.toDate)(e,n?.in);return i.setDate(t),i};var r=n(4446)},4395:(e,t,n)=>{"use strict";t.setDay=function(e,t,n){const o=(0,r.getDefaultOptions)(),s=n?.weekStartsOn??n?.locale?.options?.weekStartsOn??o.weekStartsOn??o.locale?.options?.weekStartsOn??0,l=(0,a.toDate)(e,n?.in),c=l.getDay(),u=7-s,d=t<0||t>6?t-(c+u)%7:((t%7+7)%7+u)%7-(c+u)%7;return(0,i.addDays)(l,d,n)};var r=n(6755),i=n(7591),a=n(4446)},3359:(e,t,n)=>{"use strict";t.setDayOfYear=function(e,t,n){const i=(0,r.toDate)(e,n?.in);return i.setMonth(0),i.setDate(t),i};var r=n(4446)},2756:(e,t,n)=>{"use strict";t.setDefaultOptions=function(e){const t={},n=(0,r.getDefaultOptions)();for(const e in n)Object.prototype.hasOwnProperty.call(n,e)&&(t[e]=n[e]);for(const n in e)Object.prototype.hasOwnProperty.call(e,n)&&(void 0===e[n]?delete t[n]:t[n]=e[n]);(0,r.setDefaultOptions)(t)};var r=n(6755)},9520:(e,t,n)=>{"use strict";t.setHours=function(e,t,n){const i=(0,r.toDate)(e,n?.in);return i.setHours(t),i};var r=n(4446)},2240:(e,t,n)=>{"use strict";t.setISODay=function(e,t,n){const o=(0,a.toDate)(e,n?.in),s=t-(0,i.getISODay)(o,n);return(0,r.addDays)(o,s,n)};var r=n(7591),i=n(8284),a=n(4446)},3354:(e,t,n)=>{"use strict";t.setISOWeek=function(e,t,n){const a=(0,i.toDate)(e,n?.in),o=(0,r.getISOWeek)(a,n)-t;return a.setDate(a.getDate()-7*o),a};var r=n(8926),i=n(4446)},4617:(e,t,n)=>{"use strict";t.setISOWeekYear=function(e,t,n){let s=(0,o.toDate)(e,n?.in);const l=(0,i.differenceInCalendarDays)(s,(0,a.startOfISOWeekYear)(s,n)),c=(0,r.constructFrom)(n?.in||e,0);return c.setFullYear(t,0,4),c.setHours(0,0,0,0),s=(0,a.startOfISOWeekYear)(c),s.setDate(s.getDate()+l),s};var r=n(2956),i=n(5506),a=n(1152),o=n(4446)},1133:(e,t,n)=>{"use strict";t.setMilliseconds=function(e,t,n){const i=(0,r.toDate)(e,n?.in);return i.setMilliseconds(t),i};var r=n(4446)},1982:(e,t,n)=>{"use strict";t.setMinutes=function(e,t,n){const i=(0,r.toDate)(e,n?.in);return i.setMinutes(t),i};var r=n(4446)},7035:(e,t,n)=>{"use strict";t.setMonth=function(e,t,n){const o=(0,a.toDate)(e,n?.in),s=o.getFullYear(),l=o.getDate(),c=(0,r.constructFrom)(n?.in||e,0);c.setFullYear(s,t,15),c.setHours(0,0,0,0);const u=(0,i.getDaysInMonth)(c);return o.setMonth(t,Math.min(l,u)),o};var r=n(2956),i=n(2575),a=n(4446)},1201:(e,t,n)=>{"use strict";t.setQuarter=function(e,t,n){const a=(0,i.toDate)(e,n?.in),o=t-(Math.trunc(a.getMonth()/3)+1);return(0,r.setMonth)(a,a.getMonth()+3*o)};var r=n(7035),i=n(4446)},5154:(e,t,n)=>{"use strict";t.setSeconds=function(e,t,n){const i=(0,r.toDate)(e,n?.in);return i.setSeconds(t),i};var r=n(4446)},1315:(e,t,n)=>{"use strict";t.setWeek=function(e,t,n){const a=(0,i.toDate)(e,n?.in),o=(0,r.getWeek)(a,n)-t;return a.setDate(a.getDate()-7*o),(0,i.toDate)(a,n?.in)};var r=n(9639),i=n(4446)},7816:(e,t,n)=>{"use strict";t.setWeekYear=function(e,t,n){const l=(0,r.getDefaultOptions)(),c=n?.firstWeekContainsDate??n?.locale?.options?.firstWeekContainsDate??l.firstWeekContainsDate??l.locale?.options?.firstWeekContainsDate??1,u=(0,a.differenceInCalendarDays)((0,s.toDate)(e,n?.in),(0,o.startOfWeekYear)(e,n),n),d=(0,i.constructFrom)(n?.in||e,0);d.setFullYear(t,0,c),d.setHours(0,0,0,0);const f=(0,o.startOfWeekYear)(d,n);return f.setDate(f.getDate()+u),f};var r=n(6755),i=n(2956),a=n(5506),o=n(3040),s=n(4446)},2648:(e,t,n)=>{"use strict";t.setYear=function(e,t,n){const a=(0,i.toDate)(e,n?.in);return isNaN(+a)?(0,r.constructFrom)(n?.in||e,NaN):(a.setFullYear(t),a)};var r=n(2956),i=n(4446)},8290:(e,t,n)=>{"use strict";t.startOfDay=function(e,t){const n=(0,r.toDate)(e,t?.in);return n.setHours(0,0,0,0),n};var r=n(4446)},6660:(e,t,n)=>{"use strict";t.startOfDecade=function(e,t){const n=(0,r.toDate)(e,t?.in),i=n.getFullYear(),a=10*Math.floor(i/10);return n.setFullYear(a,0,1),n.setHours(0,0,0,0),n};var r=n(4446)},5262:(e,t,n)=>{"use strict";t.startOfHour=function(e,t){const n=(0,r.toDate)(e,t?.in);return n.setMinutes(0,0,0),n};var r=n(4446)},6107:(e,t,n)=>{"use strict";t.startOfISOWeek=function(e,t){return(0,r.startOfWeek)(e,{...t,weekStartsOn:1})};var r=n(5472)},1152:(e,t,n)=>{"use strict";t.startOfISOWeekYear=function(e,t){const n=(0,i.getISOWeekYear)(e,t),o=(0,r.constructFrom)(t?.in||e,0);return o.setFullYear(n,0,4),o.setHours(0,0,0,0),(0,a.startOfISOWeek)(o)};var r=n(2956),i=n(9957),a=n(6107)},1804:(e,t,n)=>{"use strict";t.startOfMinute=function(e,t){const n=(0,r.toDate)(e,t?.in);return n.setSeconds(0,0),n};var r=n(4446)},7710:(e,t,n)=>{"use strict";t.startOfMonth=function(e,t){const n=(0,r.toDate)(e,t?.in);return n.setDate(1),n.setHours(0,0,0,0),n};var r=n(4446)},6944:(e,t,n)=>{"use strict";t.startOfQuarter=function(e,t){const n=(0,r.toDate)(e,t?.in),i=n.getMonth(),a=i-i%3;return n.setMonth(a,1),n.setHours(0,0,0,0),n};var r=n(4446)},6936:(e,t,n)=>{"use strict";t.startOfSecond=function(e,t){const n=(0,r.toDate)(e,t?.in);return n.setMilliseconds(0),n};var r=n(4446)},3975:(e,t,n)=>{"use strict";t.startOfToday=function(e){return(0,r.startOfDay)(Date.now(),e)};var r=n(8290)},3313:(e,t,n)=>{"use strict";t.startOfTomorrow=function(e){const t=(0,i.constructNow)(e?.in),n=t.getFullYear(),a=t.getMonth(),o=t.getDate(),s=(0,r.constructFrom)(e?.in,0);return s.setFullYear(n,a,o+1),s.setHours(0,0,0,0),s};var r=n(2956),i=n(2700)},5472:(e,t,n)=>{"use strict";t.startOfWeek=function(e,t){const n=(0,r.getDefaultOptions)(),a=t?.weekStartsOn??t?.locale?.options?.weekStartsOn??n.weekStartsOn??n.locale?.options?.weekStartsOn??0,o=(0,i.toDate)(e,t?.in),s=o.getDay(),l=(s<a?7:0)+s-a;return o.setDate(o.getDate()-l),o.setHours(0,0,0,0),o};var r=n(6755),i=n(4446)},3040:(e,t,n)=>{"use strict";t.startOfWeekYear=function(e,t){const n=(0,r.getDefaultOptions)(),s=t?.firstWeekContainsDate??t?.locale?.options?.firstWeekContainsDate??n.firstWeekContainsDate??n.locale?.options?.firstWeekContainsDate??1,l=(0,a.getWeekYear)(e,t),c=(0,i.constructFrom)(t?.in||e,0);return c.setFullYear(l,0,s),c.setHours(0,0,0,0),(0,o.startOfWeek)(c,t)};var r=n(6755),i=n(2956),a=n(6708),o=n(5472)},775:(e,t,n)=>{"use strict";t.startOfYear=function(e,t){const n=(0,r.toDate)(e,t?.in);return n.setFullYear(n.getFullYear(),0,1),n.setHours(0,0,0,0),n};var r=n(4446)},3552:(e,t,n)=>{"use strict";t.startOfYesterday=function(e){const t=(0,r.constructNow)(e?.in),n=t.getFullYear(),i=t.getMonth(),a=t.getDate(),o=(0,r.constructNow)(e?.in);return o.setFullYear(n,i,a-1),o.setHours(0,0,0,0),o};var r=n(2700)},37:(e,t,n)=>{"use strict";t.sub=function(e,t,n){const{years:o=0,months:s=0,weeks:l=0,days:c=0,hours:u=0,minutes:d=0,seconds:f=0}=t,h=(0,a.subMonths)(e,s+12*o,n),p=(0,i.subDays)(h,c+7*l,n),g=1e3*(f+60*(d+60*u));return(0,r.constructFrom)(n?.in||e,+p-g)};var r=n(2956),i=n(3224),a=n(5112)},3570:(e,t,n)=>{"use strict";t.subBusinessDays=function(e,t,n){return(0,r.addBusinessDays)(e,-t,n)};var r=n(9941)},3224:(e,t,n)=>{"use strict";t.subDays=function(e,t,n){return(0,r.addDays)(e,-t,n)};var r=n(7591)},1130:(e,t,n)=>{"use strict";t.subHours=function(e,t,n){return(0,r.addHours)(e,-t,n)};var r=n(9463)},6322:(e,t,n)=>{"use strict";t.subISOWeekYears=function(e,t,n){return(0,r.addISOWeekYears)(e,-t,n)};var r=n(2945)},1675:(e,t,n)=>{"use strict";t.subMilliseconds=function(e,t,n){return(0,r.addMilliseconds)(e,-t,n)};var r=n(4280)},3028:(e,t,n)=>{"use strict";t.subMinutes=function(e,t,n){return(0,r.addMinutes)(e,-t,n)};var r=n(3937)},5112:(e,t,n)=>{"use strict";t.subMonths=function(e,t,n){return(0,r.addMonths)(e,-t,n)};var r=n(6379)},8542:(e,t,n)=>{"use strict";t.subQuarters=function(e,t,n){return(0,r.addQuarters)(e,-t,n)};var r=n(1149)},364:(e,t,n)=>{"use strict";t.subSeconds=function(e,t,n){return(0,r.addSeconds)(e,-t,n)};var r=n(6689)},220:(e,t,n)=>{"use strict";t.subWeeks=function(e,t,n){return(0,r.addWeeks)(e,-t,n)};var r=n(4073)},8417:(e,t,n)=>{"use strict";t.subYears=function(e,t,n){return(0,r.addYears)(e,-t,n)};var r=n(1440)},4446:(e,t,n)=>{"use strict";t.toDate=function(e,t){return(0,r.constructFrom)(t||e,e)};var r=n(2956)},4082:(e,t,n)=>{"use strict";t.transpose=function(e,t){const n=function(e){return"function"==typeof e&&e.prototype?.constructor===e}(t)?new t(0):(0,r.constructFrom)(t,0);return n.setFullYear(e.getFullYear(),e.getMonth(),e.getDate()),n.setHours(e.getHours(),e.getMinutes(),e.getSeconds(),e.getMilliseconds()),n};var r=n(2956)},8442:(e,t,n)=>{"use strict";t.weeksToDays=function(e){return Math.trunc(e*r.daysInWeek)};var r=n(8052)},5827:(e,t,n)=>{"use strict";t.yearsToDays=function(e){return Math.trunc(e*r.daysInYear)};var r=n(8052)},5807:(e,t,n)=>{"use strict";t.yearsToMonths=function(e){return Math.trunc(e*r.monthsInYear)};var r=n(8052)},9049:(e,t,n)=>{"use strict";t.yearsToQuarters=function(e){return Math.trunc(e*r.quartersInYear)};var r=n(8052)},9766:(e,t,n)=>{"use strict";var r=n(6540),i=n(8969);const a="label";function o(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function s(e,t){e.labels=t}function l(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:a;const r=[];e.datasets=t.map((t=>{const i=e.datasets.find((e=>e[n]===t[n]));return i&&t.data&&!r.includes(i)?(r.push(i),Object.assign(i,t),i):{...t}}))}function c(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a;const n={labels:[],datasets:[]};return s(n,e.labels),l(n,e.datasets,t),n}function u(e,t){const{height:n=150,width:a=300,redraw:u=!1,datasetIdKey:d,type:f,data:h,options:p,plugins:g=[],fallbackContent:m,updateMode:b,...y}=e,v=r.useRef(null),x=r.useRef(),w=()=>{v.current&&(x.current=new i.Chart(v.current,{type:f,data:c(h,d),options:p&&{...p},plugins:g}),o(t,x.current))},A=()=>{o(t,null),x.current&&(x.current.destroy(),x.current=null)};return r.useEffect((()=>{!u&&x.current&&p&&function(e,t){const n=e.options;n&&t&&Object.assign(n,t)}(x.current,p)}),[u,p]),r.useEffect((()=>{!u&&x.current&&s(x.current.config.data,h.labels)}),[u,h.labels]),r.useEffect((()=>{!u&&x.current&&h.datasets&&l(x.current.config.data,h.datasets,d)}),[u,h.datasets]),r.useEffect((()=>{x.current&&(u?(A(),setTimeout(w)):x.current.update(b))}),[u,p,h.labels,h.datasets,b]),r.useEffect((()=>{x.current&&(A(),setTimeout(w))}),[f]),r.useEffect((()=>(w(),()=>A())),[]),r.createElement("canvas",Object.assign({ref:v,role:"img",height:n,width:a},y),m)}const d=r.forwardRef(u);function f(e,t){return i.Chart.register(t),r.forwardRef(((t,n)=>r.createElement(d,Object.assign({},t,{ref:n,type:e}))))}const h=f("line",i.LineController),p=f("bar",i.BarController),g=f("radar",i.RadarController),m=f("doughnut",i.DoughnutController),b=f("polarArea",i.PolarAreaController),y=f("bubble",i.BubbleController),v=f("pie",i.PieController),x=f("scatter",i.ScatterController);t.Bar=p,t.Bubble=y,t.Chart=d,t.Doughnut=m,t.Line=h,t.Pie=v,t.PolarArea=b,t.Radar=g,t.Scatter=x,t.getDatasetAtEvent=function(e,t){return e.getElementsAtEventForMode(t.nativeEvent,"dataset",{intersect:!0},!1)},t.getElementAtEvent=function(e,t){return e.getElementsAtEventForMode(t.nativeEvent,"nearest",{intersect:!0},!1)},t.getElementsAtEvent=function(e,t){return e.getElementsAtEventForMode(t.nativeEvent,"index",{intersect:!0},!1)}}},t={};function n(r){var i=t[r];if(void 0!==i)return i.exports;var a=t[r]={id:r,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nc=void 0,n(8221)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,